---
import Layout from '../layouts/Layout.astro';
---

<Layout title="–î–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ - Restaurant Checklist">
	<div class="min-h-screen bg-gray-50">
		<!-- Header -->
		<header class="bg-white border-b border-gray-200 px-4 py-6">
			<div class="max-w-md mx-auto">
				<div class="flex items-center justify-between mb-4">
					<button id="backBtn" class="text-blue-600 hover:text-blue-800">‚Üê –ù–∞–∑–∞–¥</button>
					<h1 class="text-2xl font-bold text-black">–î–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑</h1>
					<div class="w-16"></div> <!-- Spacer -->
				</div>
			</div>
		</header>

		<!-- Tab Navigation -->
		<div class="max-w-md mx-auto px-4 py-4">
			<div class="flex bg-gray-100 rounded-lg p-1">
				<button id="barTab" class="flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors duration-200 bg-purple-600 text-white">
					üç∑ –ë–∞—Ä
				</button>
				<button id="kitchenTab" class="flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors duration-200 text-gray-600 hover:text-gray-800">
					üç≥ –ö—É—Ö–Ω—è
				</button>
			</div>
		</div>

		<!-- Main Content -->
		<main class="max-w-md mx-auto px-4 pb-6">
			<!-- Search Bar -->
			<div class="mb-4">
				<div class="relative">
					<input 
						type="text" 
						id="searchInput" 
						placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..." 
						class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
					>
					<span class="absolute left-3 top-3 text-gray-400">üîç</span>
				</div>
			</div>

			<!-- Loading State -->
			<div id="loadingState" class="text-center py-8">
				<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-4"></div>
				<p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
			</div>

			<!-- Products List -->
			<div id="productsList" class="divide-y divide-gray-200 bg-white rounded-lg border border-gray-200 hidden">
				<!-- Products will be populated by JavaScript -->
			</div>

			<!-- No Results -->
			<div id="noResults" class="text-center py-8 hidden">
				<span class="text-4xl mb-4 block">üîç</span>
				<p class="text-gray-600">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
				<p class="text-sm text-gray-500">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
			</div>

			<!-- Selected Items Summary -->
			<div id="selectedSummary" class="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 hidden">
				<div class="max-w-md mx-auto">
					<div class="flex items-center justify-between mb-3">
						<span class="font-medium text-gray-900">–í—ã–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <span id="selectedCount">0</span></span>
						<button id="clearSelected" class="text-red-600 hover:text-red-800 text-sm">–û—á–∏—Å—Ç–∏—Ç—å</button>
					</div>
					<button id="addToOrderBtn" class="w-full bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200">
						‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑
					</button>
				</div>
			</div>
		</main>
	</div>

	<script is:inline>
		let currentTab = 'bar';
		let allProducts = [];
		let selectedProducts = [];

		// Helper functions for +- buttons (defined globally)
		function increaseQuantity(id) {
			const currentProduct = selectedProducts.find(p => p.id === id && p.tab === currentTab);
			const currentQuantity = currentProduct ? currentProduct.quantity : 0;
			updateQuantity(id, currentQuantity + 1);
		}

		function decreaseQuantity(id) {
			const currentProduct = selectedProducts.find(p => p.id === id && p.tab === currentTab);
			const currentQuantity = currentProduct ? currentProduct.quantity : 0;
			updateQuantity(id, Math.max(0, currentQuantity - 1));
		}

		// Update quantity from input field
		function updateQuantityFromInput(id, inputValue) {
			// Extract number from input value (remove unit text)
			const quantity = parseInt(inputValue.replace(/[^0-9]/g, '')) || 0;
			updateQuantity(id, quantity);
		}

		// Switch between bar and kitchen tabs
		function switchTab(tab) {
			currentTab = tab;
			
			// Update tab appearance
			const barTab = document.getElementById('barTab');
			const kitchenTab = document.getElementById('kitchenTab');
			
			if (tab === 'bar') {
				barTab.className = 'flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors duration-200 bg-purple-600 text-white';
				kitchenTab.className = 'flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors duration-200 text-gray-600 hover:text-gray-800';
			} else {
				barTab.className = 'flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors duration-200 text-gray-600 hover:text-gray-800';
				kitchenTab.className = 'flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors duration-200 bg-orange-600 text-white';
			}
			
			// Clear search and reload products
			document.getElementById('searchInput').value = '';
			loadProducts();
		}

		// Load products from API
		async function loadProducts() {
			showLoadingState();
			
			try {
				const endpoint = currentTab === 'bar' ? '/api/bar-inventory' : '/api/kitchen-inventory';
				const response = await fetch(endpoint);
				const result = await response.json();
				
				if (result.success && result.data) {
					allProducts = result.data.map(product => ({
						id: product.ingredient_id || product.id,
						name: product.ingredient_name || product.name,
						unit: product.ingredient_unit || product.unit || '—à—Ç',
						category: product.category_name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
						stock: product.ingredient_left || product.stock || 0
					}));
					
					displayProducts(allProducts);
				} else {
					throw new Error(result.error || 'Failed to load products');
				}
			} catch (error) {
				console.error('Error loading products:', error);
				showNoResults();
			}
		}

		// Display products list
		function displayProducts(products) {
			const productsList = document.getElementById('productsList');
			const loadingState = document.getElementById('loadingState');
			const noResults = document.getElementById('noResults');
			
			loadingState.classList.add('hidden');
			noResults.classList.add('hidden');
			
			if (products.length === 0) {
				showNoResults();
				return;
			}
			
			let productsHtml = '';
			
			products.forEach(product => {
				const isSelected = selectedProducts.find(p => p.id === product.id && p.tab === currentTab);
				const isLowStock = product.stock <= 0;
				const quantityColor = isLowStock ? "text-red-600" : "text-gray-900";
				const borderColor = isSelected ? "border-l-4 border-l-green-500" : "";
				
				productsHtml += `
					<div class="product-item bg-white py-4 px-4 ${borderColor}" data-product-id="${product.id}">
						<div class="flex items-center justify-between w-full">
							<div class="flex-1">
								<h3 class="text-base font-medium text-gray-900">${product.name}</h3>
								<div class="text-sm text-gray-500 mt-1">–ù–∞ —Å–∫–ª–∞–¥–µ: <span class="${quantityColor} font-medium">${product.stock}</span> ${product.unit}</div>
								${product.category !== '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' ? `<div class="text-xs text-gray-400 mt-1">${product.category}</div>` : ''}
							</div>
							<div class="flex items-center justify-end">
								<!-- Inline quantity controls: - [input with unit] + (always shown) -->
								<div class="flex items-center bg-gray-100 rounded-lg border border-gray-300">
									<button
										class="px-2 h-10 bg-gray-100 hover:bg-gray-200 text-gray-700 flex items-center justify-center text-2xl font-normal transition-colors duration-200 rounded-l-lg"
										onclick="decreaseQuantity('${product.id}')"
										title="–£–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 1 ${product.unit}"
										type="button"
									>
										‚àí
									</button>
									<div class="relative">
										<input
											type="text"
											inputmode="numeric"
											pattern="[0-9]*"
											class="quantity-input w-16 px-3 py-2 border-0 focus:outline-none focus:ring-0 text-center bg-gray-100 text-sm font-medium"
											value="${(isSelected?.quantity || 0)} ${product.unit}"
											data-product-id="${product.id}"
											data-unit="${product.unit}"
											onchange="updateQuantityFromInput('${product.id}', this.value)"
											onclick="event.stopPropagation()"
										/>
									</div>
									<button
										class="px-2 h-10 bg-gray-100 hover:bg-gray-200 text-gray-700 flex items-center justify-center text-2xl font-normal transition-colors duration-200 rounded-r-lg"
										onclick="increaseQuantity('${product.id}')"
										title="–î–æ–±–∞–≤–∏—Ç—å 1 ${product.unit}"
										type="button"
									>
										+
									</button>
								</div>
							</div>
						</div>
					</div>
				`;
			});
			
			productsList.innerHTML = productsHtml;
			productsList.classList.remove('hidden');
		}



		// Update quantity for product
		function updateQuantity(id, quantity) {
			const newQuantity = Math.max(0, parseInt(quantity) || 0);
			const existingIndex = selectedProducts.findIndex(p => p.id === id && p.tab === currentTab);
			
			if (newQuantity > 0) {
				// Find the product in allProducts to get its details
				const productDetails = allProducts.find(p => p.id === id);
				if (!productDetails) return;
				
				if (existingIndex >= 0) {
					// Update existing selection
					selectedProducts[existingIndex].quantity = newQuantity;
				} else {
					// Add to selection
					selectedProducts.push({
						id: id,
						name: productDetails.name,
						unit: productDetails.unit,
						quantity: newQuantity,
						tab: currentTab,
						department: currentTab === 'bar' ? 'bar' : 'kitchen',
						departmentName: currentTab === 'bar' ? '–ë–∞—Ä' : '–ö—É—Ö–Ω—è'
					});
				}
			} else {
				// Remove from selection if quantity is 0
				if (existingIndex >= 0) {
					selectedProducts.splice(existingIndex, 1);
				}
			}
			
			updateSelectedSummary();
			displayProducts(allProducts); // Refresh display to show updated quantity
		}

		// Update selected products summary
		function updateSelectedSummary() {
			const selectedSummary = document.getElementById('selectedSummary');
			const selectedCount = document.getElementById('selectedCount');
			
			selectedCount.textContent = selectedProducts.length;
			
			if (selectedProducts.length > 0) {
				selectedSummary.classList.remove('hidden');
			} else {
				selectedSummary.classList.add('hidden');
			}
		}

		// Clear all selected products
		function clearSelectedProducts() {
			selectedProducts = [];
			updateSelectedSummary();
			displayProducts(allProducts);
		}

		// Filter products based on search
		function filterProducts(searchTerm) {
			if (!searchTerm.trim()) {
				displayProducts(allProducts);
				return;
			}
			
			const filtered = allProducts.filter(product => 
				product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
				product.category.toLowerCase().includes(searchTerm.toLowerCase())
			);
			
			displayProducts(filtered);
		}

		// Add selected products to existing order
		function addSelectedToOrder() {
			if (selectedProducts.length === 0) {
				alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑');
				return;
			}
			
			// Get existing order from localStorage
			const existingOrder = JSON.parse(localStorage.getItem('pendingOrder') || '{}');
			
			if (!existingOrder.items) {
				alert('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑');
				return;
			}
			
			// Add selected products to existing order
			selectedProducts.forEach(product => {
				// Check if product already exists in order
				const existingItem = existingOrder.items.find(item => 
					item.id === product.id && item.department === product.department
				);
				
				if (existingItem) {
					// Update quantity if product already exists
					existingItem.quantity += product.quantity;
				} else {
					// Add new product to order
					existingOrder.items.push({
						id: product.id,
						name: product.name,
						quantity: product.quantity,
						unit: product.unit,
						department: product.department,
						departmentName: product.departmentName
					});
				}
			});
			
			// Update order totals
			existingOrder.totalItems = existingOrder.items.length;
			
			// Update departments if new ones were added
			const existingDepartments = existingOrder.departments || [];
			selectedProducts.forEach(product => {
				const deptExists = existingDepartments.find(dept => dept.name === product.departmentName);
				if (!deptExists) {
					existingDepartments.push({
						name: product.departmentName,
						emoji: product.departmentName === '–ë–∞—Ä' ? 'üç∑' : 'üç≥'
					});
				}
			});
			existingOrder.departments = existingDepartments;
			
			// Regenerate formatted text
			existingOrder.formattedText = generateFormattedText(existingOrder);
			
			// Save updated order back to localStorage
			localStorage.setItem('pendingOrder', JSON.stringify(existingOrder));
			
			alert(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${selectedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑`);
			
			// Return to confirmation page
			window.location.href = '/confirmation';
		}

		// Generate formatted text for the order
		function generateFormattedText(order) {
			const today = new Date().toLocaleDateString('ru-RU');
			let message = `üìã –ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ - ${today}\n\n`;
			
			if (order.departments) {
				order.departments.forEach(dept => {
					const deptItems = order.items.filter(item => item.departmentName === dept.name);
					if (deptItems.length > 0) {
						message += `${dept.emoji} ${dept.name}:\n`;
						deptItems.forEach(item => {
							message += `‚Ä¢ ${item.name} - ${item.quantity} ${item.unit}\n`;
						});
						message += '\n';
					}
				});
			}
			
			message += `üìä –ò—Ç–æ–≥–æ: ${order.totalItems} —Ç–æ–≤–∞—Ä–æ–≤`;
			return message;
		}

		// Show loading state
		function showLoadingState() {
			document.getElementById('loadingState').classList.remove('hidden');
			document.getElementById('productsList').classList.add('hidden');
			document.getElementById('noResults').classList.add('hidden');
		}

		// Show no results state
		function showNoResults() {
			document.getElementById('loadingState').classList.add('hidden');
			document.getElementById('productsList').classList.add('hidden');
			document.getElementById('noResults').classList.remove('hidden');
		}

		// Initialize page when DOM is loaded
		document.addEventListener('DOMContentLoaded', () => {
			// Initialize the page
			loadProducts();
			
			// Event listeners
			document.getElementById('backBtn').addEventListener('click', () => {
				window.location.href = '/confirmation';
			});
			
			document.getElementById('barTab').addEventListener('click', () => switchTab('bar'));
			document.getElementById('kitchenTab').addEventListener('click', () => switchTab('kitchen'));
			
			document.getElementById('searchInput').addEventListener('input', (e) => {
				filterProducts(e.target.value);
			});
			
			document.getElementById('clearSelected').addEventListener('click', clearSelectedProducts);
			document.getElementById('addToOrderBtn').addEventListener('click', addSelectedToOrder);
		});
	</script>
</Layout>
