---
import Layout from '../layouts/Layout.astro';
---

<Layout title="–ö—É—Ö–Ω—è - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å">
	<div class="min-h-screen bg-white">
		<!-- Header with Role Info -->
		<header class="bg-orange-600 text-white px-4 py-4">
			<div class="max-w-md mx-auto flex items-center relative">
				<a href="/" class="flex items-center justify-center w-10 h-10 hover:bg-white/10 rounded-full transition-all duration-200 active:scale-95 z-10">
					<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
						<path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7"></path>
					</svg>
				</a>
				<h1 class="text-lg font-semibold absolute left-1/2 transform -translate-x-1/2">üç≥ –ö—É—Ö–Ω—è</h1>
			</div>
		</header>

		<!-- Main Content -->
		<main class="max-w-md mx-auto px-4 py-6">
			<!-- Loading State -->
			<div id="loadingState" class="text-center py-8">
				<div class="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-600 mx-auto mb-4"></div>
				<p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫—É—Ö–Ω–∏...</p>
			</div>

			<!-- My Recent Orders Section -->
			<div id="myRecentOrders" class="mb-6 hidden">
				<h2 class="text-lg font-semibold text-gray-900 mb-3 flex items-center">
					<span class="text-xl mr-2">üìã</span>
					–ú–æ–∏ –∑–∞–∫–∞–∑—ã
				</h2>
				<div id="recentOrdersList" class="space-y-3">
					<!-- Orders will be loaded here -->
				</div>
			</div>

			<!-- Order View -->
			<div id="orderView" class="space-y-4 hidden">
				<!-- Search Field -->
				<div class="sticky top-0 z-10 bg-gray-50 p-4 rounded-lg border-2 border-orange-200 shadow-sm">
					<div class="relative">
						<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
							<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
							</svg>
						</div>
						<input 
							type="text" 
							id="productSearchInput"
							class="block w-full pl-10 pr-10 py-3 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 text-base"
							placeholder="üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫—É—Ö–Ω–∏..."
							autocomplete="off"
						/>
						<div class="absolute inset-y-0 right-0 pr-3 flex items-center">
							<button 
								id="clearSearchBtn"
								class="h-5 w-5 text-gray-400 hover:text-gray-600 focus:outline-none hidden"
								title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
							>
								<svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
								</svg>
							</button>
						</div>
					</div>
					<div id="searchResultsCount" class="mt-2 text-sm text-gray-600 hidden">
						<span id="searchResultsText"></span>
					</div>
					<div id="addedProductsLabel" class="mt-2 text-sm font-medium text-orange-700 bg-orange-50 px-3 py-2 rounded-lg border border-orange-200 hidden">
						<span id="addedProductsText">–¢–æ–≤–∞—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</span>
					</div>
				</div>
				
				<!-- Inline Custom Item Form -->
				<div class="mb-4 p-3 bg-orange-50 rounded-lg border border-orange-200">
					<div class="flex items-center space-x-1">
						<input 
							type="text" 
							id="customItemName" 
							placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
							class="flex-1 px-2 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 text-sm min-w-0"
						/>
						<input 
							type="number" 
							id="customItemQuantity" 
							placeholder="–ö–æ–ª-–≤–æ"
							min="0.1"
							step="0.1"
							inputmode="numeric"
							pattern="[0-9]*"
							class="w-16 px-2 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 text-sm"
						/>
						<select 
							id="customItemUnit" 
							class="w-14 px-1 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 text-sm"
						>
							<option value="—à—Ç">—à—Ç</option>
							<option value="–∫–≥">–∫–≥</option>
							<option value="–≥">–≥</option>
							<option value="–ª">–ª</option>
							<option value="–º–ª">–º–ª</option>
							<option value="—É–ø–∞–∫">—É–ø–∞–∫</option>
							<option value="–±–∞–Ω–∫–∞">–±–∞–Ω–∫–∞</option>
						</select>
						<button 
							id="addCustomItemBtn"
							class="px-3 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors duration-200 text-sm font-medium flex-shrink-0"
						>
							‚ûï
						</button>
					</div>
				</div>

				<!-- Products List -->
				<div id="productsList">
					<!-- Products will be populated by JavaScript -->
				</div>
				
				<!-- Floating Action Button -->
				<button 
					id="sendWhatsAppBtn" 
					class="fixed bottom-6 right-6 bg-gray-400 hover:bg-gray-500 text-white font-medium py-4 px-6 rounded-lg shadow-lg z-50 transition-all duration-200 flex items-center space-x-2 min-w-[180px] justify-center"
					onclick="goToCart()"
				>
					<span class="text-center">–í –∫–æ—Ä–∑–∏–Ω—É</span>
				</button>
			</div>
		</main>


	</div>

	<script is:inline>
		// Set role and department
		window.userRole = 'kitchen';
		window.currentDepartment = 'kitchen';
		
		// Load kitchen products
		async function loadKitchenProducts() {
			const loadingState = document.getElementById('loadingState');
			const orderView = document.getElementById('orderView');
			
			try {
				console.log('üç≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫—É—Ö–Ω–∏...');
				
				const response = await fetch('/api/kitchen-inventory');
				const result = await response.json();
				
				if (!result.success) {
					throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∫—É—Ö–Ω–∏');
				}
				
				const kitchenProducts = result.data;
				console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${kitchenProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –∫—É—Ö–Ω–∏`);
				
				// Hide loading and show order view
				loadingState.style.display = 'none';
				orderView.style.display = 'block';
				orderView.classList.remove('hidden');
				
				// Store products globally
				window.kitchenProducts = kitchenProducts;
				
				// Initialize order mode
				if (window.initializeOrderMode) {
					window.initializeOrderMode();
				}
				
				// Wait a bit for shopping list data to be initialized, then load cart from localStorage
				setTimeout(() => {
					if (window.checklist && window.checklist.loadCartFromLocalStorage) {
						window.checklist.loadCartFromLocalStorage();
					}
				}, 500);
				
				// Update floating button label
				if (window.updateFloatingButtonLabel) {
					window.updateFloatingButtonLabel();
				}
				
			} catch (error) {
				console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∫—É—Ö–Ω–∏:', error);
				loadingState.innerHTML = `
					<div class="text-center py-8">
						<div class="text-red-500 mb-4">‚ùå</div>
						<p class="text-red-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ö–Ω–∏</p>
						<p class="text-sm text-gray-500">${error.message}</p>
						<button onclick="loadKitchenProducts()" class="mt-4 px-4 py-2 bg-orange-600 text-white rounded-lg">
							–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
						</button>
					</div>
				`;
			}
	}
	
	// Load recent orders for kitchen
	async function loadMyRecentOrders() {
		try {
			const response = await fetch('/api/get-all-orders');
			const data = await response.json();
			
			if (data.success) {
				// Filter orders for kitchen department that are pending (not delivered)
				const kitchenOrders = data.data
					.filter(order => 
						(order.department === 'kitchen' || order.departmentName === '–ö—É—Ö–Ω—è') &&
						!(order.db_status === 'delivered' || order.status === 'delivered')
					)
					.sort((a, b) => new Date(b.db_created_at || b.timestamp) - new Date(a.db_created_at || a.timestamp))
					.slice(0, 3); // Show last 3 orders
				
				displayMyRecentOrders(kitchenOrders);
			}
		} catch (error) {
			console.error('Error loading recent orders:', error);
		}
	}
	
	// Display recent orders
	function displayMyRecentOrders(orders) {
		const container = document.getElementById('recentOrdersList');
		const section = document.getElementById('myRecentOrders');
		
		if (!orders || orders.length === 0) {
			section.classList.add('hidden');
			return;
		}
		
		section.classList.remove('hidden');
		
		let html = '';
		orders.forEach(order => {
			const date = new Date(order.db_created_at || order.timestamp);
			const totalItems = order.items?.length || 0;
			const totalQty = order.items?.reduce((sum, item) => sum + (parseFloat(item.quantity) || 0), 0) || 0;
			
			html += `
				<div class="bg-orange-50 border border-orange-200 rounded-lg p-4">
					<div class="flex justify-between items-start mb-2">
						<div>
							<div class="font-medium text-gray-900">–ó–∞–∫–∞–∑ –æ—Ç ${date.toLocaleDateString('ru-RU')}</div>
							<div class="text-sm text-gray-600">${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</div>
						</div>
						<div class="text-right">
							<div class="text-sm font-medium text-gray-700">${totalItems} —Ç–æ–≤–∞—Ä–æ–≤</div>
							<div class="text-xs text-gray-500">${totalQty.toFixed(1)} —à—Ç.</div>
						</div>
					</div>
					<div class="flex gap-2 mt-3">
						<button 
							onclick="addMissingProductsToOrder('${order.timestamp}')" 
							class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-colors flex items-center justify-center space-x-1"
						>
							<span>‚ûï</span>
							<span>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã</span>
						</button>
						<button 
							onclick="viewOrderDetails('${order.timestamp}')" 
							class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-3 py-2 rounded-lg text-sm font-medium transition-colors"
						>
							üëÅÔ∏è
						</button>
					</div>
				</div>
			`;
		});
		
		container.innerHTML = html;
	}
	
	// Add missing products to existing order
	function addMissingProductsToOrder(orderTimestamp) {
		console.log('‚ûï Adding missing products to order:', orderTimestamp);
		localStorage.setItem('modifyOrderTimestamp', orderTimestamp);
		window.location.href = `/modify-order?timestamp=${encodeURIComponent(orderTimestamp)}`;
	}
	
	// View order details
	function viewOrderDetails(orderTimestamp) {
		window.location.href = `/delivery`;
	}
	
	// Load on page ready
	document.addEventListener('DOMContentLoaded', function() {
		loadKitchenProducts();
		loadMyRecentOrders(); // Load recent orders
		
		// Auto-refresh orders every 30 seconds
		setInterval(() => {
			loadMyRecentOrders();
		}, 30000);
		
		// Refresh orders when page becomes visible again
		document.addEventListener('visibilitychange', function() {
			if (!document.hidden) {
				loadMyRecentOrders();
			}
		});
		
		// Load saved quantities from localStorage after products are loaded
		setTimeout(() => {
			if (window.checklist && window.checklist.loadCartFromLocalStorage) {
				window.checklist.loadCartFromLocalStorage();
				console.log('üì• Restored cart quantities from localStorage');
			}
		}, 100);
	});

		// Go to cart function - simply navigate to cart page
		function goToCart() {
			// Simply navigate to cart - localStorage is already synced
			window.location.href = '/cart';
		}
		
		// Setup inline custom item form
		document.addEventListener('DOMContentLoaded', function() {
			const addCustomItemBtn = document.getElementById('addCustomItemBtn');
			const customItemName = document.getElementById('customItemName');
			const customItemQuantity = document.getElementById('customItemQuantity');
			const customItemUnit = document.getElementById('customItemUnit');
			
			if (addCustomItemBtn) {
				addCustomItemBtn.addEventListener('click', function() {
					const name = customItemName.value.trim();
					const quantity = parseFloat(customItemQuantity.value);
					const unit = customItemUnit.value;
					
					if (!name || !quantity || !unit) {
						alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
						return;
					}
					
					// Create custom item with unique ID (negative to distinguish from Poster items)
					const customItem = {
						id: -Date.now(), // Negative ID for custom items
						name: name,
						quantity: 0, // Current stock (unknown for custom items)
						unit: unit,
						minQuantity: 0,
						checked: false,
						shoppingQuantity: quantity,
						isCustom: true,
					};
					
					// Wait for checklist.js to be loaded and initialized
					const waitForChecklist = setInterval(() => {
						if (window.customItems && window.shoppingListData && window.renderShoppingListProducts) {
							clearInterval(waitForChecklist);
							
							// Add to custom items array
							window.customItems.push(customItem);
							
							// Add to shopping list data
							window.shoppingListData.push(customItem);
							
							// Re-render the shopping list to include the new item
							window.renderShoppingListProducts();
							
							// Update floating button label
							if (window.updateFloatingButtonLabel) {
								window.updateFloatingButtonLabel();
							}
							
							// Auto-save
							if (window.autoSaveToCache) {
								window.autoSaveToCache();
							}
							
							// Clear form
							customItemName.value = '';
							customItemQuantity.value = '';
							customItemUnit.value = '—à—Ç';
							
							// Focus back to name input
							customItemName.focus();
							
							// Show success message
							alert(`–¢–æ–≤–∞—Ä "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!`);
						}
					}, 100);
					
					// Timeout after 5 seconds if checklist.js doesn't load
					setTimeout(() => {
						clearInterval(waitForChecklist);
						alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
					}, 5000);
				});
			}
			
			// Handle Enter key in name input
			if (customItemName) {
				customItemName.addEventListener('keydown', function(e) {
					if (e.key === 'Enter') {
						e.preventDefault();
						addCustomItemBtn.click();
					}
				});
			}
			
			// Handle Enter key in quantity input
			if (customItemQuantity) {
				customItemQuantity.addEventListener('keydown', function(e) {
					if (e.key === 'Enter') {
						e.preventDefault();
						addCustomItemBtn.click();
					}
				});
			}
		});

	</script>

	<script src="/scripts/checklist.js" is:inline></script>
</Layout>