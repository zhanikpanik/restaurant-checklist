---
import Layout from '../../layouts/Layout.astro';

// Static mode - data will be loaded via client-side JavaScript
let kitchenProducts = [];
---

<Layout title="–ö—É—Ö–Ω—è - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å">
	<div class="min-h-screen bg-white">
		<!-- Header with Navigation -->
		<header class="bg-white border-b border-gray-200 px-4 py-6">
			<div class="max-w-md mx-auto">
				<div class="flex items-center justify-between mb-4">
					<a href="/" class="text-blue-600 hover:text-blue-800">‚Üê –ë–∞—Ä</a>
					<h1 class="text-3xl font-bold text-black">–ö—É—Ö–Ω—è</h1>
					<a href="/restaurant/procurement" class="text-green-600 hover:text-green-800 text-sm">–ó–∞–∫—É–ø–∫–∏ ‚Üí</a>
				</div>
				<div class="text-center">
					<span class="text-sm text-gray-600">
						{kitchenProducts.length > 15 ? "üìä –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Poster" : "üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"}
					</span>
				</div>
			</div>
		</header>

		<!-- Main Content -->
		<main class="max-w-md mx-auto px-4 py-6">
			<!-- Loading State -->
			<div id="loadingState" class="text-center py-8">
				<div class="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-600 mx-auto mb-4"></div>
				<p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞...</p>
			</div>

			<!-- Order View (Direct) -->
			<div id="orderView" class="space-y-4 hidden">
				<!-- Search Field -->
				<div class="sticky top-0 z-10 bg-gray-50 p-4 rounded-lg border-2 border-orange-200 shadow-sm">
					<div class="relative">
						<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
							<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
							</svg>
						</div>
						<input 
							type="text" 
							id="productSearchInput"
							class="block w-full pl-10 pr-10 py-3 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 text-base"
							placeholder="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫—É—Ö–Ω–∏..."
							autocomplete="off"
						/>
						<div class="absolute inset-y-0 right-0 pr-3 flex items-center">
							<button 
								id="clearSearchBtn"
								class="h-5 w-5 text-gray-400 hover:text-gray-600 focus:outline-none hidden"
								title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
							>
								<svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
								</svg>
							</button>
						</div>
					</div>
					<div id="searchResultsCount" class="mt-2 text-sm text-gray-600 hidden">
						<span id="searchResultsText"></span>
					</div>
					<!-- Added Products Summary Label -->
					<div id="addedProductsLabel" class="mt-2 text-sm font-medium text-blue-700 bg-blue-50 px-3 py-2 rounded-lg border border-blue-200 hidden">
						<span id="addedProductsText">–¢–æ–≤–∞—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</span>
					</div>
				</div>
				
				<!-- Products List -->
				<div id="productsList" class="space-y-4">
					<!-- Order products will be populated by JavaScript -->
				</div>
				
				<!-- Floating Action Button -->
				<button 
					id="sendWhatsAppBtn" 
					class="fixed bottom-6 right-6 bg-gray-400 hover:bg-gray-500 text-white font-medium py-4 px-6 rounded-lg shadow-lg z-50 transition-all duration-200 flex items-center space-x-2 min-w-[180px] justify-center"
				>
					<span>üì±</span>
					<span class="text-center">–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑</span>
				</button>
			</div>
		</main>
	</div>

	<script is:inline>
		// Load kitchen products for ordering via our API proxy (no CORS issues)
		async function loadKitchenProducts() {
			const loadingState = document.getElementById('loadingState');
			const orderView = document.getElementById('orderView');
			
			try {
				console.log('üçΩÔ∏è Loading kitchen products for ordering...');
				
				// Call our API proxy endpoint (no CORS issues)
				const response = await fetch('/api/kitchen-inventory');
				const result = await response.json();
				
				if (!result.success) {
					throw new Error(result.error || 'Failed to load kitchen products');
				}
				
				const kitchenProducts = result.data;
				console.log(`‚úÖ Loaded ${kitchenProducts.length} kitchen products from Poster`);
				
				// Hide loading and show order view
				loadingState.style.display = 'none';
				orderView.style.display = 'block';
				orderView.classList.remove('hidden');
				
				// Store products globally for checklist.js
				window.kitchenProducts = kitchenProducts;
				
				// Set department for localStorage
				window.currentDepartment = 'kitchen';
				
				// Initialize order mode directly
				if (window.initializeOrderMode) {
					window.initializeOrderMode();
				}
				
				// Update floating button label after initialization
				if (window.updateFloatingButtonLabel) {
					window.updateFloatingButtonLabel();
				}
				
				// Update header indicator
				const headerSpan = document.querySelector('header span.text-sm');
				if (headerSpan) {
					headerSpan.textContent = `üìä –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Poster (${kitchenProducts.length} —Ç–æ–≤–∞—Ä–æ–≤)`;
				}
				
			} catch (error) {
				console.error('‚ùå Failed to load kitchen products:', error);
				loadingState.innerHTML = `
					<div class="text-center py-8">
						<div class="text-red-500 mb-4">‚ùå</div>
						<p class="text-red-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>
						<p class="text-sm text-gray-500">${error.message}</p>
						<button onclick="loadKitchenProducts()" class="mt-4 px-4 py-2 bg-orange-600 text-white rounded-lg">
							–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
						</button>
					</div>
				`;
			}
		}
		
		// Load data when page loads
		document.addEventListener('DOMContentLoaded', function() {
			loadKitchenProducts();
		});
	</script>

	<script src="/scripts/checklist.js" is:inline></script>
</Layout> 