---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∞–º–∏">
	<div class="min-h-screen bg-gray-50">
		<!-- Header -->
		<header class="bg-white border-b border-gray-200 px-4 py-6">
			<div class="max-w-4xl mx-auto">
				<div class="flex items-center justify-between mb-4">
					<a href="/" class="text-blue-600 hover:text-blue-800">‚Üê –ë–∞—Ä</a>
					<h1 class="text-3xl font-bold text-black">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∞–º–∏</h1>
					<a href="/restaurant/kitchen" class="text-orange-600 hover:text-orange-800">–ö—É—Ö–Ω—è ‚Üí</a>
				</div>
			</div>
		</header>

		<!-- Main Content -->
		<main class="max-w-4xl mx-auto px-4 py-6">
			<!-- Department Tabs -->
			<div class="mb-6">
				<div class="border-b border-gray-200">
					<nav class="-mb-px flex space-x-8">
						<button
							id="allTab"
							class="procurement-tab border-b-2 border-green-500 py-4 px-1 text-sm font-medium text-green-600"
						>
							–í—Å–µ –∑–∞–∫—É–ø–∫–∏
						</button>
						<button
							id="barTab"
							class="procurement-tab border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300"
						>
							–ë–∞—Ä
						</button>
						<button
							id="kitchenTab"
							class="procurement-tab border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300"
						>
							–ö—É—Ö–Ω—è
						</button>
					</nav>
				</div>
			</div>

			<!-- Purchase Request Status Cards -->
			<div class="grid gap-6 mb-8">
				<!-- Pending Requests -->
				<div class="bg-white rounded-lg shadow p-6">
					<div class="flex items-center justify-between mb-4">
						<h2 class="text-xl font-semibold text-gray-900">–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫—É–ø–∫–∏</h2>
						<span class="bg-yellow-100 text-yellow-800 text-sm font-medium px-2.5 py-0.5 rounded">
							<span id="pendingCount">0</span> –∑–∞—è–≤–æ–∫
						</span>
					</div>
					<div id="pendingRequests" class="space-y-3">
						<p class="text-gray-500 text-center py-8">–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–∫—É–ø–∫—É</p>
					</div>
				</div>

				<!-- Current Shopping List -->
				<div class="bg-white rounded-lg shadow p-6">
					<div class="flex items-center justify-between mb-4">
						<h2 class="text-xl font-semibold text-gray-900">–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫</h2>
						<div class="flex space-x-2">
							<button
								id="exportListBtn"
								class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm"
							>
								–≠–∫—Å–ø–æ—Ä—Ç
							</button>
							<button
								id="clearListBtn"
								class="bg-gray-500 hover:bg-gray-600 text-white px-3 py-1 rounded text-sm"
							>
								–û—á–∏—Å—Ç–∏—Ç—å
							</button>
						</div>
					</div>
					<div id="consolidatedList" class="space-y-3">
						<p class="text-gray-500 text-center py-8">–°–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫ –ø—É—Å—Ç</p>
					</div>
				</div>

				<!-- Purchase Actions -->
				<div class="bg-white rounded-lg shadow p-6">
					<h2 class="text-xl font-semibold text-gray-900 mb-4">–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫—É–ø–∫–∞–º–∏</h2>
					<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
						<button
							id="markPurchasedBtn"
							class="bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-6 rounded-lg"
						>
							‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–∫—É–ø–ª–µ–Ω–æ
						</button>
						<button
							id="uploadSupplyBtn"
							class="bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-3 px-6 rounded-lg"
						>
							üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É (XLS)
						</button>
						<button
							id="generateReportBtn"
							class="bg-purple-600 hover:bg-purple-700 text-white font-medium py-3 px-6 rounded-lg"
						>
							üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫—É–ø–∫–∞–º
						</button>
						<button
							id="lowStockAlertBtn"
							class="bg-red-600 hover:bg-red-700 text-white font-medium py-3 px-6 rounded-lg"
						>
							‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —Ç–æ–≤–∞—Ä–æ–≤
						</button>
					</div>
				</div>
			</div>

			<!-- Purchase History -->
			<div class="bg-white rounded-lg shadow p-6">
				<h2 class="text-xl font-semibold text-gray-900 mb-4">–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫—É–ø–æ–∫</h2>
				<div id="purchaseHistory" class="space-y-3">
					<p class="text-gray-500 text-center py-8">–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞</p>
				</div>
			</div>

			<!-- XLS Upload Modal -->
			<div id="xlsUploadModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
				<div class="flex items-center justify-center min-h-screen px-4">
					<div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
						<div class="flex items-center justify-between mb-4">
							<h3 class="text-lg font-medium text-gray-900">–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –∏–∑ XLS</h3>
							<button id="closeUploadModal" class="text-gray-400 hover:text-gray-600">
								<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
								</svg>
							</button>
						</div>

						<div class="mb-4">
							<label class="block text-sm font-medium text-gray-700 mb-2">
								–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:
							</label>
							<select id="uploadDepartment" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
								<option value="kitchen">–ö—É—Ö–Ω—è</option>
								<option value="bar">–ë–∞—Ä</option>
							</select>
						</div>

						<div class="mb-4">
							<label class="block text-sm font-medium text-gray-700 mb-2">
								–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:
							</label>
							<div class="bg-gray-50 p-3 rounded text-sm">
								<div class="font-mono">
									<div>‚Ä¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</div>
									<div>‚Ä¢ –§–∞—Å–æ–≤–∫–∞</div>
									<div>‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</div>
									<div>‚Ä¢ –¶–µ–Ω–∞</div>
								</div>
							</div>
						</div>

						<div class="mb-6">
							<label class="block text-sm font-medium text-gray-700 mb-2">
								–í—ã–±–µ—Ä–∏—Ç–µ XLS —Ñ–∞–π–ª:
							</label>
							<input type="file" id="xlsFileInput" accept=".xls,.xlsx"
								class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
						</div>

						<div class="flex space-x-3">
							<button id="uploadXlsBtn" class="flex-1 bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2 px-4 rounded-md">
								üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å
							</button>
							<button id="downloadTemplateBtn" class="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-md">
								üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω
							</button>
						</div>
					</div>
				</div>
			</div>
		</main>
	</div>

	<script>
		// Procurement Management Script
		document.addEventListener('DOMContentLoaded', function() {
			initializeProcurementInterface();
			loadPurchaseRequests();
			setupEventListeners();
		});

		function initializeProcurementInterface() {
			console.log('üîÑ Initializing procurement interface...');
			loadConsolidatedList();
			loadPurchaseHistory();
		}

		function setupEventListeners() {
			// Tab switching
			document.querySelectorAll('.procurement-tab').forEach(tab => {
				tab.addEventListener('click', function() {
					switchTab(this.id);
				});
			});

			// Action buttons
			document.getElementById('markPurchasedBtn').addEventListener('click', markAsPurchased);
			document.getElementById('uploadSupplyBtn').addEventListener('click', showUploadModal);
			document.getElementById('exportListBtn').addEventListener('click', exportShoppingList);
			document.getElementById('clearListBtn').addEventListener('click', clearShoppingList);
			document.getElementById('generateReportBtn').addEventListener('click', generateReport);
			document.getElementById('lowStockAlertBtn').addEventListener('click', showLowStockAlert);

			// XLS Upload Modal event listeners
			document.getElementById('closeUploadModal').addEventListener('click', hideUploadModal);
			document.getElementById('uploadXlsBtn').addEventListener('click', uploadXlsFile);
			document.getElementById('downloadTemplateBtn').addEventListener('click', downloadTemplate);
		}

		function loadPurchaseRequests() {
			// Load bar and kitchen purchase requests from localStorage
			const barList = JSON.parse(localStorage.getItem('barShoppingList') || 'null');
			const kitchenList = JSON.parse(localStorage.getItem('kitchenShoppingList') || 'null');

			let pendingRequests = [];

			if (barList && barList.items.length > 0) {
				pendingRequests.push({
					department: '–ë–∞—Ä',
					timestamp: barList.timestamp,
					items: barList.items,
					totalItems: barList.totalItems,
					color: 'blue'
				});
			}

			if (kitchenList && kitchenList.items.length > 0) {
				pendingRequests.push({
					department: '–ö—É—Ö–Ω—è',
					timestamp: kitchenList.timestamp,
					items: kitchenList.items,
					totalItems: kitchenList.totalItems,
					color: 'orange'
				});
			}

			displayPendingRequests(pendingRequests);
			updatePendingCount(pendingRequests.length);
		}

		function displayPendingRequests(requests) {
			const container = document.getElementById('pendingRequests');

			if (requests.length === 0) {
				container.innerHTML = '<p class="text-gray-500 text-center py-8">–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–∫—É–ø–∫—É</p>';
				return;
			}

			container.innerHTML = requests.map(request => `
				<div class="border border-${request.color}-200 bg-${request.color}-50 rounded-lg p-4">
					<div class="flex items-center justify-between mb-2">
						<h3 class="font-medium text-${request.color}-900">${request.department}</h3>
						<span class="text-sm text-gray-500">${new Date(request.timestamp).toLocaleDateString('ru-RU')}</span>
					</div>
					<p class="text-sm text-gray-600 mb-3">${request.totalItems} —Ç–æ–≤–∞—Ä–æ–≤</p>
					<div class="flex space-x-2">
						<button
							onclick="approveRequest('${request.department.toLowerCase()}')"
							class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm"
						>
							–£—Ç–≤–µ—Ä–¥–∏—Ç—å
						</button>
						<button
							onclick="viewRequestDetails('${request.department.toLowerCase()}')"
							class="bg-gray-500 hover:bg-gray-600 text-white px-3 py-1 rounded text-sm"
						>
							–î–µ—Ç–∞–ª–∏
						</button>
					</div>
				</div>
			`).join('');
		}

		function loadConsolidatedList() {
			// Combine all approved purchase requests
			const consolidatedItems = [];

			// Add logic to consolidate duplicate items
			// For now, just display a placeholder
			const container = document.getElementById('consolidatedList');
			container.innerHTML = '<p class="text-gray-500 text-center py-8">–£—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫—É–ø–æ–∫</p>';
		}

		function updatePendingCount(count) {
			document.getElementById('pendingCount').textContent = count;
		}

		function switchTab(tabId) {
			// Remove active class from all tabs
			document.querySelectorAll('.procurement-tab').forEach(tab => {
				tab.className = 'procurement-tab border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300';
			});

			// Add active class to clicked tab
			document.getElementById(tabId).className = 'procurement-tab border-b-2 border-green-500 py-4 px-1 text-sm font-medium text-green-600';

			// Filter content based on tab
			filterContentByDepartment(tabId);
		}

		function filterContentByDepartment(tabId) {
			// Filter pending requests and lists by department
			const department = tabId.replace('Tab', '');
			console.log(`Filtering by department: ${department}`);
			// Implementation would filter the displayed content
		}

		// Action functions
		function approveRequest(department) {
			console.log(`Approving ${department} request`);
			// Move from pending to consolidated list
			alert(`–ó–∞—è–≤–∫–∞ –æ—Ç ${department} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!`);
			loadPurchaseRequests();
			loadConsolidatedList();
		}

		function viewRequestDetails(department) {
			const list = JSON.parse(localStorage.getItem(`${department}ShoppingList`) || 'null');
			if (list) {
				const items = list.items.map(item => `${item.name}: ${item.quantity} ${item.unit}`).join('\n');
				alert(`–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ ${department}:\n\n${items}`);
			}
		}

		function markAsPurchased() {
			if (confirm('–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ –∑–∞–∫—É–ø–ª–µ–Ω–Ω—ã–µ?')) {
				console.log('Marking items as purchased...');
				alert('–¢–æ–≤–∞—Ä—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –∑–∞–∫—É–ø–ª–µ–Ω–Ω—ã–µ!');
				// Clear lists and update inventory
				loadPurchaseHistory();
			}
		}

		async function updatePosterInventory() {
			console.log('üì¶ Updating Poster inventory with delivered orders...');

			// Get delivered orders from both departments
			const barOrders = JSON.parse(localStorage.getItem('barOrderHistory') || '[]');
			const kitchenOrders = JSON.parse(localStorage.getItem('kitchenOrderHistory') || '[]');

			// Filter only delivered orders
			const deliveredBarOrders = barOrders.filter(order => order.status === 'delivered');
			const deliveredKitchenOrders = kitchenOrders.filter(order => order.status === 'delivered');

			// Combine all delivered orders
			const allDeliveredOrders = [...deliveredBarOrders, ...deliveredKitchenOrders];

			if (allDeliveredOrders.length === 0) {
				alert('üì¶ –ù–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Poster\n\n–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –∑–∞–∫–∞–∑—ã –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–î–æ—Å—Ç–∞–≤–∫–∞"');
				return;
			}

			// Separate synced and unsynced orders
			const unsyncedOrders = allDeliveredOrders.filter(order => !order.posterSynced);
			const syncedOrders = allDeliveredOrders.filter(order => order.posterSynced);

			if (unsyncedOrders.length === 0) {
				alert('üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Poster!\n\n–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏.');
				return;
			}

			// Show selection dialog for individual orders
			let orderList = `üì¶ –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n`;
			orderList += unsyncedOrders.map((order, index) => {
				const date = new Date(order.deliveredAt || order.timestamp).toLocaleDateString('ru-RU');
				const time = new Date(order.deliveredAt || order.timestamp).toLocaleTimeString('ru-RU', {
					hour: '2-digit',
					minute: '2-digit'
				});
				const emoji = order.department === 'bar' ? 'üç∑' : 'üç≥';
				return `${index + 1}. ${emoji} ${order.departmentName || order.department} - ${order.items.length} –ø–æ–∑–∏—Ü–∏–π (${date} ${time})`;
			}).join('\n');

			if (syncedOrders.length > 0) {
				orderList += `\n\nüìã –£–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${syncedOrders.length} –∑–∞–∫–∞–∑–æ–≤`;
			}

			const selection = prompt(`${orderList}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (1-${unsyncedOrders.length}) –∏–ª–∏ "–≤—Å–µ" –¥–ª—è –≤—Å–µ—Ö –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:`);

			if (!selection) return; // User cancelled

			let ordersToUpdate = [];

			if (selection.toLowerCase() === '–≤—Å–µ' || selection.toLowerCase() === 'all') {
				ordersToUpdate = unsyncedOrders;
			} else {
				const orderIndex = parseInt(selection) - 1;
				if (orderIndex >= 0 && orderIndex < unsyncedOrders.length) {
					ordersToUpdate = [unsyncedOrders[orderIndex]];
				} else {
					alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞');
					return;
				}
			}

			// Confirm before updating
			const totalItems = ordersToUpdate.reduce((sum, order) => sum + order.items.length, 0);

			if (!confirm(`üì¶ –û–±–Ω–æ–≤–∏—Ç—å Poster?\n\n${totalItems} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${ordersToUpdate.length} –∑–∞–∫–∞–∑–æ–≤ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∫–ª–∞–¥.\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`)) {
				return;
			}

			try {
				let totalSuccess = 0;
				let totalErrors = 0;
				const results = [];

				// Update each order individually
				for (const order of ordersToUpdate) {
					const date = new Date(order.deliveredAt || order.timestamp).toLocaleDateString('ru-RU');
					const time = new Date(order.deliveredAt || order.timestamp).toLocaleTimeString('ru-RU', {
						hour: '2-digit',
						minute: '2-digit'
					});

					console.log(`üì¶ Updating individual order: ${order.departmentName} (${date} ${time}) with ${order.items.length} items...`);

					const response = await fetch('/api/update-poster-inventory', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify({
							purchasedItems: order.items,
							department: order.department
						})
					});

					if (!response.ok) {
						throw new Error(`HTTP ${response.status}: ${response.statusText}`);
					}

					const result = await response.json();

					if (result.success) {
						console.log(`‚úÖ Order updated successfully: ${order.departmentName} (${date} ${time})`, result);
						totalSuccess += result.data?.successCount || 0;
						totalErrors += result.data?.errorCount || 0;
						results.push({
							order: `${order.departmentName} (${date} ${time})`,
							success: true,
							data: result.data
						});

						// Mark this specific order as synced to Poster
						order.posterSynced = true;
						order.posterSyncedAt = new Date().toISOString();

					} else {
						const errorMsg = result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API';
						console.error(`‚ùå Failed to update order: ${order.departmentName} (${date} ${time}):`, errorMsg);
						totalErrors += order.items.length;
						results.push({
							order: `${order.departmentName} (${date} ${time})`,
							success: false,
							error: errorMsg
						});
					}
				}

				// Update localStorage with sync status
				localStorage.setItem('barOrderHistory', JSON.stringify(barOrders));
				localStorage.setItem('kitchenOrderHistory', JSON.stringify(kitchenOrders));

				// Show detailed results
				const successOrders = results.filter(r => r.success).map(r => `‚úÖ ${r.order}`).join('\n');
				const errorOrders = results.filter(r => !r.success).map(r => `‚ùå ${r.order}: ${r.error}`).join('\n');

				let summary = `üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Poster –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n`;
				if (successOrders) summary += `–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n${successOrders}\n\n`;
				if (errorOrders) summary += `–û—à–∏–±–∫–∏:\n${errorOrders}\n\n`;
				summary += `–ò—Ç–æ–≥–æ: ‚úÖ ${totalSuccess} —Ç–æ–≤–∞—Ä–æ–≤, ‚ùå ${totalErrors} –æ—à–∏–±–æ–∫`;

				alert(summary);

				// Refresh the display
				loadPurchaseHistory();

			} catch (error) {
				console.error('‚ùå Error updating Poster inventory:', error);
				const errorMessage = error instanceof Error ? error.message : String(error);
				alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Poster: ' + errorMessage);
			}
		}

		function exportShoppingList() {
			console.log('Exporting shopping list...');
			alert('–°–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!');
		}

		function clearShoppingList() {
			if (confirm('–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫?')) {
				localStorage.removeItem('barShoppingList');
				localStorage.removeItem('kitchenShoppingList');
				loadPurchaseRequests();
				loadConsolidatedList();
			}
		}

		function generateReport() {
			console.log('Generating procurement report...');
			alert('–û—Ç—á–µ—Ç –ø–æ –∑–∞–∫—É–ø–∫–∞–º —Å–æ–∑–¥–∞–Ω!');
		}

		function showLowStockAlert() {
			alert('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ:\n‚Ä¢ –°–∞—Ö–∞—Ä (–ë–∞—Ä)\n‚Ä¢ –Ø–π—Ü–∞ (–ö—É—Ö–Ω—è)\n‚Ä¢ –ú–æ—Ä–∫–æ–≤—å (–ö—É—Ö–Ω—è)');
		}

		async function updateSingleOrder(orderTimestamp, department) {
			try {
				console.log(`üîç Starting updateSingleOrder: ${orderTimestamp}, ${department}`);

				// Get the specific order
				const storageKey = `${department}OrderHistory`;
				console.log(`üîç Looking in ${storageKey}`);

				const orders = JSON.parse(localStorage.getItem(storageKey) || '[]');
				console.log(`üîç Found ${orders.length} orders in storage`);

				const order = orders.find(o => o.timestamp === orderTimestamp && o.status === 'delivered');
				console.log(`üîç Found order:`, order);

				if (!order) {
					alert('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
					return;
				}

				const date = new Date(order.deliveredAt || order.timestamp).toLocaleDateString('ru-RU');
				const time = new Date(order.deliveredAt || order.timestamp).toLocaleTimeString('ru-RU', {
					hour: '2-digit',
					minute: '2-digit'
				});

				if (!confirm(`üì¶ –û–±–Ω–æ–≤–∏—Ç—å Poster –¥–ª—è –∑–∞–∫–∞–∑–∞:\n${order.departmentName || order.department} (${date} ${time})\n${order.items.length} –ø–æ–∑–∏—Ü–∏–π\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`)) {
					return;
				}

				console.log(`üì¶ Updating single order: ${order.departmentName} (${date} ${time}) with ${order.items.length} items...`);
				console.log(`üì¶ Order items:`, order.items);

				const requestBody = {
					purchasedItems: order.items,
					department: order.department
				};
				console.log(`üì§ Request body:`, requestBody);

				const response = await fetch('/api/update-poster-inventory', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(requestBody)
				});

				console.log(`üì• Response status: ${response.status} ${response.statusText}`);
				console.log(`üì• Response ok:`, response.ok);

				if (!response.ok) {
					const errorText = await response.text();
					console.error(`‚ùå HTTP Error Response:`, errorText);
					throw new Error(`HTTP ${response.status}: ${errorText}`);
				}

				const responseText = await response.text();
				console.log(`üì• Raw response text:`, responseText);

				let result;
				try {
					result = JSON.parse(responseText);
					console.log(`üì• Parsed result:`, result);
				} catch (parseError) {
					console.error(`‚ùå JSON Parse Error:`, parseError);
					console.error(`‚ùå Raw response that failed to parse:`, responseText);
					throw new Error(`Invalid JSON response: ${responseText.substring(0, 200)}...`);
				}

				if (result.success) {
					console.log(`‚úÖ Single order updated successfully: ${order.departmentName} (${date} ${time})`, result);

					// Mark this order as synced
					order.posterSynced = true;
					order.posterSyncedAt = new Date().toISOString();

					// Update localStorage
					localStorage.setItem(storageKey, JSON.stringify(orders));

					// Show success message
					const successMsg = `‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Poster!\n\n${order.departmentName} (${date} ${time})\n‚úÖ ${result.data?.successCount || 0} —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n‚ùå ${result.data?.errorCount || 0} –æ—à–∏–±–æ–∫`;
					alert(successMsg);

					// Refresh the display
					loadPurchaseHistory();

				} else {
					// Extract detailed error information
					let errorMsg = result.error || result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API';

					// If we have detailed error results, show them
					if (result.data?.results) {
						const errorDetails = result.data.results
							.filter(r => !r.success)
							.map(r => `‚Ä¢ ${r.item}: ${r.error}`)
							.join('\n');

						if (errorDetails) {
							errorMsg = `${errorMsg}\n\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n${errorDetails}`;
						}
					}

					console.error(`‚ùå Failed to update single order: ${order.departmentName} (${date} ${time}):`, errorMsg);
					console.error(`‚ùå Full result object:`, result);
					alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:\n\n${errorMsg}`);
				}

			} catch (error) {
				console.error('‚ùå Error updating single order:', error);
				console.error('‚ùå Error stack:', error.stack);
				const errorMessage = error instanceof Error ? error.message : String(error);
				alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ' + errorMessage);
			}
		}

		// Make function globally available
		window.updateSingleOrder = updateSingleOrder;

		// Debug function to test Poster API manually
		async function testPosterAPI() {
			try {
				console.log('üß™ Testing Poster API connection...');

				const response = await fetch('/api/update-poster-inventory', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						purchasedItems: [
							{
								id: "123", // Test with a simple ID
								name: "–¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç",
								quantity: 1,
								unit: "—à—Ç"
							}
						],
						department: "kitchen"
					})
				});

				const result = await response.json();
				console.log('üß™ Test result:', result);

			} catch (error) {
				console.error('üß™ Test failed:', error);
			}
		}

		// Make test function globally available
		window.testPosterAPI = testPosterAPI;

		function loadPurchaseHistory() {
			const container = document.getElementById('purchaseHistory');
			if (!container) return;

			// Load delivered orders from both departments
			const barOrders = JSON.parse(localStorage.getItem('barOrderHistory') || '[]');
			const kitchenOrders = JSON.parse(localStorage.getItem('kitchenOrderHistory') || '[]');

			// Filter only delivered orders
			const deliveredBarOrders = barOrders.filter(order => order.status === 'delivered');
			const deliveredKitchenOrders = kitchenOrders.filter(order => order.status === 'delivered');

			// Combine and sort by date (newest first)
			const allDeliveredOrders = [...deliveredBarOrders, ...deliveredKitchenOrders]
				.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

			if (allDeliveredOrders.length === 0) {
				container.innerHTML = `
					<div class="text-center py-8">
						<div class="text-6xl mb-4">üì¶</div>
						<p class="text-gray-500 mb-2">–ù–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>
						<p class="text-sm text-gray-400">–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –æ—Ç–º–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</p>
					</div>
				`;
				return;
			}

			// Display delivered orders
			container.innerHTML = allDeliveredOrders.map(order => {
				const departmentColor = order.department === 'bar' ? 'blue' : 'orange';
				const departmentEmoji = order.department === 'bar' ? 'üç∑' : 'üç≥';
				const deliveredDate = new Date(order.deliveredAt || order.timestamp).toLocaleDateString('ru-RU');
				const deliveredTime = new Date(order.deliveredAt || order.timestamp).toLocaleTimeString('ru-RU', {
					hour: '2-digit',
					minute: '2-digit'
				});

				// Check if order is already synced to Poster
				const isSynced = order.posterSynced;
				const syncDate = order.posterSyncedAt ? new Date(order.posterSyncedAt).toLocaleDateString('ru-RU') : '';

				return `
					<div class="bg-white border border-gray-200 rounded-lg p-4 mb-4 ${isSynced ? 'border-purple-200 bg-purple-50' : ''}">
						<div class="flex items-center justify-between mb-3">
							<div class="flex items-center space-x-2">
								<span class="text-lg">${departmentEmoji}</span>
								<span class="font-medium text-${departmentColor}-600">${order.departmentName || order.department}</span>
								<span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
									‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
								</span>
								${isSynced ? `
									<span class="px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full">
										üì¶ –í Poster
									</span>
								` : ''}
							</div>
							<div class="text-sm text-gray-500">
								${deliveredDate} ${deliveredTime}
								${isSynced ? `<br><span class="text-purple-600 text-xs">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${syncDate}</span>` : ''}
							</div>
						</div>

						<div class="space-y-2">
							${order.items.map(item => {
								const actualQty = item.actualQuantity || item.quantity;
								const showDifference = item.actualQuantity && Math.abs(item.actualQuantity - item.quantity) > 0.01;

								return `
									<div class="flex justify-between items-center py-1 border-b border-gray-100 last:border-b-0">
										<span class="text-sm">${item.name}</span>
										<div class="text-sm">
											${showDifference ?
												`<span class="text-gray-400 line-through">${item.quantity}</span> ‚Üí <span class="font-medium">${actualQty}</span>` :
												`<span class="font-medium">${actualQty}</span>`
											} ${item.unit}
										</div>
									</div>
								`;
							}).join('')}
						</div>

						<div class="mt-3 pt-3 border-t border-gray-100 flex justify-between items-center text-sm">
							<span class="text-gray-600">
								–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <span class="font-medium">${order.actualTotalQuantity || order.totalQuantity}</span>
							</span>
							<div class="flex items-center space-x-2">
								<span class="text-${departmentColor}-600">
									${order.items.length} –ø–æ–∑–∏—Ü–∏–π
								</span>
								${order.status === 'delivered' ? `
									<button
										onclick="console.log('Order details:', { timestamp: '${order.timestamp}', department: '${order.department}' }); downloadOrderXLS('${order.timestamp}', '${order.department}')"
										class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white text-xs rounded-lg transition-colors"
									>
										üì• –°–∫–∞—á–∞—Ç—å XLS
									</button>
								` : ''}
							</div>
						</div>
					</div>
				`;
			}).join('');

			console.log(`üìã Loaded ${allDeliveredOrders.length} delivered orders for procurement page`);
		}

		// XLS Supply Management Functions
		function showUploadModal() {
			document.getElementById('xlsUploadModal').classList.remove('hidden');
		}

		function hideUploadModal() {
			document.getElementById('xlsUploadModal').classList.add('hidden');
			document.getElementById('xlsFileInput').value = '';
		}

		async function uploadXlsFile() {
			const fileInput = document.getElementById('xlsFileInput');
			const department = document.getElementById('uploadDepartment').value;

			if (!fileInput.files[0]) {
				alert('–í—ã–±–µ—Ä–∏—Ç–µ XLS —Ñ–∞–π–ª!');
				return;
			}

			const formData = new FormData();
			formData.append('file', fileInput.files[0]);
			formData.append('department', department);

			try {
				console.log('üìä Uploading XLS supply file...');

				const response = await fetch('/api/upload-supply-xls', {
					method: 'POST',
					body: formData
				});

				const result = await response.json();

				if (result.success) {
					alert(`‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!\n\n${result.itemCount} —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ ${department === 'kitchen' ? '–∫—É—Ö–Ω—é' : '–±–∞—Ä'}`);
					hideUploadModal();
					loadPurchaseHistory();
				} else {
					alert(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${result.error}`);
				}
			} catch (error) {
				console.error('‚ùå Failed to upload XLS:', error);
				alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ' + error.message);
			}
		}

		async function downloadTemplate() {
			const department = document.getElementById('uploadDepartment').value;

			try {
				console.log('üì• Downloading XLS template...');

				const response = await fetch(`/api/download-supply-template?department=${department}`, {
					method: 'GET'
				});

				if (response.ok) {
					const blob = await response.blob();
					const url = window.URL.createObjectURL(blob);
					const a = document.createElement('a');
					a.href = url;
					a.download = `supply-template-${department}.xlsx`;
					document.body.appendChild(a);
					a.click();
					window.URL.revokeObjectURL(url);
					document.body.removeChild(a);

					console.log('‚úÖ Template downloaded successfully');
				} else {
					alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞');
				}
			} catch (error) {
				console.error('‚ùå Failed to download template:', error);
				alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: ' + error.message);
			}
		}

		// Download XLS for specific delivered order
		async function downloadOrderXLS(orderTimestamp, department) {
    try {
        console.log(`üì• Starting download for order:`, {
            timestamp: orderTimestamp,
            department: department
        });

        // Validate inputs
        if (!orderTimestamp || !department) {
            throw new Error('Missing required parameters');
        }

        // Check if order exists in localStorage first
        const storageKey = `${department}OrderHistory`;
        const orders = JSON.parse(localStorage.getItem(storageKey) || '[]');
        const orderExists = orders.some(order => order.timestamp === orderTimestamp);

        if (!orderExists) {
            console.warn('Order not found in localStorage:', {
                timestamp: orderTimestamp,
                department: department
            });
        }

        const response = await fetch('/api/download-order-xls', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderTimestamp: orderTimestamp,
                department: department
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }

        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;

        // Format filename
        const date = new Date(orderTimestamp).toLocaleDateString('ru-RU');
        const time = new Date(orderTimestamp).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
        const deptName = department === 'kitchen' ? '–∫—É—Ö–Ω—è' : '–±–∞—Ä';
        a.download = `–ø–æ—Å—Ç–∞–≤–∫–∞-${deptName}-${date}-${time}.xlsx`;

        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);

        console.log('‚úÖ Order XLS downloaded successfully');

    } catch (error) {
        console.error('‚ùå Download error:', error);
        alert(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${error.message}`);
    }
}

		// Make function globally available
		window.downloadOrderXLS = downloadOrderXLS;
	</script>
</Layout>
