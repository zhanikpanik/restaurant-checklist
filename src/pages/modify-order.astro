---
import Layout from '../layouts/Layout.astro';
---

<script src="https://unpkg.com/imask@7.5.0/dist/imask.min.js"></script>

<Layout title="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∫ –∑–∞–∫–∞–∑—É">
	<div class="min-h-screen bg-white">
		<!-- Header -->
		<header class="bg-orange-600 text-white px-4 py-6">
			<div class="max-w-md mx-auto">
				<div class="flex items-center justify-between mb-4">
					<button id="backBtn" class="text-orange-200 hover:text-white">‚Üê –ù–∞–∑–∞–¥</button>
					<div class="flex items-center space-x-2">
						<span class="text-2xl">‚ûï</span>
						<h1 class="text-xl font-bold">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã</h1>
					</div>
					<div class="w-16"></div> <!-- Spacer -->
				</div>
				<div id="orderInfo" class="text-sm text-orange-100">
					<!-- Order info will be populated by JavaScript -->
				</div>
			</div>
		</header>

		<!-- Main Content -->
		<main class="max-w-md mx-auto px-4 py-6">
			<!-- Loading State -->
			<div id="loadingState" class="text-center py-8">
				<div class="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-600 mx-auto mb-4"></div>
				<p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
			</div>

			<!-- Error State -->
			<div id="errorState" class="hidden text-center py-8">
				<div class="text-6xl mb-4">‚ùå</div>
				<h2 class="text-xl font-semibold text-gray-800 mb-2">–û—à–∏–±–∫–∞</h2>
				<p id="errorMessage" class="text-gray-600 mb-6"></p>
				<button id="retryBtn" class="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg">
					–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
				</button>
			</div>

			<!-- Department Selection -->
			<div id="departmentSelection" class="hidden mb-6">
				<h2 class="text-lg font-semibold text-gray-900 mb-4">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:</h2>
				<div class="space-y-3">
					<button id="selectBar" class="w-full bg-purple-100 hover:bg-purple-200 text-purple-800 font-medium py-4 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center space-x-2">
						<span class="text-2xl">üç∑</span>
						<span>–ë–∞—Ä</span>
					</button>
					<button id="selectKitchen" class="w-full bg-orange-100 hover:bg-orange-200 text-orange-800 font-medium py-4 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center space-x-2">
						<span class="text-2xl">üç≥</span>
						<span>–ö—É—Ö–Ω—è</span>
					</button>
					<button id="selectCustom" class="w-full bg-green-100 hover:bg-green-200 text-green-800 font-medium py-4 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center space-x-2">
						<span class="text-2xl">üßπ</span>
						<span>–ì–æ—Ä–Ω–∏—á–Ω–∞—è</span>
					</button>
				</div>
			</div>

			<!-- Product Selection -->
			<div id="productSelection" class="hidden">
				<!-- Search Bar -->
				<div class="mb-4">
					<div class="relative">
						<input
							type="text"
							id="productSearchInput"
							placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
							class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
						/>
						<button id="clearSearchBtn" class="hidden absolute right-3 top-3 text-gray-400 hover:text-gray-600">
							‚úï
						</button>
					</div>
					<div id="searchResultsCount" class="hidden mt-2 text-sm">
						<span id="searchResultsText"></span>
					</div>
				</div>

				<!-- Selected Department Info -->
				<div id="selectedDepartmentInfo" class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
					<div class="flex items-center space-x-2">
						<span id="departmentEmoji" class="text-2xl"></span>
						<span id="departmentName" class="font-semibold text-gray-900"></span>
					</div>
				</div>

				<!-- Products List -->
				<div id="productsList" class="space-y-2 mb-6">
					<!-- Products will be populated by JavaScript -->
				</div>

				<!-- Modification Note -->
				<div class="mb-6">
					<label for="modificationNote" class="block text-sm font-medium text-gray-700 mb-2">
						–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
					</label>
					<textarea
						id="modificationNote"
						rows="3"
						class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
						placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –∫–ª–∏–µ–Ω—Ç–∞..."
					></textarea>
				</div>

				<!-- Action Buttons -->
				<div class="sticky bottom-0 bg-white pt-4 border-t border-gray-200">
					<div class="space-y-3">
						<button 
							id="saveModificationBtn" 
							class="w-full bg-orange-600 hover:bg-orange-700 text-white font-medium py-4 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center space-x-2"
							disabled
						>
							<span>üíæ</span>
							<span id="saveModificationBtnText">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</span>
						</button>
						<button 
							id="cancelBtn" 
							class="w-full bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium py-3 px-6 rounded-lg transition-colors duration-200"
						>
							–û—Ç–º–µ–Ω–∏—Ç—å
						</button>
					</div>
				</div>
			</div>
		</main>
	</div>

	<script is:inline>
		// Global variables
		let orderTimestamp = null;
		let originalOrder = null;
		let selectedDepartment = null;
		let productData = [];
		let modificationItems = [];

		// Initialize the page
		document.addEventListener('DOMContentLoaded', function() {
			initializeModificationPage();
			setupEventListeners();
		});

		async function initializeModificationPage() {
			try {
				// Get order timestamp from URL params or localStorage
				const urlParams = new URLSearchParams(window.location.search);
				orderTimestamp = urlParams.get('timestamp') || localStorage.getItem('modifyOrderTimestamp');
				
				if (!orderTimestamp) {
					throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞');
				}

				// Load original order information
				await loadOriginalOrder();
				
				// Show department selection
				showDepartmentSelection();

			} catch (error) {
				console.error('‚ùå Failed to initialize modification page:', error);
				showError(error.message);
			}
		}

		async function loadOriginalOrder() {
			try {
				console.log(`üìã Loading original order: ${orderTimestamp}`);
				
				const response = await fetch('/api/get-all-orders');
				const result = await response.json();
				
				if (!result.success) {
					throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã');
				}

				// Find the original order
				originalOrder = result.data.find(order => order.timestamp === orderTimestamp);
				
				if (!originalOrder) {
					throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
				}

				// Update order info in header
				updateOrderInfo();
				
				console.log('‚úÖ Original order loaded:', originalOrder);

			} catch (error) {
				console.error('‚ùå Failed to load original order:', error);
				throw error;
			}
		}

		function updateOrderInfo() {
			const orderInfo = document.getElementById('orderInfo');
			if (orderInfo && originalOrder) {
				const orderDate = new Date(originalOrder.timestamp).toLocaleString('ru-RU');
				orderInfo.innerHTML = `
					<div>–ó–∞–∫–∞–∑ –æ—Ç ${orderDate}</div>
					<div class="text-xs">${originalOrder.departmentName} ‚Ä¢ ${originalOrder.totalItems} —Ç–æ–≤–∞—Ä–æ–≤</div>
				`;
			}
		}

		function showDepartmentSelection() {
			document.getElementById('loadingState').style.display = 'none';
			document.getElementById('departmentSelection').classList.remove('hidden');
		}

		async function selectDepartment(department) {
			try {
				selectedDepartment = department;
				console.log(`üì¶ Selected department: ${department}`);

				// Show loading
				document.getElementById('departmentSelection').classList.add('hidden');
				document.getElementById('loadingState').style.display = 'block';

				// Load products for selected department
				await loadDepartmentProducts(department);

				// Show product selection
				showProductSelection();

			} catch (error) {
				console.error('‚ùå Failed to select department:', error);
				showError(error.message);
			}
		}

		async function loadDepartmentProducts(department) {
			try {
				let apiUrl;
				let departmentInfo;

				switch (department) {
					case 'bar':
						apiUrl = '/api/bar-inventory';
						departmentInfo = { name: '–ë–∞—Ä', emoji: 'üç∑' };
						break;
					case 'kitchen':
						apiUrl = '/api/kitchen-inventory';
						departmentInfo = { name: '–ö—É—Ö–Ω—è', emoji: 'üç≥' };
						break;
					case 'custom':
						// For custom items, we'll load from localStorage
						productData = JSON.parse(localStorage.getItem('customItems') || '[]');
						departmentInfo = { name: '–ì–æ—Ä–Ω–∏—á–Ω–∞—è', emoji: 'üßπ' };
						updateDepartmentInfo(departmentInfo);
						return;
					default:
						throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–¥–µ–ª');
				}

				console.log(`üì° Loading products from: ${apiUrl}`);
				const response = await fetch(apiUrl);
				const result = await response.json();

				if (!result.success) {
					throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è ${departmentInfo.name}`);
				}

				productData = result.data.map(product => ({
					id: product.id,
					name: product.name,
					quantity: product.quantity,
					unit: product.unit,
					shoppingQuantity: 0
				}));

				updateDepartmentInfo(departmentInfo);
				console.log(`‚úÖ Loaded ${productData.length} products for ${department}`);

			} catch (error) {
				console.error('‚ùå Failed to load department products:', error);
				throw error;
			}
		}

		function updateDepartmentInfo(departmentInfo) {
			document.getElementById('departmentEmoji').textContent = departmentInfo.emoji;
			document.getElementById('departmentName').textContent = departmentInfo.name;
		}

		function showProductSelection() {
			document.getElementById('loadingState').style.display = 'none';
			document.getElementById('productSelection').classList.remove('hidden');
			
			// Render products
			renderProducts();
			
			// Focus on search input
			setTimeout(() => {
				document.getElementById('productSearchInput').focus();
			}, 100);
		}

		function renderProducts() {
			const container = document.getElementById('productsList');
			
			if (productData.length === 0) {
				container.innerHTML = '<div class="text-center py-8 text-gray-500">–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
				return;
			}

			container.innerHTML = productData.map(product => {
				const isLowStock = product.quantity <= (product.minQuantity || 0);
				const quantityColor = isLowStock ? "text-red-600" : "text-gray-900";
				const isCustom = selectedDepartment === 'custom';
				
				return `
					<div class="product-item bg-white border border-gray-200 rounded-lg p-4" data-product-id="${product.id}">
						<div class="flex items-center justify-between">
							<div class="flex-1">
								<h3 class="text-base font-medium text-gray-900">${product.name}</h3>
								${!isCustom ? `<div class="text-sm text-gray-500 mt-1">–ù–∞ —Å–∫–ª–∞–¥–µ: <span class="${quantityColor} font-medium">${product.quantity}</span> ${product.unit}</div>` : '<div class="text-sm text-blue-600 mt-1 font-medium">üìù –î–æ–±–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é</div>'}
							</div>
							<div class="flex items-center space-x-3">
								<div class="flex items-center bg-gray-100 rounded-lg border border-gray-300">
									<button
										class="px-2 h-10 bg-gray-100 hover:bg-gray-200 text-gray-700 flex items-center justify-center text-xl font-normal transition-colors duration-200 rounded-l-lg"
										onclick="updateProductQuantity(${product.id}, -1)"
										type="button"
									>
										‚àí
									</button>
									<input
										type="text"
										inputmode="numeric"
										pattern="[0-9]*"
										class="quantity-input w-16 px-3 py-2 border-0 focus:outline-none focus:ring-0 text-center bg-gray-100 text-sm font-medium"
										placeholder="0 ${product.unit}"
										data-product-id="${product.id}"
										data-unit="${product.unit}"
									/>
									<button
										class="px-2 h-10 bg-gray-100 hover:bg-gray-200 text-gray-700 flex items-center justify-center text-xl font-normal transition-colors duration-200 rounded-r-lg"
										onclick="updateProductQuantity(${product.id}, 1)"
										type="button"
									>
										+
									</button>
								</div>
							</div>
						</div>
					</div>
				`;
			}).join('');

			// Setup input masks
			setupQuantityInputs();
		}

		function setupQuantityInputs() {
			document.querySelectorAll('.quantity-input').forEach(input => {
				const unit = input.dataset.unit;
				const productId = input.dataset.productId;
				
				// Create IMask instance
				const mask = IMask(input, {
					mask: Number,
					scale: 2,
					signed: false,
					thousandsSeparator: '',
					padFractionalZeros: false,
					normalizeZeros: true,
					radix: '.',
					min: 0,
					max: 999,
					lazy: false,
					
					format: function (appended, masked) {
						return masked.value + (masked.value ? ' ' + unit : '');
					},
					
					parse: function (str) {
						return str.replace(' ' + unit, '');
					}
				});
				
				mask.on('accept', function() {
					const value = parseFloat(mask.unmaskedValue) || 0;
					setProductQuantity(parseInt(productId), value);
				});
				
				input._mask = mask;
			});
		}

		function updateProductQuantity(productId, change) {
			const product = productData.find(p => p.id == productId);
			if (product) {
				const increment = change * 0.5;
				const newQuantity = Math.max(0, (product.shoppingQuantity || 0) + increment);
				setProductQuantity(productId, newQuantity);
			}
		}

		function setProductQuantity(productId, quantity) {
			const product = productData.find(p => p.id == productId);
			if (product) {
				product.shoppingQuantity = Math.max(0, parseFloat(quantity) || 0);
				
				// Update input field
				const input = document.querySelector(`input[data-product-id="${productId}"]`);
				if (input && input._mask) {
					input._mask.unmaskedValue = product.shoppingQuantity.toString();
				}
				
				// Update modification items
				updateModificationItems();
				
				console.log(`üîÑ Updated ${product.name}: ${product.shoppingQuantity} ${product.unit}`);
			}
		}

		function updateModificationItems() {
			modificationItems = productData.filter(product => product.shoppingQuantity > 0);
			
			// Update save button
			const saveBtn = document.getElementById('saveModificationBtn');
			const saveBtnText = document.getElementById('saveModificationBtnText');
			
			if (modificationItems.length > 0) {
				saveBtn.disabled = false;
				saveBtn.classList.remove('bg-gray-400', 'hover:bg-gray-500');
				saveBtn.classList.add('bg-orange-600', 'hover:bg-orange-700');
				saveBtnText.textContent = `–î–æ–±–∞–≤–∏—Ç—å ${modificationItems.length} —Ç–æ–≤–∞—Ä–æ–≤`;
			} else {
				saveBtn.disabled = true;
				saveBtn.classList.remove('bg-orange-600', 'hover:bg-orange-700');
				saveBtn.classList.add('bg-gray-400', 'hover:bg-gray-500');
				saveBtnText.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
			}
		}

		async function saveModification() {
			try {
				if (modificationItems.length === 0) {
					alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
					return;
				}

				console.log(`üíæ Preparing modification for order: ${orderTimestamp}`);
				
				const modificationNote = document.getElementById('modificationNote').value.trim() || '–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã';
				
				// Save the modification to the server
				const response = await fetch('/api/modify-order', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						orderTimestamp: orderTimestamp,
						newItems: modificationItems,
						modificationNote: modificationNote
					})
				});

				const result = await response.json();
				
				if (!result.success) {
					throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
				}

				console.log('‚úÖ Order modification prepared successfully');
				
				// Store modification data for confirmation page
				const modificationData = {
					originalOrder: originalOrder,
					modificationOrder: result.modificationOrder,
					timestamp: new Date().toISOString()
				};
				
				localStorage.setItem('pendingModification', JSON.stringify(modificationData));
				
				// Clear the temporary data
				localStorage.removeItem('modifyOrderTimestamp');
				
				// Navigate to modification confirmation page
				window.location.href = '/modification-confirmation';

			} catch (error) {
				console.error('‚ùå Failed to save modification:', error);
				alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${error.message}`);
			}
		}

		function showError(message) {
			document.getElementById('loadingState').style.display = 'none';
			document.getElementById('departmentSelection').classList.add('hidden');
			document.getElementById('productSelection').classList.add('hidden');
			document.getElementById('errorMessage').textContent = message;
			document.getElementById('errorState').classList.remove('hidden');
		}

		// Search functionality
		function filterProducts(searchTerm) {
			const productItems = document.querySelectorAll('.product-item');
			const clearSearchBtn = document.getElementById('clearSearchBtn');
			const searchResultsCount = document.getElementById('searchResultsCount');
			const searchResultsText = document.getElementById('searchResultsText');

			if (!searchTerm) {
				productItems.forEach(item => item.style.display = 'block');
				if (clearSearchBtn) clearSearchBtn.classList.add('hidden');
				if (searchResultsCount) searchResultsCount.classList.add('hidden');
				return;
			}

			if (clearSearchBtn) clearSearchBtn.classList.remove('hidden');

			let visibleCount = 0;
			const searchTermLower = searchTerm.toLowerCase();

			productItems.forEach(item => {
				const productName = item.querySelector('h3').textContent.toLowerCase();
				const matches = productName.includes(searchTermLower);

				if (matches) {
					item.style.display = 'block';
					visibleCount++;
				} else {
					item.style.display = 'none';
				}
			});

			if (searchResultsCount && searchResultsText) {
				if (visibleCount === 0) {
					searchResultsText.textContent = `–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è "${searchTerm}"`;
					searchResultsText.className = 'text-red-600';
				} else {
					searchResultsText.textContent = `–ù–∞–π–¥–µ–Ω–æ ${visibleCount} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è "${searchTerm}"`;
					searchResultsText.className = 'text-green-600';
				}
				searchResultsCount.classList.remove('hidden');
			}
		}

		function clearSearch() {
			const searchInput = document.getElementById('productSearchInput');
			if (searchInput) {
				searchInput.value = '';
				searchInput.focus();
			}
			filterProducts('');
		}

		function setupEventListeners() {
			// Back button
			document.getElementById('backBtn').addEventListener('click', () => {
				window.history.back();
			});

			// Department selection buttons
			document.getElementById('selectBar').addEventListener('click', () => selectDepartment('bar'));
			document.getElementById('selectKitchen').addEventListener('click', () => selectDepartment('kitchen'));
			document.getElementById('selectCustom').addEventListener('click', () => selectDepartment('custom'));

			// Search functionality
			const searchInput = document.getElementById('productSearchInput');
			if (searchInput) {
				searchInput.addEventListener('input', function() {
					filterProducts(this.value.trim());
				});
			}

			const clearSearchBtn = document.getElementById('clearSearchBtn');
			if (clearSearchBtn) {
				clearSearchBtn.addEventListener('click', clearSearch);
			}

			// Save modification button
			document.getElementById('saveModificationBtn').addEventListener('click', saveModification);

			// Cancel button
			document.getElementById('cancelBtn').addEventListener('click', () => {
				if (confirm('–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤? –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
					localStorage.removeItem('modifyOrderTimestamp');
					window.location.href = '/delivery';
				}
			});

			// Retry button
			document.getElementById('retryBtn').addEventListener('click', () => {
				location.reload();
			});
		}

		// Make functions global for onclick handlers
		window.updateProductQuantity = updateProductQuantity;
		window.setProductQuantity = setProductQuantity;
	</script>
</Layout>
