---
import Layout from '../layouts/Layout.astro';
---

<Layout title="–ú–µ–Ω–µ–¥–∂–µ—Ä - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è">
	<div class="min-h-screen bg-gray-50 flex flex-col">
		<!-- App Header -->
		<header class="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40">
			<div class="px-4 py-3">
				<div class="flex items-center justify-between">
					<!-- Left: Spacer -->
					<div class="w-10"></div>
					
					<!-- Center: Title -->
					<div class="flex items-center space-x-2">
						<span class="text-2xl">üëî</span>
						<h1 class="text-lg font-bold text-gray-900">–ú–µ–Ω–µ–¥–∂–µ—Ä</h1>
					</div>
					
					<!-- Right: Role Switch Dropdown -->
					<div class="relative">
						<button 
							id="roleDropdownBtn"
							onclick="toggleRoleDropdown()"
							class="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors flex items-center"
							title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–æ–ª—å"
						>
							<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m0-4l-4-4"/>
							</svg>
							<svg class="w-3 h-3 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
							</svg>
						</button>
						
						<!-- Dropdown Menu -->
						<div 
							id="roleDropdown" 
							class="absolute right-0 top-full mt-1 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-50 hidden"
						>
							<div class="py-1">
								<button 
									onclick="switchToRole('bar')" 
									class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 flex items-center"
								>
									<span class="text-lg mr-2">üç∑</span>
									–ë–∞—Ä
								</button>
								<button 
									onclick="switchToRole('kitchen')" 
									class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 flex items-center"
								>
									<span class="text-lg mr-2">üç≥</span>
									–ö—É—Ö–Ω—è
								</button>
								<button 
									onclick="switchToRole('manager')" 
									class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 flex items-center"
								>
									<span class="text-lg mr-2">üëî</span>
									–ú–µ–Ω–µ–¥–∂–µ—Ä
									<span class="ml-auto text-xs text-green-600">‚óè</span>
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</header>

		<!-- Main Content Area -->
		<main class="flex-1 p-4">
			<div class="max-w-6xl mx-auto">
				<!-- Debug Info -->
				<div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
					<h3 class="text-sm font-semibold text-yellow-800 mb-2">üîç Debug Info (remove in production)</h3>
					<div class="text-xs text-yellow-700">
						<div>Bar Orders: <span id="debugBarOrders">Loading...</span></div>
						<div>Kitchen Orders: <span id="debugKitchenOrders">Loading...</span></div>
						<div>Total Orders: <span id="debugTotalOrders">Loading...</span></div>
					</div>
				</div>

				<!-- Admin Tools Section -->
				<div class="bg-white rounded-lg border border-gray-200 mb-8">
					<div class="px-6 py-4 border-b border-gray-200">
						<h3 class="text-lg font-semibold text-gray-900">üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h3>
					</div>
					<div class="p-6">
						<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
							<button 
								onclick="runDatabaseMigration()" 
								class="p-4 bg-blue-50 hover:bg-blue-100 border border-blue-200 rounded-lg text-left transition-colors"
							>
								<div class="text-lg mb-2">üóÑÔ∏è</div>
								<div class="font-medium text-gray-900">–ú–∏–≥—Ä–∞—Ü–∏—è –ë–î</div>
								<div class="text-sm text-gray-600">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</div>
							</button>
							
							<button 
								onclick="categorizeProducts()" 
								class="p-4 bg-green-50 hover:bg-green-100 border border-green-200 rounded-lg text-left transition-colors"
							>
								<div class="text-lg mb-2">ü§ñ</div>
								<div class="font-medium text-gray-900">–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è AI</div>
								<div class="text-sm text-gray-600">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤</div>
							</button>
							
							<button 
								onclick="checkCategories()" 
								class="p-4 bg-purple-50 hover:bg-purple-100 border border-purple-200 rounded-lg text-left transition-colors"
							>
								<div class="text-lg mb-2">üìä</div>
								<div class="font-medium text-gray-900">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</div>
								<div class="text-sm text-gray-600">–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î</div>
							</button>
							
							<button 
								onclick="loadAllOrders()" 
								class="p-4 bg-orange-50 hover:bg-orange-100 border border-orange-200 rounded-lg text-left transition-colors"
							>
								<div class="text-lg mb-2">üìã</div>
								<div class="font-medium text-gray-900">–í—Å–µ –∑–∞–∫–∞–∑—ã</div>
								<div class="text-sm text-gray-600">–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã —Å —Å–µ—Ä–≤–µ—Ä–∞</div>
							</button>
							
							<button 
								onclick="manageSuppliers()" 
								class="p-4 bg-indigo-50 hover:bg-indigo-100 border border-indigo-200 rounded-lg text-left transition-colors"
							>
								<div class="text-lg mb-2">üè¢</div>
								<div class="font-medium text-gray-900">–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏</div>
								<div class="text-sm text-gray-600">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏</div>
							</button>
							
							<button 
								onclick="addSupplierPhone()" 
								class="p-4 bg-red-50 hover:bg-red-100 border border-red-200 rounded-lg text-left transition-colors"
							>
								<div class="text-lg mb-2">üìû</div>
								<div class="font-medium text-gray-900">–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ã</div>
								<div class="text-sm text-gray-600">–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω</div>
							</button>
						</div>
					</div>
				</div>

				<!-- Dashboard Cards -->
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
					<!-- Bar Overview -->
					<div class="bg-white rounded-lg border border-gray-200 p-6">
						<div class="flex items-center justify-between mb-4">
							<h3 class="text-lg font-semibold text-gray-900">üç∑ –ë–∞—Ä</h3>
							<a href="/bar" class="text-sm text-blue-600 hover:text-blue-800">–ü–µ—Ä–µ–π—Ç–∏ ‚Üí</a>
						</div>
						<div class="space-y-2">
							<div class="flex justify-between">
								<span class="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</span>
								<span class="text-sm font-medium" id="barActiveOrders">-</span>
							</div>
							<div class="flex justify-between">
								<span class="text-sm text-gray-600">–¢–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏:</span>
								<span class="text-sm font-medium" id="barProductCount">-</span>
							</div>
						</div>
					</div>

					<!-- Kitchen Overview -->
					<div class="bg-white rounded-lg border border-gray-200 p-6">
						<div class="flex items-center justify-between mb-4">
							<h3 class="text-lg font-semibold text-gray-900">üç≥ –ö—É—Ö–Ω—è</h3>
							<a href="/kitchen" class="text-sm text-blue-600 hover:text-blue-800">–ü–µ—Ä–µ–π—Ç–∏ ‚Üí</a>
						</div>
						<div class="space-y-2">
							<div class="flex justify-between">
								<span class="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</span>
								<span class="text-sm font-medium" id="kitchenActiveOrders">-</span>
							</div>
							<div class="flex justify-between">
								<span class="text-sm text-gray-600">–¢–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏:</span>
								<span class="text-sm font-medium" id="kitchenProductCount">-</span>
							</div>
						</div>
					</div>

					<!-- Overall Stats -->
					<div class="bg-white rounded-lg border border-gray-200 p-6">
						<div class="flex items-center justify-between mb-4">
							<h3 class="text-lg font-semibold text-gray-900">üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
						</div>
						<div class="space-y-2">
							<div class="flex justify-between">
								<span class="text-sm text-gray-600">–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</span>
								<span class="text-sm font-medium" id="totalOrders">-</span>
							</div>
							<div class="flex justify-between">
								<span class="text-sm text-gray-600">–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</span>
								<span class="text-sm font-medium" id="totalProducts">-</span>
							</div>
						</div>
					</div>
				</div>

				<!-- Orders Management -->
				<div class="bg-white rounded-lg border border-gray-200 mb-8">
					<div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
						<h3 class="text-lg font-semibold text-gray-900">üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</h3>
						<div class="flex space-x-2">
							<button 
								onclick="loadServerOrders()" 
								class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg"
							>
								üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
							</button>
							<button 
								onclick="sendAllOrdersToSuppliers()" 
								class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-lg"
							>
								üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
							</button>
						</div>
					</div>
					<div class="p-6">
						<div id="ordersManagement" class="space-y-4">
							<div class="text-center text-gray-500 py-8">
								<span class="text-4xl mb-4 block">üìã</span>
								<p class="text-lg mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
							</div>
						</div>
					</div>
				</div>

				<!-- Suppliers Management -->
				<div class="bg-white rounded-lg border border-gray-200 mb-8">
					<div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
						<h3 class="text-lg font-semibold text-gray-900">üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏</h3>
						<button 
							onclick="addNewSupplier()" 
							class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-medium rounded-lg"
						>
							‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
						</button>
					</div>
					<div class="p-6">
						<div id="suppliersManagement" class="space-y-4">
							<div class="text-center text-gray-500 py-8">
								<span class="text-4xl mb-4 block">üè¢</span>
								<p class="text-lg mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...</p>
							</div>
						</div>
					</div>
				</div>

				<!-- Add Missing Products Modal -->
				<div id="addProductModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
					<div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
						<div class="flex justify-between items-center mb-4">
							<h3 class="text-lg font-semibold">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑</h3>
							<button onclick="closeAddProductModal()" class="text-gray-400 hover:text-gray-600">‚úï</button>
						</div>
						<div class="space-y-4">
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label>
								<input 
									type="text" 
									id="newProductName" 
									class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
								>
							</div>
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-1">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
								<input 
									type="number" 
									id="newProductQuantity" 
									class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									placeholder="0"
									min="0"
									step="0.1"
								>
							</div>
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-1">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</label>
								<select 
									id="newProductUnit" 
									class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
								>
									<option value="—à—Ç">—à—Ç</option>
									<option value="–∫–≥">–∫–≥</option>
									<option value="–ª">–ª</option>
									<option value="—É–ø–∞–∫">—É–ø–∞–∫</option>
									<option value="–º">–º</option>
								</select>
							</div>
							<div class="flex space-x-3 pt-4">
								<button 
									onclick="addProductToOrder()" 
									class="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg"
								>
									‚ûï –î–æ–±–∞–≤–∏—Ç—å
								</button>
								<button 
									onclick="closeAddProductModal()" 
									class="flex-1 px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-lg"
								>
									–û—Ç–º–µ–Ω–∞
								</button>
							</div>
						</div>
					</div>
				</div>

				<!-- Add Supplier Modal -->
				<div id="addSupplierModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
					<div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
						<div class="flex justify-between items-center mb-4">
							<h3 class="text-lg font-semibold">üè¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</h3>
							<button onclick="closeAddSupplierModal()" class="text-gray-400 hover:text-gray-600">‚úï</button>
						</div>
						<div class="space-y-4">
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</label>
								<input 
									type="text" 
									id="newSupplierName" 
									class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
								>
							</div>
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-1">–¢–µ–ª–µ—Ñ–æ–Ω</label>
								<input 
									type="tel" 
									id="newSupplierPhone" 
									class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									placeholder="+7 (xxx) xxx-xx-xx"
								>
							</div>
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-1">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</label>
								<textarea 
									id="newSupplierContact" 
									class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									placeholder="Email, –∞–¥—Ä–µ—Å, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
									rows="3"
								></textarea>
							</div>
							<div class="flex space-x-3 pt-4">
								<button 
									onclick="createSupplier()" 
									class="flex-1 px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-lg"
								>
									‚ûï –°–æ–∑–¥–∞—Ç—å
								</button>
								<button 
									onclick="closeAddSupplierModal()" 
									class="flex-1 px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-lg"
								>
									–û—Ç–º–µ–Ω–∞
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</main>

		<script is:inline>
			// Toggle role dropdown
			function toggleRoleDropdown() {
				const dropdown = document.getElementById('roleDropdown');
				dropdown.classList.toggle('hidden');
			}
			
			// Switch to specific role
			function switchToRole(role) {
				const dropdown = document.getElementById('roleDropdown');
				dropdown.classList.add('hidden');
				
				if (role === 'manager') {
					// Already on manager page
					return;
				} else if (role === 'bar') {
					window.location.href = '/bar';
				} else if (role === 'kitchen') {
					window.location.href = '/kitchen';
				}
			}
			
			// Close dropdown when clicking outside
			document.addEventListener('click', function(event) {
				const dropdown = document.getElementById('roleDropdown');
				const button = document.getElementById('roleDropdownBtn');
				
				if (dropdown && button && !button.contains(event.target) && !dropdown.contains(event.target)) {
					dropdown.classList.add('hidden');
				}
			});

			// Global variables
			let currentEditingOrder = null;
			let currentEditingDepartment = null;

			// Load dashboard data
			async function loadDashboardData() {
				try {
					// Load bar orders
					const barOrders = JSON.parse(localStorage.getItem('barDeliveryOrders') || '[]');
					console.log('üìä Manager: Loaded bar orders:', barOrders.length, barOrders);
					document.getElementById('barActiveOrders').textContent = barOrders.filter(o => o.status === 'pending').length;
					document.getElementById('debugBarOrders').textContent = barOrders.length + ' orders';

					// Load kitchen orders  
					const kitchenOrders = JSON.parse(localStorage.getItem('kitchenDeliveryOrders') || '[]');
					console.log('üìä Manager: Loaded kitchen orders:', kitchenOrders.length, kitchenOrders);
					document.getElementById('kitchenActiveOrders').textContent = kitchenOrders.filter(o => o.status === 'pending').length;
					document.getElementById('debugKitchenOrders').textContent = kitchenOrders.length + ' orders';

					// Load product counts
					try {
						const barResponse = await fetch('/api/bar-inventory');
						const barData = await barResponse.json();
						document.getElementById('barProductCount').textContent = barData.data?.length || 0;
					} catch (e) {
						document.getElementById('barProductCount').textContent = '10'; // Mock data count
					}

					try {
						const kitchenResponse = await fetch('/api/kitchen-inventory');
						const kitchenData = await kitchenResponse.json();
						document.getElementById('kitchenProductCount').textContent = kitchenData.data?.length || 0;
					} catch (e) {
						document.getElementById('kitchenProductCount').textContent = '15'; // Mock data count
					}

					// Calculate totals
					const totalOrders = barOrders.length + kitchenOrders.length;
					document.getElementById('totalOrders').textContent = totalOrders;
					document.getElementById('debugTotalOrders').textContent = totalOrders + ' total';

					const totalProducts = parseInt(document.getElementById('barProductCount').textContent) + 
										 parseInt(document.getElementById('kitchenProductCount').textContent);
					document.getElementById('totalProducts').textContent = totalProducts;

					// Load orders management
					loadOrdersManagement(barOrders, kitchenOrders);

				} catch (error) {
					console.error('Failed to load dashboard data:', error);
				}
			}

			// Load orders management
			function loadOrdersManagement(barOrders, kitchenOrders) {
				console.log('üìã Manager: Loading orders management with:', {
					barOrders: barOrders.length,
					kitchenOrders: kitchenOrders.length
				});

				const allOrders = [
					...barOrders.map((o, i) => ({...o, department: 'bar', departmentName: '–ë–∞—Ä', departmentEmoji: 'üç∑', originalIndex: i})),
					...kitchenOrders.map((o, i) => ({...o, department: 'kitchen', departmentName: '–ö—É—Ö–Ω—è', departmentEmoji: 'üç≥', originalIndex: i}))
				];

				console.log('üìã Manager: All orders combined:', allOrders.length, allOrders);

				// Sort by timestamp (newest first)
				allOrders.sort((a, b) => b.timestamp - a.timestamp);

				const ordersContainer = document.getElementById('ordersManagement');
				
				if (allOrders.length === 0) {
					ordersContainer.innerHTML = `
						<div class="text-center text-gray-500 py-8">
							<span class="text-4xl mb-4 block">üìã</span>
							<p class="text-lg mb-2">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
							<p class="text-sm">–ó–∞–∫–∞–∑—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
						</div>
					`;
					return;
				}

				let ordersHtml = '';
				allOrders.forEach((order, globalIndex) => {
					const date = new Date(order.timestamp).toLocaleString('ru-RU');
					const statusColor = order.status === 'pending' ? 'yellow' : order.status === 'sent' ? 'blue' : 'green';
					const statusText = order.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : order.status === 'sent' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
					
					const itemsList = order.items.map(item => `
						<div class="flex justify-between items-center py-1">
							<span class="text-sm">${item.name}</span>
							<span class="text-sm text-gray-600">${item.quantity} ${item.unit}</span>
						</div>
					`).join('');
					
					ordersHtml += `
						<div class="border border-gray-200 rounded-lg p-4">
							<div class="flex justify-between items-start mb-3">
								<div class="flex items-center space-x-2">
									<span class="text-lg">${order.departmentEmoji}</span>
									<div>
										<span class="font-medium">${order.departmentName}</span>
										<div class="text-xs text-gray-500">${date}</div>
									</div>
								</div>
								<div class="flex items-center space-x-2">
									<span class="inline-block px-2 py-1 text-xs rounded-full bg-${statusColor}-100 text-${statusColor}-700">
										${statusText}
									</span>
								</div>
							</div>
							
							<div class="mb-3 max-h-32 overflow-y-auto">
								${itemsList}
							</div>
							
							<div class="flex space-x-2">
								<button 
									onclick="openAddProductModal('${order.department}', ${order.originalIndex})" 
									class="px-3 py-1 text-xs bg-blue-100 hover:bg-blue-200 text-blue-700 rounded"
								>
									‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
								</button>
								${order.status === 'pending' ? `
									<button 
										onclick="sendOrderToSupplier('${order.department}', ${order.originalIndex})" 
										class="px-3 py-1 text-xs bg-green-100 hover:bg-green-200 text-green-700 rounded"
									>
										üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
									</button>
								` : ''}
								<button 
									onclick="viewOrderDetails('${order.department}', ${order.originalIndex})" 
									class="px-3 py-1 text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 rounded"
								>
									üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ
								</button>
							</div>
						</div>
					`;
				});

				ordersContainer.innerHTML = ordersHtml;
			}

			// Open add product modal
			function openAddProductModal(department, orderIndex) {
				currentEditingDepartment = department;
				currentEditingOrder = orderIndex;
				document.getElementById('addProductModal').classList.remove('hidden');
				document.getElementById('newProductName').focus();
			}

			// Close add product modal
			function closeAddProductModal() {
				document.getElementById('addProductModal').classList.add('hidden');
				document.getElementById('newProductName').value = '';
				document.getElementById('newProductQuantity').value = '';
				document.getElementById('newProductUnit').value = '—à—Ç';
				currentEditingDepartment = null;
				currentEditingOrder = null;
			}

			// Add product to order
			function addProductToOrder() {
				const name = document.getElementById('newProductName').value.trim();
				const quantity = parseFloat(document.getElementById('newProductQuantity').value);
				const unit = document.getElementById('newProductUnit').value;

				if (!name || !quantity || quantity <= 0) {
					alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
					return;
				}

				// Get the orders from localStorage
				const storageKey = currentEditingDepartment === 'bar' ? 'barDeliveryOrders' : 'kitchenDeliveryOrders';
				const orders = JSON.parse(localStorage.getItem(storageKey) || '[]');

				if (orders[currentEditingOrder]) {
					// Add new item to the order
					const newItem = {
						id: -Date.now(), // Negative ID for custom items
						name: name,
						quantity: quantity,
						unit: unit
					};

					orders[currentEditingOrder].items.push(newItem);

					// Save back to localStorage
					localStorage.setItem(storageKey, JSON.stringify(orders));

					// Close modal and refresh
					closeAddProductModal();
					loadDashboardData();

					alert('–¢–æ–≤–∞—Ä "' + name + '" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!');
				}
			}

			// Send single order to supplier
			function sendOrderToSupplier(department, orderIndex) {
				const storageKey = department === 'bar' ? 'barDeliveryOrders' : 'kitchenDeliveryOrders';
				const orders = JSON.parse(localStorage.getItem(storageKey) || '[]');

				if (orders[orderIndex]) {
					orders[orderIndex].status = 'sent';
					orders[orderIndex].sentAt = Date.now();
					localStorage.setItem(storageKey, JSON.stringify(orders));

					loadDashboardData();
					alert('–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫—É!');
				}
			}

			// Send all pending orders to suppliers
			function sendAllOrdersToSuppliers() {
				if (!confirm('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º?')) {
					return;
				}

				let sentCount = 0;

				// Process bar orders
				const barOrders = JSON.parse(localStorage.getItem('barDeliveryOrders') || '[]');
				barOrders.forEach(order => {
					if (order.status === 'pending') {
						order.status = 'sent';
						order.sentAt = Date.now();
						sentCount++;
					}
				});
				localStorage.setItem('barDeliveryOrders', JSON.stringify(barOrders));

				// Process kitchen orders
				const kitchenOrders = JSON.parse(localStorage.getItem('kitchenDeliveryOrders') || '[]');
				kitchenOrders.forEach(order => {
					if (order.status === 'pending') {
						order.status = 'sent';
						order.sentAt = Date.now();
						sentCount++;
					}
				});
				localStorage.setItem('kitchenDeliveryOrders', JSON.stringify(kitchenOrders));

				loadDashboardData();
				alert('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º: ' + sentCount);
			}

			// View order details
			function viewOrderDetails(department, orderIndex) {
				const storageKey = department === 'bar' ? 'barDeliveryOrders' : 'kitchenDeliveryOrders';
				const orders = JSON.parse(localStorage.getItem(storageKey) || '[]');
				const order = orders[orderIndex];

				if (!order) return;

				const itemsList = order.items.map(item => '‚Ä¢ ' + item.name + ' - ' + item.quantity + ' ' + item.unit).join('\n');
				const departmentName = department === 'bar' ? '–ë–∞—Ä' : '–ö—É—Ö–Ω—è';
				const statusText = order.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : order.status === 'sent' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
				const date = new Date(order.timestamp).toLocaleString('ru-RU');

				alert('–ó–∞–∫–∞–∑ –∏–∑ –æ—Ç–¥–µ–ª–∞: ' + departmentName + '\n\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ' + date + '\n–°—Ç–∞—Ç—É—Å: ' + statusText + '\n\n–¢–æ–≤–∞—Ä—ã:\n' + itemsList + '\n\n–ü–æ—Å—Ç–∞–≤—â–∏–∫: ' + (order.supplier || '–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫'));
			}

			// Create test orders for debugging (remove in production)
			function createTestOrders() {
				console.log('üß™ Creating test orders...');
				
				// Create test bar order
				const testBarOrder = {
					timestamp: Date.now() - 60000, // 1 minute ago
					items: [
						{ id: 1, name: '–í–æ–¥–∫–∞', quantity: 2, unit: '–ª' },
						{ id: 2, name: '–ü–∏–≤–æ', quantity: 10, unit: '—à—Ç' }
					],
					status: 'pending',
					supplier: '–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫'
				};
				
				// Create test kitchen order
				const testKitchenOrder = {
					timestamp: Date.now() - 120000, // 2 minutes ago
					items: [
						{ id: 3, name: '–ú—è—Å–æ –≥–æ–≤—è–¥–∏–Ω–∞', quantity: 5, unit: '–∫–≥' },
						{ id: 4, name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å', quantity: 10, unit: '–∫–≥' }
					],
					status: 'pending',
					supplier: '–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫'
				};
				
				// Save test orders
				const barOrders = [testBarOrder];
				const kitchenOrders = [testKitchenOrder];
				
				localStorage.setItem('barDeliveryOrders', JSON.stringify(barOrders));
				localStorage.setItem('kitchenDeliveryOrders', JSON.stringify(kitchenOrders));
				
				console.log('üß™ Test orders created!');
				loadDashboardData();
			}

			// Load data when page loads
			document.addEventListener('DOMContentLoaded', function() {
				// Immediate debugging
				console.log('üîç Manager page loaded, checking localStorage...');
				console.log('üîç barDeliveryOrders:', localStorage.getItem('barDeliveryOrders'));
				console.log('üîç kitchenDeliveryOrders:', localStorage.getItem('kitchenDeliveryOrders'));
				
				// Create test orders immediately for debugging
				createTestOrders();
				
				loadDashboardData();
				
				// Refresh data every 30 seconds
				setInterval(loadDashboardData, 30000);
				
				// Add test orders button for debugging (remove in production)
				console.log('üß™ To create test orders, run: createTestOrders()');
			});
		</script>
	</Layout>
