---
import Layout from '../layouts/Layout.astro';
---

<Layout title="–ú–µ–Ω–µ–¥–∂–µ—Ä - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è">
	<div class="min-h-screen bg-gray-50 flex flex-col">
		<!-- App Header -->
		<header class="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40">
			<div class="px-4 py-3">
				<div class="flex items-center justify-between">
					<!-- Left: Spacer -->
					<div class="w-10"></div>
					
					<!-- Center: Title -->
					<div class="flex items-center space-x-2">
						<span class="text-2xl">üëî</span>
						<h1 class="text-lg font-bold text-gray-900">–ú–µ–Ω–µ–¥–∂–µ—Ä</h1>
					</div>
					
				<!-- Right: Back Button -->
				<a href="/" class="text-gray-600 hover:text-gray-900 text-sm font-medium">‚Üê –ù–∞–∑–∞–¥</a>
				</div>
			</div>
		</header>

		<!-- Main Content Area -->
		<main class="flex-1">
			<div class="max-w-6xl mx-auto">
				<!-- Tab Navigation -->
				<div class="bg-white border-b border-gray-200 sticky top-0 z-40">
					<nav class="flex space-x-8 px-4 overflow-x-auto">
						<button 
							onclick="switchTab('orders')" 
							id="tab-orders"
							class="py-4 px-2 border-b-2 font-medium text-sm whitespace-nowrap border-blue-500 text-blue-600"
						>
							üìã –ó–∞–∫–∞–∑—ã
						</button>
						<button 
							onclick="switchTab('categories')" 
							id="tab-categories"
							class="py-4 px-2 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm whitespace-nowrap"
						>
							üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
						</button>
								<button 
							onclick="switchTab('suppliers')" 
							id="tab-suppliers"
							class="py-4 px-2 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm whitespace-nowrap"
								>
							üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏
								</button>
								<button 
							onclick="switchTab('departments')" 
							id="tab-departments"
							class="py-4 px-2 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm whitespace-nowrap"
								>
							üè™ –û—Ç–¥–µ–ª—ã
								</button>
								<button 
							onclick="switchTab('products')" 
							id="tab-products"
							class="py-4 px-2 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm whitespace-nowrap"
								>
							üì¶ –¢–æ–≤–∞—Ä—ã
								</button>
						<button 
							onclick="switchTab('settings')" 
							id="tab-settings"
							class="py-4 px-2 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm whitespace-nowrap"
						>
							‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
						</button>
					</nav>
							</div>

				<!-- Tab Content -->
				<div class="p-4">
					<!-- Orders Tab (Default) -->
					<div id="content-orders" class="tab-content">
						<div class="mb-4">
							<h3 class="text-lg font-semibold text-gray-900">üìã –ó–∞–∫–∞–∑—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h3>
						</div>
						<div id="ordersByCategory" class="">
							<div class="text-center text-gray-500 py-8">
								<span class="text-4xl mb-4 block">üìã</span>
								<p class="text-lg mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
							</div>
						</div>
					</div>

					<!-- Categories Tab -->
					<div id="content-categories" class="tab-content hidden">
						<div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3 mb-4">
							<h3 class="text-lg font-semibold text-gray-900">üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏</h3>
							<div class="flex flex-wrap gap-2">
							<button 
									onclick="addNewCategory()" 
									class="px-3 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-lg"
							>
									‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è
							</button>
							<button 
									onclick="loadCategorySuppliers()" 
									class="px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg"
							>
									üîÑ –û–±–Ω–æ–≤–∏—Ç—å
							</button>
						</div>
					</div>
						<div id="categorySuppliers" class="space-y-4">
							<div class="text-center text-gray-500 py-8">
								<span class="text-4xl mb-4 block">üè∑Ô∏è</span>
								<p class="text-lg mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</p>
						</div>
					</div>
				</div>

					<!-- Suppliers Tab -->
					<div id="content-suppliers" class="tab-content hidden">
						<div class="flex justify-between items-center mb-4">
						<h3 class="text-lg font-semibold text-gray-900">üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏</h3>
						<button 
							onclick="addNewSupplier()" 
								class="px-3 py-2 bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-medium rounded-lg"
						>
								‚ûï –î–æ–±–∞–≤–∏—Ç—å
						</button>
					</div>
						<div id="suppliersManagement" class="space-y-4">
							<div class="text-center text-gray-500 py-8">
								<span class="text-4xl mb-4 block">üè¢</span>
								<p class="text-lg mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...</p>
							</div>
						</div>
					</div>

					<!-- Departments Tab -->
					<div id="content-departments" class="tab-content hidden">
						<div class="flex justify-between items-center mb-4">
							<h3 class="text-lg font-semibold text-gray-900">üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏</h3>
							<button 
								onclick="addNewDepartment()" 
								class="px-3 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-lg"
							>
								‚ûï –î–æ–±–∞–≤–∏—Ç—å
							</button>
						</div>
						<div id="departmentsManagement" class="space-y-4">
							<div class="text-center text-gray-500 py-8">
								<span class="text-4xl mb-4 block">üè¢</span>
								<p class="text-lg mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–¥–µ–ª–æ–≤...</p>
							</div>
						</div>
					</div>

					<!-- Products Tab -->
					<div id="content-products" class="tab-content hidden">
						<div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3 mb-4">
							<h3 class="text-lg font-semibold text-gray-900">üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</h3>
							<div class="flex flex-wrap gap-2">
								<select id="departmentFilter" onchange="loadCustomProducts()" class="px-2 py-1 border border-gray-300 rounded text-sm">
									<option value="">–í—Å–µ –æ—Ç–¥–µ–ª—ã</option>
								</select>
								<button 
									onclick="addNewCustomProduct()" 
									class="px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg"
								>
									‚ûï –¢–æ–≤–∞—Ä
								</button>
							</div>
						</div>
						<div id="customProductsManagement" class="space-y-4">
							<div class="text-center text-gray-500 py-8">
								<span class="text-4xl mb-4 block">üì¶</span>
								<p class="text-lg mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
							</div>
						</div>
					</div>

					<!-- Settings Tab -->
					<div id="content-settings" class="tab-content hidden">
						<h3 class="text-lg font-semibold text-gray-900 mb-4">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h3>
						<div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
							<button 
								onclick="checkDatabaseStructure()" 
								class="p-4 bg-gray-50 rounded-lg hover:bg-gray-100 text-left"
							>
								<div class="flex items-center space-x-3">
									<span class="text-2xl">üîç</span>
									<div>
										<div class="font-medium">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î</div>
										<div class="text-sm text-gray-500">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</div>
									</div>
								</div>
							</button>
							<button 
								onclick="migrateDatabase()" 
								class="p-4 bg-gray-50 rounded-lg hover:bg-gray-100 text-left"
							>
								<div class="flex items-center space-x-3">
									<span class="text-2xl">üîß</span>
									<div>
										<div class="font-medium">–ú–∏–≥—Ä–∞—Ü–∏—è –ë–î</div>
										<div class="text-sm text-gray-500">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É</div>
									</div>
								</div>
							</button>
							</div>
						</div>
					</div>
				</div>

				<!-- Add Product Modal -->
				<div id="addProductModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
					<div class="bg-white h-full flex flex-col">
						<!-- Header -->
						<div class="bg-blue-600 text-white px-4 py-6">
							<div class="flex items-center justify-between">
								<div class="flex items-center space-x-2">
									<span class="text-2xl">‚ûï</span>
									<h1 class="text-xl font-bold">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã</h1>
								</div>
								<button onclick="closeAddProductModal()" class="text-blue-200 hover:text-white text-2xl">‚úï</button>
							</div>
						</div>

						<!-- Tab Navigation -->
						<div class="bg-white border-b border-gray-200">
							<div class="flex">
								<button 
									id="barTab" 
									onclick="switchDepartmentTab('bar')" 
									class="flex-1 py-3 px-4 text-center font-medium text-sm border-b-2 border-transparent text-gray-500 hover:text-gray-700"
								>
									üç∑ –ë–∞—Ä
								</button>
								<button 
									id="kitchenTab" 
									onclick="switchDepartmentTab('kitchen')" 
									class="flex-1 py-3 px-4 text-center font-medium text-sm border-b-2 border-transparent text-gray-500 hover:text-gray-700"
								>
									üç≥ –ö—É—Ö–Ω—è
								</button>
							</div>
						</div>

						<!-- Search and Bulk Actions -->
						<div class="p-4 bg-gray-50 border-b border-gray-200">
							<div class="flex space-x-3 mb-3">
								<div class="relative flex-1">
								<input 
									type="text" 
									id="productSearch" 
									placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..." 
									class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									oninput="filterProducts()"
								>
								<span class="absolute left-3 top-2.5 text-gray-400">üîç</span>
								</div>
								<button 
									onclick="bulkCategorizeProducts()" 
									class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white text-sm font-medium rounded-lg flex items-center space-x-2"
									title="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
								>
									<span>ü§ñ</span>
									<span>–ê–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
								</button>
							</div>
						</div>

						<!-- Products List -->
						<div class="flex-1 overflow-y-auto">
							<div id="productsList" class="p-4">
								<div class="text-center py-8">
									<div class="animate-spin h-8 w-8 border-b-2 border-blue-600 rounded-full mx-auto mb-4"></div>
									<p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
								</div>
							</div>
						</div>

						<!-- Selected Products Summary -->
						<div id="selectedSummary" class="bg-gray-50 border-t border-gray-200 p-4 hidden">
							<div class="flex items-center justify-between mb-3">
								<span class="font-medium text-gray-900">–í—ã–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <span id="selectedCount">0</span></span>
								<button onclick="clearSelectedProducts()" class="text-sm text-red-600 hover:text-red-800">–û—á–∏—Å—Ç–∏—Ç—å</button>
							</div>
							<div class="flex space-x-3">
								<button 
									onclick="addSelectedProductsToOrder()" 
									class="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg"
								>
									‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑
								</button>
								<button 
									onclick="closeAddProductModal()" 
									class="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-lg"
								>
									–û—Ç–º–µ–Ω–∞
								</button>
							</div>
						</div>
					</div>
				</div>

				<!-- Add Supplier Modal -->
				<div id="addSupplierModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
					<div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
						<div class="flex justify-between items-center mb-4">
							<h3 class="text-lg font-semibold">üè¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</h3>
							<button onclick="closeAddSupplierModal()" class="text-gray-400 hover:text-gray-600">‚úï</button>
						</div>
						<div class="space-y-4">
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</label>
								<input 
									type="text" 
									id="newSupplierName" 
									class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
								>
							</div>
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-1">–¢–µ–ª–µ—Ñ–æ–Ω</label>
								<input 
									type="tel" 
									id="newSupplierPhone" 
									class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									placeholder="+7 (xxx) xxx-xx-xx"
								>
							</div>
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-1">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</label>
								<textarea 
									id="newSupplierContact" 
									class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									placeholder="Email, –∞–¥—Ä–µ—Å, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
									rows="3"
								></textarea>
							</div>
							<div class="flex space-x-3 pt-4">
								<button 
									onclick="createSupplier()" 
									class="flex-1 px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-lg"
								>
									‚ûï –°–æ–∑–¥–∞—Ç—å
								</button>
								<button 
									onclick="closeAddSupplierModal()" 
									class="flex-1 px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-lg"
								>
									–û—Ç–º–µ–Ω–∞
								</button>
							</div>
						</div>
					</div>
				</div>

				<!-- Add Department Modal -->
				<div id="addDepartmentModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
					<div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
						<div class="p-6">
							<h3 class="text-lg font-semibold text-gray-900 mb-4">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–¥–µ–ª</h3>
							<div class="space-y-4">
								<div>
									<label class="block text-sm font-medium text-gray-700 mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞</label>
									<input 
										type="text" 
										id="newDepartmentName" 
										class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
										placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∫–ª–∞–¥, –û—Ñ–∏—Å, –†–µ—Å–µ–ø—à–Ω"
									/>
			</div>
								<div>
									<label class="block text-sm font-medium text-gray-700 mb-2">–≠–º–æ–¥–∑–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
									<input 
										type="text" 
										id="newDepartmentEmoji" 
										class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
										placeholder="üì¶"
										maxlength="2"
									/>
								</div>
							</div>
							<div class="flex space-x-3 pt-4">
								<button 
									onclick="createDepartment()" 
									class="flex-1 px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg"
								>
									‚ûï –°–æ–∑–¥–∞—Ç—å
								</button>
								<button 
									onclick="closeAddDepartmentModal()" 
									class="flex-1 px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-lg"
								>
									–û—Ç–º–µ–Ω–∞
								</button>
							</div>
						</div>
					</div>
				</div>

				<!-- Add Custom Product Modal -->
				<div id="addCustomProductModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
					<div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
						<div class="p-6">
							<h3 class="text-lg font-semibold text-gray-900 mb-4">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</h3>
							<div class="space-y-4">
								<div>
									<label class="block text-sm font-medium text-gray-700 mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label>
									<input 
										type="text" 
										id="newProductName" 
										class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
										placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¢—É–∞–ª–µ—Ç–Ω–∞—è –±—É–º–∞–≥–∞"
									/>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-700 mb-2">–û—Ç–¥–µ–ª</label>
									<select 
										id="newProductDepartment" 
										class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									>
										<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª</option>
									</select>
								</div>
								<div class="grid grid-cols-2 gap-4">
									<div>
										<label class="block text-sm font-medium text-gray-700 mb-2">–ï–¥–∏–Ω–∏—Ü–∞</label>
										<input 
											type="text" 
											id="newProductUnit" 
											class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
											placeholder="—à—Ç"
											value="—à—Ç"
										/>
									</div>
									<div>
										<label class="block text-sm font-medium text-gray-700 mb-2">–ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
										<input 
											type="number" 
											id="newProductMinQty" 
											class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
											placeholder="1"
											value="1"
											min="1"
										/>
									</div>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-700 mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
									<select 
										id="newProductCategory" 
										class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									>
										<option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
									</select>
								</div>
							</div>
							<div class="flex space-x-3 pt-4">
								<button 
									onclick="createCustomProduct()" 
									class="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg"
								>
									‚ûï –°–æ–∑–¥–∞—Ç—å
								</button>
								<button 
									onclick="closeAddCustomProductModal()" 
									class="flex-1 px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-lg"
								>
									–û—Ç–º–µ–Ω–∞
								</button>
							</div>
						</div>
					</div>
				</div>

				<!-- Add Category Modal -->
				<div id="addCategoryModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
					<div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
						<div class="p-6">
							<h3 class="text-lg font-semibold text-gray-900 mb-4">–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h3>
							<div class="space-y-4">
								<div>
									<label class="block text-sm font-medium text-gray-700 mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</label>
									<input 
										type="text" 
										id="newCategoryName" 
										class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
										placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –ú—è—Å–æ, –ê–ª–∫–æ–≥–æ–ª—å"
									/>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-700 mb-2">–ü–æ—Å—Ç–∞–≤—â–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
									<div class="space-y-3">
										<!-- Supplier List -->
										<div id="suppliersList" class="space-y-2 max-h-40 overflow-y-auto border border-gray-200 rounded-md p-2">
											<!-- Suppliers will be loaded here -->
											<div class="text-gray-500 text-sm">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...</div>
										</div>
										
										<!-- Add New Supplier Button -->
										<button 
											id="addSupplierBtn"
											onclick="showAddSupplierForm()" 
											class="w-full px-3 py-2 border-2 border-dashed border-gray-300 text-gray-600 hover:border-green-500 hover:text-green-600 text-sm font-medium rounded-md transition-colors"
										>
											‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
										</button>
										
										<!-- Inline Add Supplier Form (Hidden by default) -->
										<div id="inlineSupplierForm" class="hidden space-y-3 p-3 border border-green-200 bg-green-50 rounded-md">
											<div>
												<label class="block text-xs font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</label>
												<input 
													type="text" 
													id="inlineSupplierName" 
													class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-green-500"
													placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–û–û –ü–æ—Å—Ç–∞–≤—â–∏–∫"
												/>
											</div>
											<div>
												<label class="block text-xs font-medium text-gray-700 mb-1">–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
												<input 
													type="tel" 
													id="inlineSupplierPhone" 
													class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-green-500"
													placeholder="+7-XXX-XXX-XXXX"
												/>
											</div>
											<div>
												<label class="block text-xs font-medium text-gray-700 mb-1">–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
												<input 
													type="text" 
													id="inlineSupplierContact" 
													class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-green-500"
													placeholder="Email, –∞–¥—Ä–µ—Å, –∑–∞–º–µ—Ç–∫–∏"
												/>
											</div>
											<div class="flex space-x-2">
												<button 
													onclick="createInlineSupplier()" 
													class="flex-1 px-3 py-1 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded"
												>
													‚úì –°–æ–∑–¥–∞—Ç—å
												</button>
												<button 
													onclick="hideAddSupplierForm()" 
													class="px-3 py-1 bg-gray-500 hover:bg-gray-600 text-white text-sm font-medium rounded"
												>
													‚úï –û—Ç–º–µ–Ω–∞
												</button>
											</div>
										</div>
									</div>
								</div>
							</div>
							<div class="flex space-x-3 pt-4">
								<button 
									onclick="createCategory()" 
									class="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg"
								>
									‚ûï –°–æ–∑–¥–∞—Ç—å
								</button>
								<button 
									onclick="closeAddCategoryModal()" 
									class="flex-1 px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-lg"
								>
									–û—Ç–º–µ–Ω–∞
								</button>
							</div>
						</div>
					</div>
				</div>

				<!-- Add Missing Products Modal -->
				<div id="addMissingProductsModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
					<div class="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] flex flex-col">
						<div class="p-6 border-b">
							<div class="flex justify-between items-center">
								<h3 class="text-lg font-semibold">‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã</h3>
								<button onclick="closeAddMissingProductsModal()" class="text-gray-400 hover:text-gray-600">‚úï</button>
							</div>
							<p class="text-sm text-gray-600 mt-2">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑</p>
						</div>
						
						<div class="p-6 flex-1 overflow-auto">
							<!-- Section Tabs -->
							<div class="mb-6">
								<div class="flex border-b border-gray-200">
									<button onclick="loadMissingProductsSection('kitchen')" class="section-btn flex-1 px-4 py-3 text-sm font-medium border-b-2 border-transparent hover:text-orange-600 hover:border-orange-300 transition-colors">
										üç≥ –ö—É—Ö–Ω—è
									</button>
									<button onclick="loadMissingProductsSection('bar')" class="section-btn flex-1 px-4 py-3 text-sm font-medium border-b-2 border-transparent hover:text-purple-600 hover:border-purple-300 transition-colors">
										üç∑ –ë–∞—Ä
									</button>
									<button onclick="loadMissingProductsSection('custom')" class="section-btn flex-1 px-4 py-3 text-sm font-medium border-b-2 border-transparent hover:text-gray-600 hover:border-gray-300 transition-colors">
										üßπ –ì–æ—Ä–Ω–∏—á–Ω–∞—è
									</button>
									<button onclick="loadMissingProductsSection('other')" class="section-btn flex-1 px-4 py-3 text-sm font-medium border-b-2 border-transparent hover:text-blue-600 hover:border-blue-300 transition-colors">
										üì¶ –î—Ä—É–≥–∏–µ
									</button>
								</div>
							</div>
							
							<!-- Search -->
							<div class="mb-4">
								<input 
									type="text" 
									id="missingProductsSearch" 
									placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
									class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
									oninput="filterMissingProducts()"
								>
							</div>
							
							<!-- Products List -->
							<div id="missingProductsList" class="space-y-2 max-h-64 overflow-y-auto">
								<div class="text-center text-gray-500 py-8">
									<span class="text-4xl mb-2 block">üì¶</span>
									<p>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤</p>
								</div>
							</div>
						</div>
						
						<div class="p-6 border-t">
							<div class="flex space-x-3">
								<button 
									onclick="addSelectedMissingProducts()" 
									class="flex-1 px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg"
									id="addMissingProductsBtn"
									disabled
								>
									‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
								</button>
								<button 
									onclick="closeAddMissingProductsModal()" 
									class="flex-1 px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-lg"
								>
									–û—Ç–º–µ–Ω–∞
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</main>

		<script is:inline>
		// Removed role-based navigation - now using sections

			// Global variables (moved to product selection section)
			
			// Migrate localStorage orders to PostgreSQL
			async function migrateLocalStorageOrders() {
				try {
					const barOrders = JSON.parse(localStorage.getItem('barDeliveryOrders') || '[]');
					const kitchenOrders = JSON.parse(localStorage.getItem('kitchenDeliveryOrders') || '[]');
					
					if (barOrders.length > 0 || kitchenOrders.length > 0) {
						console.log('üîÑ Migrating localStorage orders to PostgreSQL...', {
							bar: barOrders.length,
							kitchen: kitchenOrders.length
						});
						
						const response = await fetch('/api/migrate-orders', {
							method: 'POST',
							headers: { 'Content-Type': 'application/json' },
							body: JSON.stringify({ barOrders, kitchenOrders })
						});
						
						const result = await response.json();
						if (result.success) {
							console.log('‚úÖ Migration successful:', result.migrated);
							// Clear localStorage after successful migration
							localStorage.removeItem('barDeliveryOrders');
							localStorage.removeItem('kitchenDeliveryOrders');
						} else {
							console.error('‚ùå Migration failed:', result.error);
						}
					}
				} catch (error) {
					console.error('üí• Error during migration:', error);
				}
			}
			
			// Fallback: Load orders from localStorage (if database fails)
			async function loadOrdersFromLocalStorage() {
				console.log('‚ö†Ô∏è Falling back to localStorage data...');
				
				const barOrders = JSON.parse(localStorage.getItem('barDeliveryOrders') || '[]');
				const kitchenOrders = JSON.parse(localStorage.getItem('kitchenDeliveryOrders') || '[]');
				
				console.log('üìä Manager: Loaded from localStorage - Bar:', barOrders.length, 'Kitchen:', kitchenOrders.length);
				
				// Load orders management
				loadOrdersManagement(barOrders, kitchenOrders);
			}
			
			// Load orders management section
			function loadOrdersManagement(barOrders, kitchenOrders) {
				// Update orders management UI
				const ordersContainer = document.getElementById('ordersManagement');
				if (!ordersContainer) return;
				
				let ordersHtml = '';
				
				// Bar orders section
				if (barOrders.length > 0) {
					ordersHtml += '<h4 class="font-medium text-gray-900 mb-3">üç∑ –ó–∞–∫–∞–∑—ã –±–∞—Ä–∞</h4>';
					barOrders.forEach((order, index) => {
						const status = order.db_status || order.status;
						const statusColor = status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
										   status === 'sent' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800';
						const statusText = status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : status === 'sent' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
						const date = new Date(order.db_created_at || order.timestamp).toLocaleDateString('ru-RU');
						
						ordersHtml += `
							<div class="border border-gray-200 rounded-lg p-4 mb-3">
								<div class="flex justify-between items-start mb-2">
									<div>
										<span class="px-2 py-1 text-xs rounded-full ${statusColor}">${statusText}</span>
										<span class="text-sm text-gray-600 ml-2">${date}</span>
									</div>
									<div class="flex space-x-2">
										${status === 'pending' ? `<button onclick="sendOrderToSupplier('bar', ${index})" class="px-3 py-1 text-xs bg-green-100 hover:bg-green-200 text-green-700 rounded">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>` : ''}
										<button onclick="viewOrderDetails('bar', ${index})" class="px-3 py-1 text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 rounded">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä</button>
									</div>
								</div>
								<div class="text-sm text-gray-600">
									–¢–æ–≤–∞—Ä–æ–≤: ${order.items?.length || 0} | –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${order.supplier || '–ù–µ —É–∫–∞–∑–∞–Ω'}
								</div>
							</div>
						`;
					});
				}
				
				// Kitchen orders section
				if (kitchenOrders.length > 0) {
					ordersHtml += '<h4 class="font-medium text-gray-900 mb-3 mt-6">üç≥ –ó–∞–∫–∞–∑—ã –∫—É—Ö–Ω–∏</h4>';
					kitchenOrders.forEach((order, index) => {
						const status = order.db_status || order.status;
						const statusColor = status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
										   status === 'sent' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800';
						const statusText = status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : status === 'sent' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
						const date = new Date(order.db_created_at || order.timestamp).toLocaleDateString('ru-RU');
						
						ordersHtml += `
							<div class="border border-gray-200 rounded-lg p-4 mb-3">
								<div class="flex justify-between items-start mb-2">
									<div>
										<span class="px-2 py-1 text-xs rounded-full ${statusColor}">${statusText}</span>
										<span class="text-sm text-gray-600 ml-2">${date}</span>
									</div>
									<div class="flex space-x-2">
										${status === 'pending' ? `<button onclick="sendOrderToSupplier('kitchen', ${index})" class="px-3 py-1 text-xs bg-green-100 hover:bg-green-200 text-green-700 rounded">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>` : ''}
										<button onclick="viewOrderDetails('kitchen', ${index})" class="px-3 py-1 text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 rounded">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä</button>
									</div>
								</div>
								<div class="text-sm text-gray-600">
									–¢–æ–≤–∞—Ä–æ–≤: ${order.items?.length || 0} | –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${order.supplier || '–ù–µ —É–∫–∞–∑–∞–Ω'}
								</div>
							</div>
						`;
					});
				}
				
				if (ordersHtml === '') {
					ordersHtml = `
						<div class="text-center text-gray-500 py-8">
							<span class="text-4xl mb-4 block">üìã</span>
							<p class="text-lg mb-2">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
							<p class="text-sm">–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è</p>
						</div>
					`;
				}
				
				ordersContainer.innerHTML = ordersHtml;
			}

			// Load orders data
			async function loadOrdersData() {
				try {
					// First, try to migrate any localStorage orders to PostgreSQL
					await migrateLocalStorageOrders();
					
					// Load orders from PostgreSQL database
					const response = await fetch('/api/get-all-orders');
					const result = await response.json();
					
					if (result.success) {
						const allOrders = result.data;
						const barOrders = allOrders.filter(o => o.department === 'bar');
						const kitchenOrders = allOrders.filter(o => o.department === 'kitchen');
						
						// Load orders management with database data
						loadOrdersManagement(barOrders, kitchenOrders);
					} else {
						console.error('‚ùå Failed to load orders from database:', result.error);
						// Fallback to localStorage
						await loadOrdersFromLocalStorage();
					}

				} catch (error) {
					console.error('Failed to load orders data:', error);
				}
			}

			// Load orders management
			function loadOrdersManagement(barOrders, kitchenOrders) {
				console.log('üìã Manager: Loading orders management with:', {
					barOrders: barOrders.length,
					kitchenOrders: kitchenOrders.length
				});

				const allOrders = [
					...barOrders.map((o, i) => ({...o, department: 'bar', departmentName: '–ë–∞—Ä', departmentEmoji: 'üç∑', originalIndex: i})),
					...kitchenOrders.map((o, i) => ({...o, department: 'kitchen', departmentName: '–ö—É—Ö–Ω—è', departmentEmoji: 'üç≥', originalIndex: i}))
				];

				console.log('üìã Manager: All orders combined:', allOrders.length, allOrders);

				// Sort by timestamp (newest first)
				allOrders.sort((a, b) => b.timestamp - a.timestamp);

				const ordersContainer = document.getElementById('ordersManagement');
				
				if (allOrders.length === 0) {
					ordersContainer.innerHTML = `
						<div class="text-center text-gray-500 py-8">
							<span class="text-4xl mb-4 block">üìã</span>
							<p class="text-lg mb-2">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
							<p class="text-sm">–ó–∞–∫–∞–∑—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
						</div>
					`;
					return;
				}

				let ordersHtml = '';
				allOrders.forEach((order, globalIndex) => {
					const date = new Date(order.timestamp).toLocaleString('ru-RU');
					const statusColor = order.status === 'pending' ? 'yellow' : order.status === 'sent' ? 'blue' : 'green';
					const statusText = order.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : order.status === 'sent' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
					
					const itemsList = order.items.map(item => `
						<div class="flex justify-between items-center py-1">
							<span class="text-sm">${item.name}</span>
							<span class="text-sm text-gray-600">${item.quantity} ${item.unit}</span>
						</div>
					`).join('');
					
					ordersHtml += `
						<div class="border border-gray-200 rounded-lg p-4">
							<div class="flex justify-between items-start mb-3">
								<div class="flex items-center space-x-2">
									<span class="text-lg">${order.departmentEmoji}</span>
									<div>
										<span class="font-medium">${order.departmentName}</span>
										<div class="text-xs text-gray-500">${date}</div>
									</div>
								</div>
								<div class="flex items-center space-x-2">
									<span class="inline-block px-2 py-1 text-xs rounded-full bg-${statusColor}-100 text-${statusColor}-700">
										${statusText}
									</span>
								</div>
							</div>
							
							<div class="mb-3 max-h-32 overflow-y-auto">
								${itemsList}
							</div>
							
							<div class="flex space-x-2">
								<button 
									onclick="openAddProductModal('${order.department}', ${order.originalIndex})" 
									class="px-3 py-1 text-xs bg-blue-100 hover:bg-blue-200 text-blue-700 rounded"
								>
									‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
								</button>
								${order.status === 'pending' ? `
									<button 
										onclick="sendOrderToSupplier('${order.department}', ${order.originalIndex})" 
										class="px-3 py-1 text-xs bg-green-100 hover:bg-green-200 text-green-700 rounded"
									>
										üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
									</button>
								` : ''}
							</div>
						</div>
					`;
				});

				ordersContainer.innerHTML = ordersHtml;
			}

			// Variables for product selection
			let currentEditingDepartment = null;
			let currentEditingOrder = null;
			let currentDepartmentTab = 'bar';
			let allProducts = { bar: [], kitchen: [] };
			let selectedProducts = {};

			// Open add product modal
			function openAddProductModal(department, orderIndex) {
				currentEditingDepartment = department;
				currentEditingOrder = orderIndex;
				currentDepartmentTab = department;
				selectedProducts = {};
				
				document.getElementById('addProductModal').classList.remove('hidden');
				switchDepartmentTab(department);
				loadProductsForDepartment(department);
			}

			// Close add product modal
			function closeAddProductModal() {
				document.getElementById('addProductModal').classList.add('hidden');
				document.getElementById('productSearch').value = '';
				selectedProducts = {};
				currentEditingDepartment = null;
				currentEditingOrder = null;
				updateSelectedSummary();
			}

			// Switch department tab
			function switchDepartmentTab(department) {
				currentDepartmentTab = department;
				
				// Update tab styles
				document.getElementById('barTab').className = department === 'bar' 
					? 'flex-1 py-3 px-4 text-center font-medium text-sm border-b-2 border-blue-500 text-blue-600'
					: 'flex-1 py-3 px-4 text-center font-medium text-sm border-b-2 border-transparent text-gray-500 hover:text-gray-700';
				
				document.getElementById('kitchenTab').className = department === 'kitchen'
					? 'flex-1 py-3 px-4 text-center font-medium text-sm border-b-2 border-orange-500 text-orange-600'
					: 'flex-1 py-3 px-4 text-center font-medium text-sm border-b-2 border-transparent text-gray-500 hover:text-gray-700';
				
				loadProductsForDepartment(department);
			}

			// Load products for department
			async function loadProductsForDepartment(department) {
				const productsList = document.getElementById('productsList');
				productsList.innerHTML = `
					<div class="text-center py-8">
						<div class="animate-spin h-8 w-8 border-b-2 border-blue-600 rounded-full mx-auto mb-4"></div>
						<p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
					</div>
				`;

				try {
					const endpoint = department === 'bar' ? '/api/bar-inventory' : '/api/kitchen-inventory';
					const response = await fetch(endpoint);
					const data = await response.json();
					
					if (data.success) {
						allProducts[department] = data.data;
						displayProducts(data.data);
					} else {
						throw new Error(data.error || 'Failed to load products');
					}
				} catch (error) {
					console.error('Error loading products:', error);
					productsList.innerHTML = `
						<div class="text-center py-8">
							<span class="text-4xl mb-4 block">‚ùå</span>
							<p class="text-gray-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</p>
						</div>
					`;
				}
			}

			// Display products
			function displayProducts(products) {
				const productsList = document.getElementById('productsList');
				
				if (!products || products.length === 0) {
					productsList.innerHTML = `
						<div class="text-center py-8">
							<span class="text-4xl mb-4 block">üì¶</span>
							<p class="text-gray-600">–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</p>
						</div>
					`;
					return;
				}

				let productsHtml = '<div class="space-y-2">';
				products.forEach((product, index) => {
					const isSelected = selectedProducts[product.id];
					const borderClass = isSelected ? 'border-l-4 border-l-green-500 bg-green-50' : '';
					
					productsHtml += `
						<div class="bg-white border border-gray-200 rounded-lg p-4 ${borderClass}" data-product-id="${product.id}">
							<div class="flex justify-between items-start mb-2">
								<div class="flex-1">
									<h4 class="font-medium text-gray-900">${product.name}</h4>
									<p class="text-sm text-gray-600">–ù–∞ —Å–∫–ª–∞–¥–µ: ${product.quantity || 0} ${product.unit}</p>
									${product.category_name ? `<p class="text-xs text-gray-500">üìÇ ${product.category_name}</p>` : '<p class="text-xs text-gray-400">üìÇ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>'}
								</div>
								<div class="flex items-center space-x-2">
									${isSelected ? `
										<div class="flex items-center space-x-2 bg-gray-100 rounded-lg px-2 py-1">
											<button onclick="decreaseQuantity('${product.id}')" class="px-2 py-1 text-gray-600 hover:text-gray-800">-</button>
											<input 
												type="number" 
												id="qty-${product.id}" 
												value="${selectedProducts[product.id].quantity}" 
												min="1" 
												step="0.1"
												class="w-16 text-center border-0 bg-transparent text-sm"
												onchange="updateQuantity('${product.id}', this.value)"
											>
											<span class="text-sm text-gray-600">${product.unit}</span>
											<button onclick="increaseQuantity('${product.id}')" class="px-2 py-1 text-gray-600 hover:text-gray-800">+</button>
										</div>
									` : `
										<button 
											onclick="selectProduct('${product.id}', '${product.name}', '${product.unit}')" 
											class="px-3 py-1 bg-blue-50 hover:bg-blue-100 text-blue-700 text-sm rounded border border-blue-200"
										>
											+ –î–æ–±–∞–≤–∏—Ç—å
										</button>
									`}
								</div>
							</div>
							<!-- Categorization Row -->
							<div class="flex items-center space-x-2 pt-2 border-t border-gray-100">
								<select 
									id="category-select-${product.id}" 
									class="flex-1 text-xs border border-gray-300 rounded px-2 py-1 bg-white"
									data-product-id="${product.id}"
									data-product-name="${product.name}"
									onchange="updateProductCategory(this)"
								>
									<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
									<!-- Categories will be loaded dynamically -->
								</select>
								<button 
									class="px-2 py-1 text-xs bg-purple-50 hover:bg-purple-100 text-purple-700 rounded border border-purple-200"
									onclick="suggestCategory('${product.id}', '${product.name}')"
									title="–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
									id="ai-btn-${product.id}"
								>
									ü§ñ AI
								</button>
							</div>
						</div>
					`;
				});
				productsHtml += '</div>';
				
				productsList.innerHTML = productsHtml;
				
				// Load categories for all select elements
				loadCategoriesForProducts();
			}

			// Select product
			function selectProduct(productId, productName, productUnit) {
				selectedProducts[productId] = {
					id: productId,
					name: productName,
					unit: productUnit,
					quantity: 1
				};
				
				displayProducts(allProducts[currentDepartmentTab]);
				updateSelectedSummary();
			}

			// Update quantity
			function updateQuantity(productId, newQuantity) {
				const quantity = parseFloat(newQuantity) || 1;
				if (selectedProducts[productId]) {
					selectedProducts[productId].quantity = Math.max(0.1, quantity);
					updateSelectedSummary();
				}
			}

			// Increase quantity
			function increaseQuantity(productId) {
				if (selectedProducts[productId]) {
					selectedProducts[productId].quantity += 1;
					document.getElementById(`qty-${productId}`).value = selectedProducts[productId].quantity;
					updateSelectedSummary();
				}
			}

			// Decrease quantity
			function decreaseQuantity(productId) {
				if (selectedProducts[productId]) {
					if (selectedProducts[productId].quantity > 1) {
						selectedProducts[productId].quantity -= 1;
						document.getElementById(`qty-${productId}`).value = selectedProducts[productId].quantity;
						updateSelectedSummary();
					} else {
						// Remove product if quantity becomes 0
						delete selectedProducts[productId];
						displayProducts(allProducts[currentDepartmentTab]);
						updateSelectedSummary();
					}
				}
			}

			// Update selected summary
			function updateSelectedSummary() {
				const selectedCount = Object.keys(selectedProducts).length;
				const summaryDiv = document.getElementById('selectedSummary');
				const countSpan = document.getElementById('selectedCount');
				
				countSpan.textContent = selectedCount;
				
				if (selectedCount > 0) {
					summaryDiv.classList.remove('hidden');
				} else {
					summaryDiv.classList.add('hidden');
				}
			}

			// Clear selected products
			function clearSelectedProducts() {
				selectedProducts = {};
				displayProducts(allProducts[currentDepartmentTab]);
				updateSelectedSummary();
			}

			// Filter products
			function filterProducts() {
				const searchTerm = document.getElementById('productSearch').value.toLowerCase();
				const products = allProducts[currentDepartmentTab];
				
				if (!searchTerm) {
					displayProducts(products);
					return;
				}
				
				const filteredProducts = products.filter(product => 
					product.name.toLowerCase().includes(searchTerm) ||
					(product.category && product.category.toLowerCase().includes(searchTerm))
				);
				
				displayProducts(filteredProducts);
			}

			// Add selected products to order
			function addSelectedProductsToOrder() {
				const selectedCount = Object.keys(selectedProducts).length;
				if (selectedCount === 0) {
					alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
					return;
				}

				// Get current orders
				const storageKey = currentEditingDepartment === 'bar' ? 'barDeliveryOrders' : 'kitchenDeliveryOrders';
				const orders = JSON.parse(localStorage.getItem(storageKey) || '[]');

				if (orders[currentEditingOrder]) {
					// Add selected products to the order
					Object.values(selectedProducts).forEach(product => {
						orders[currentEditingOrder].items.push({
							name: product.name,
							quantity: product.quantity,
							unit: product.unit
						});
					});

					// Save back to localStorage
					localStorage.setItem(storageKey, JSON.stringify(orders));

					// Close modal and refresh
					closeAddProductModal();
					loadOrdersData();

					alert(`–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${selectedCount}`);
				}
			}

			// Send order to supplier
			async function sendOrderToSupplier(department, orderIndex) {
				if (!confirm('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É?')) {
					return;
				}

				try {
					// Get current orders to find the order ID
					const response = await fetch('/api/get-all-orders');
					const result = await response.json();
					
					if (result.success) {
						const orders = result.data.filter(o => o.department === department);
						const order = orders[orderIndex];
						
						if (order && order.db_id) {
							// Update status in database
							const updateResponse = await fetch('/api/update-order-status', {
								method: 'POST',
								headers: { 'Content-Type': 'application/json' },
								body: JSON.stringify({
									orderId: order.db_id,
									status: 'sent'
								})
							});
							
							const updateResult = await updateResponse.json();
							if (updateResult.success) {
								loadOrdersData();
								alert('–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫—É!');
							} else {
								throw new Error(updateResult.error);
							}
						} else {
							throw new Error('Order not found or missing database ID');
						}
					} else {
						throw new Error('Failed to load orders');
					}
				} catch (error) {
					console.error('‚ùå Failed to send order:', error);
					alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞: ' + error.message);
				}
			}

			// Send all pending orders to suppliers
			async function sendAllOrdersToSuppliers() {
				if (!confirm('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º?')) {
					return;
				}

				try {
					// Get all orders from database
					const response = await fetch('/api/get-all-orders');
					const result = await response.json();
					
					if (result.success) {
						const pendingOrders = result.data.filter(o => (o.db_status || o.status) === 'pending');
						let sentCount = 0;
						
						// Update each pending order to 'sent' status
						for (const order of pendingOrders) {
							if (order.db_id) {
								try {
									const updateResponse = await fetch('/api/update-order-status', {
										method: 'POST',
										headers: { 'Content-Type': 'application/json' },
										body: JSON.stringify({
											orderId: order.db_id,
											status: 'sent'
										})
									});
									
									const updateResult = await updateResponse.json();
									if (updateResult.success) {
										sentCount++;
									}
								} catch (error) {
									console.error('‚ùå Failed to update order:', order.db_id, error);
								}
							}
						}
						
						loadOrdersData();
						alert('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º: ' + sentCount);
					} else {
						throw new Error('Failed to load orders');
					}
				} catch (error) {
					console.error('‚ùå Failed to send all orders:', error);
					alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–æ–≤: ' + error.message);
				}
			}

			// View order details
			async function viewOrderDetails(department, orderIndex) {
				try {
					// Get current orders from database
					const response = await fetch('/api/get-all-orders');
					const result = await response.json();
					
					if (result.success) {
						const orders = result.data.filter(o => o.department === department);
						const order = orders[orderIndex];

						if (!order) {
							alert('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
							return;
						}

						const itemsList = order.items.map(item => '‚Ä¢ ' + item.name + ' - ' + item.quantity + ' ' + item.unit).join('\n');
						const departmentName = department === 'bar' ? '–ë–∞—Ä' : '–ö—É—Ö–Ω—è';
						const status = order.db_status || order.status;
						const statusText = status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : status === 'sent' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
						const date = new Date(order.db_created_at || order.timestamp).toLocaleString('ru-RU');

						alert('–ó–∞–∫–∞–∑ –∏–∑ –æ—Ç–¥–µ–ª–∞: ' + departmentName + '\n\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ' + date + '\n–°—Ç–∞—Ç—É—Å: ' + statusText + '\n\n–¢–æ–≤–∞—Ä—ã:\n' + itemsList + '\n\n–ü–æ—Å—Ç–∞–≤—â–∏–∫: ' + (order.supplier || '–ù–µ —É–∫–∞–∑–∞–Ω'));
					} else {
						alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞');
					}
				} catch (error) {
					console.error('‚ùå Failed to view order details:', error);
					alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞');
				}
			}

			// CATEGORIZATION FUNCTIONS
			
			// Load categories for all product select elements
			async function loadCategoriesForProducts() {
				try {
					const response = await fetch('/api/get-categories');
					const data = await response.json();
					
					if (data.success && data.categories) {
						const categories = data.categories;
						
						// Update all category select elements
						const selects = document.querySelectorAll('select[id^="category-select-"]');
						selects.forEach(select => {
							const currentValue = select.value;
							const productId = select.dataset.productId;
							
							// Clear existing options except the first one
							while (select.options.length > 1) {
								select.remove(1);
							}
							
							// Add categories
							categories.forEach(category => {
								const option = document.createElement('option');
								option.value = category.id;
								option.textContent = category.name;
								select.appendChild(option);
							});
							
							// Set current category if product has one
							const product = allProducts[currentDepartmentTab]?.find(p => p.id == productId);
							if (product && product.category_id) {
								select.value = product.category_id;
							}
						});
					}
				} catch (error) {
					console.error('Error loading categories:', error);
				}
			}
			
			// Update product category manually
			async function updateProductCategory(select) {
				const productId = select.dataset.productId;
				const categoryId = select.value;
				
				if (!productId || !categoryId) return;
				
				try {
					const response = await fetch('/api/categorize-product', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ productId, categoryId })
					});
					
					const data = await response.json();
					
					if (data.success) {
						showToast('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
						// Update the product in memory
						const product = allProducts[currentDepartmentTab]?.find(p => p.id == productId);
						if (product) {
							product.category_id = parseInt(categoryId);
							const categoryOption = select.querySelector(`option[value="${categoryId}"]`);
							product.category_name = categoryOption ? categoryOption.textContent : '';
						}
					} else {
						showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'error');
						select.value = '';
					}
				} catch (error) {
					console.error('Error updating category:', error);
					showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'error');
					select.value = '';
				}
			}
			
			// Suggest category using AI
			async function suggestCategory(productId, productName) {
				const select = document.getElementById(`category-select-${productId}`);
				const button = document.getElementById(`ai-btn-${productId}`);
				
				if (!productName) return;
				
				// Show loading state
				const originalHTML = button.innerHTML;
				button.disabled = true;
				button.innerHTML = '‚è≥';
				
				try {
					const response = await fetch('/api/categorize-product', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ productId, productName })
					});
					
					const data = await response.json();
					
					if (data.success && data.categoryId) {
						// Update the select value
						select.value = data.categoryId;
						
						// Update the product in memory
						const product = allProducts[currentDepartmentTab]?.find(p => p.id == productId);
						if (product) {
							product.category_id = data.categoryId;
							const categoryOption = select.querySelector(`option[value="${data.categoryId}"]`);
							product.category_name = categoryOption ? categoryOption.textContent : '';
						}
						
						// Refresh categories if needed
						await loadCategoriesForProducts();
						select.value = data.categoryId;
						
						showToast('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', 'success');
					} else {
						showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 'error');
					}
				} catch (error) {
					console.error('Error suggesting category:', error);
					showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'error');
				} finally {
					// Reset button state
					button.disabled = false;
					button.innerHTML = originalHTML;
				}
			}
			
			// Bulk AI categorization for all uncategorized products
			async function bulkCategorizeProducts() {
				if (!confirm('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?')) {
					return;
				}
				
				const uncategorizedProducts = allProducts[currentDepartmentTab]?.filter(p => !p.category_id) || [];
				
				if (uncategorizedProducts.length === 0) {
					showToast('–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã', 'info');
					return;
				}
				
				let processed = 0;
				let errors = 0;
				
				showToast(`–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è ${uncategorizedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤...`, 'info');
				
				for (const product of uncategorizedProducts) {
					try {
						const response = await fetch('/api/categorize-product', {
							method: 'POST',
							headers: { 'Content-Type': 'application/json' },
							body: JSON.stringify({ productId: product.id, productName: product.name })
						});
						
						const data = await response.json();
						
						if (data.success && data.categoryId) {
							product.category_id = data.categoryId;
							processed++;
						} else {
							errors++;
						}
					} catch (error) {
						console.error('Error categorizing product:', product.name, error);
						errors++;
					}
					
					// Small delay to avoid overwhelming the API
					await new Promise(resolve => setTimeout(resolve, 100));
				}
				
				// Refresh the display
				await loadCategoriesForProducts();
				displayProducts(allProducts[currentDepartmentTab]);
				
				showToast(`–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${processed} —É—Å–ø–µ—à–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`, processed > 0 ? 'success' : 'error');
			}
			
			// Show toast notification
			function showToast(message, type = 'info') {
				const toast = document.createElement('div');
				toast.className = 'fixed top-4 right-4 z-50 max-w-sm';
				
				const bgColor = type === 'success' ? 'bg-green-100 text-green-800 border-green-200' : 
							   type === 'error' ? 'bg-red-100 text-red-800 border-red-200' : 
							   'bg-blue-100 text-blue-800 border-blue-200';
				
				toast.innerHTML = `
					<div class="border rounded-lg p-3 ${bgColor} shadow-lg">
						<div class="flex items-center">
							<span class="text-sm">${message}</span>
							<button onclick="this.parentElement.parentElement.parentElement.remove()" class="ml-2 text-gray-500 hover:text-gray-700">‚úï</button>
						</div>
					</div>
				`;
				
				document.body.appendChild(toast);
				
				// Auto remove after 5 seconds
				setTimeout(() => {
					if (toast.parentElement) {
						toast.remove();
					}
				}, 5000);
			}

			// CATEGORY-SUPPLIER MANAGEMENT FUNCTIONS
			
			// Check database structure
			async function checkDatabaseStructure() {
				console.log('üîç Checking database structure...');
				showToast('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', 'info');
				
				try {
					const response = await fetch('/api/admin/check-db-structure');
					const data = await response.json();
					
					if (data.success) {
						console.log('üìã Database structure:', data.data);
						
						// Show detailed info in console
						console.log('üìã All tables:', data.data.allTables);
						console.log('üìã Table details:', data.data.tableDetails);
						
						// Create summary message
						const tables = data.data.allTables;
						const hasCategories = tables.includes('product_categories');
						const hasSuppliers = tables.includes('suppliers');
						const hasOrders = tables.includes('orders');
						const hasProducts = tables.includes('products');
						
						let message = `–¢–∞–±–ª–∏—Ü—ã: ${tables.length} –Ω–∞–π–¥–µ–Ω–æ\\n`;
						message += `‚úÖ restaurants: ${tables.includes('restaurants')}\\n`;
						message += `‚úÖ suppliers: ${hasSuppliers}\\n`;
						message += `‚úÖ product_categories: ${hasCategories}\\n`;
						message += `‚úÖ products: ${hasProducts}\\n`;
						message += `‚úÖ orders: ${hasOrders}`;
						
						alert('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\\n\\n' + message + '\\n\\n–î–µ—Ç–∞–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12)');
						showToast('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞', 'success');
					} else {
						console.error('‚ùå Failed to check database structure:', data.error);
						showToast('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ' + data.error, 'error');
					}
				} catch (error) {
					console.error('‚ùå Error checking database structure:', error);
					showToast('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î', 'error');
				}
			}
			
			// Migrate database schema
			async function migrateDatabase() {
				if (!confirm('–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö? –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.')) {
					return;
				}
				
				console.log('üîß Starting database migration...');
				showToast('–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', 'info');
				
				try {
					const response = await fetch('/api/admin/migrate-db');
					const data = await response.json();
					
					console.log('üîß Migration results:', data);
					
					if (data.success) {
						showToast('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
						
						// Show details if available
						if (data.results) {
							console.log('üìã Migration details:', data.results);
							if (data.results.columnsAdded.length > 0) {
								console.log('‚úÖ Added columns:', data.results.columnsAdded);
							}
							if (data.results.errors.length > 0) {
								console.log('‚ö†Ô∏è Migration errors:', data.results.errors);
							}
						}
						
						// Refresh all data after migration
						setTimeout(() => {
							loadCategorySuppliers();
							loadOrdersByCategory();
						}, 1000);
					} else {
						console.error('‚ùå Migration failed:', data);
						showToast('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ' + (data.error || 'Unknown error'), 'error');
						
						// Show detailed error in console
						if (data.results) {
							console.log('üìã Migration results with errors:', data.results);
						}
					}
				} catch (error) {
					console.error('‚ùå Error during migration:', error);
					showToast('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' + error.message, 'error');
				}
			}
			
			// Load category-supplier assignments
			async function loadCategorySuppliers() {
				console.log('üè∑Ô∏è Loading category-supplier assignments...');
				try {
					const response = await fetch('/api/category-suppliers');
					const data = await response.json();
					
					if (data.success) {
						displayCategorySuppliers(data.data);
					} else {
						console.error('‚ùå Failed to load category suppliers:', data.error);
						displayCategorySuppliers([]);
					}
				} catch (error) {
					console.error('‚ùå Error loading category suppliers:', error);
					displayCategorySuppliers([]);
				}
			}
			
			// Display category-supplier assignments
			function displayCategorySuppliers(categorySuppliers) {
				const container = document.getElementById('categorySuppliers');
				
				if (!container) {
					console.error('‚ùå Category suppliers container not found!');
					return;
				}
				
				if (!categorySuppliers || categorySuppliers.length === 0) {
					container.innerHTML = `
						<div class="text-center text-gray-500 py-8">
							<span class="text-4xl mb-4 block">üè∑Ô∏è</span>
							<p class="text-lg mb-2">–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π</p>
							<p class="text-sm">–°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</p>
						</div>
					`;
					return;
				}
				
				// Desktop: Grid layout, Mobile: Single column
				let html = '<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">';
				
				categorySuppliers.forEach(category => {
					const hasSupplier = category.supplier_id && category.supplier_name;
					const hasPhone = hasSupplier && category.supplier_phone;
					
					html += `
						<div class="bg-gray-50 rounded-lg p-3">
							<!-- Mobile: Full layout, Desktop: Compact header -->
							<div class="flex flex-col md:flex-row md:justify-between md:items-start mb-2">
								<h4 class="font-medium text-gray-900 mb-1 md:mb-0">${category.category_name}</h4>
								<span class="text-xs text-gray-500 self-start md:self-center">ID: ${category.id}</span>
							</div>
							
							${hasSupplier ? `
								<div class="text-sm text-green-600 mb-1">üì¶ ${category.supplier_name}</div>
								${hasPhone ? `
									<div class="text-xs text-gray-500 mb-3">üì± ${category.supplier_phone}</div>
								` : `
									<div class="text-xs text-red-500 mb-3">‚ö†Ô∏è –ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞</div>
								`}
							` : `
								<div class="text-sm text-red-600 mb-3">‚ö†Ô∏è –ë–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</div>
							`}
							
							<!-- Mobile: Full width buttons, Desktop: Compact buttons -->
							<div class="flex flex-col md:flex-row gap-2">
								${hasSupplier ? `
									<button 
										onclick="openSupplierAssignModal(${category.id}, '${category.category_name}', ${category.supplier_id})"
										class="flex-1 px-2 py-1.5 md:px-3 md:py-2 bg-blue-500 hover:bg-blue-600 text-white text-xs md:text-sm rounded transition-colors"
									>
										<span class="md:hidden">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</span>
										<span class="hidden md:inline">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</span>
									</button>
								` : `
									<button 
										onclick="openSupplierAssignModal(${category.id}, '${category.category_name}', null)"
										class="flex-1 px-2 py-1.5 md:px-3 md:py-2 bg-yellow-500 hover:bg-yellow-600 text-white text-xs md:text-sm rounded transition-colors"
									>
										<span class="md:hidden">‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</span>
										<span class="hidden md:inline">‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å</span>
									</button>
								`}
								<button 
									onclick="deleteCategory(${category.id}, '${category.category_name}')"
									class="px-2 py-1.5 md:px-3 md:py-2 bg-red-500 hover:bg-red-600 text-white text-xs md:text-sm rounded transition-colors"
								>
									<span class="md:hidden">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</span>
									<span class="hidden md:inline">üóëÔ∏è</span>
								</button>
							</div>
						</div>
					`;
				});
				
				html += '</div>';
				container.innerHTML = html;
			}
			
			// Load orders grouped by categories
			async function loadOrdersByCategory() {
				console.log('üìã Loading orders by category...');
				try {
					const response = await fetch('/api/orders-by-category');
					const data = await response.json();
					
					if (data.success) {
						displayOrdersByCategory(data.data);
					} else {
						console.error('‚ùå Failed to load orders by category:', data.error);
						displayOrdersByCategory([]);
					}
				} catch (error) {
					console.error('‚ùå Error loading orders by category:', error);
					displayOrdersByCategory([]);
				}
			}
			
			// Display orders grouped by date and categories
			function displayOrdersByCategory(ordersByDate) {
				const container = document.getElementById('ordersByCategory');
				
				if (!container) {
					console.error('‚ùå Orders by category container not found!');
					return;
				}
				
				if (!ordersByDate || ordersByDate.length === 0) {
					container.innerHTML = `
						<div class="text-center text-gray-500 py-8">
							<span class="text-4xl mb-4 block">üìã</span>
							<p class="text-lg mb-2">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
							<p class="text-sm">–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è</p>
						</div>
					`;
					return;
				}
				
				let html = '<div class="space-y-6">';
				
				// Loop through each date group
				ordersByDate.forEach((dateGroup, dateIndex) => {
					html += `
						<div class="${dateIndex > 0 ? 'mt-8' : ''}">
							<div class="flex justify-between items-center mb-4">
								<h3 class="text-lg font-bold text-gray-900">üìÖ ${dateGroup.displayDate}</h3>
								<div class="flex items-center gap-2">
									<button 
										onclick="openAddMissingProductsForDate('${dateGroup.date}', '${dateGroup.displayDate}')" 
										class="px-2 py-1 bg-green-600 hover:bg-green-700 text-white text-xs font-medium rounded transition-colors"
									>
										‚ûï –î–æ–±–∞–≤–∏—Ç—å
									</button>
									<span class="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full">
										${dateGroup.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π
									</span>
								</div>
							</div>
							
							<!-- Desktop: Grid layout, Mobile: Single column -->
							<div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
					`;
					
					// Group categories by supplier for this date
					const supplierGroups = {};
					dateGroup.categories.forEach(category => {
						const hasSupplier = category.supplier && category.supplier.name;
						const supplierKey = hasSupplier ? category.supplier.id : 'no-supplier';
						
						if (!supplierGroups[supplierKey]) {
							supplierGroups[supplierKey] = {
								supplier: hasSupplier ? category.supplier : null,
								categories: [],
								totalItems: 0
							};
						}
						
						supplierGroups[supplierKey].categories.push(category);
						supplierGroups[supplierKey].totalItems += category.items.length;
					});
					
					// Display each supplier group
					Object.values(supplierGroups).forEach(supplierGroup => {
						const hasSupplier = supplierGroup.supplier !== null;
						const supplierInfo = supplierGroup.supplier;
						const hasPhone = hasSupplier && supplierInfo.phone;
						const allCategoryIds = supplierGroup.categories.map(cat => cat.categoryId);
						const allItems = supplierGroup.categories.flatMap(cat => cat.items);
						
						html += `
							<div class="bg-gray-50 rounded-lg p-3">
								<!-- Supplier Header -->
								<div class="flex flex-col sm:flex-row sm:justify-between sm:items-start mb-3">
									<div>
										${hasSupplier ? `
											<h4 class="font-medium text-gray-900 mb-1">üì¶ ${supplierInfo.name}</h4>
											${hasPhone ? `
												<div class="text-xs text-gray-500">üì± ${supplierInfo.phone}</div>
											` : `
												<div class="text-xs text-red-500">‚ö†Ô∏è –ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞</div>
											`}
										` : `
											<h4 class="font-medium text-red-600 mb-1">‚ö†Ô∏è –ë–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</h4>
											<div class="text-xs text-gray-500">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</div>
										`}
									</div>
									<span class="text-xs text-gray-500 self-start sm:self-center">
										${supplierGroup.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, ${allItems.length} —Ç–æ–≤–∞—Ä–æ–≤
									</span>
								</div>
								
								<!-- Categories and Items -->
								<div class="space-y-2 mb-3">
									${supplierGroup.categories.map(category => `
										<div class="border-l-2 border-gray-300 pl-3">
											<div class="font-medium text-sm text-gray-800 mb-1">${category.categoryName}</div>
											<div class="space-y-1 text-xs max-h-24 overflow-y-auto">
												${category.items.map(item => `
													<div class="flex justify-between">
														<span class="truncate pr-2">‚Ä¢ ${item.name}</span>
														<span class="font-medium whitespace-nowrap">${item.quantity} ${item.unit}</span>
													</div>
												`).join('')}
											</div>
										</div>
									`).join('')}
								</div>
								
								<!-- Action Buttons -->
								<div class="flex flex-col sm:flex-row gap-2">
									${hasSupplier ? `
										<button 
											onclick="sendSupplierOrdersToSupplier('${dateGroup.date}', [${allCategoryIds.join(',')}], '${supplierInfo.name}', ${supplierInfo.id})"
											${!hasPhone ? 'disabled' : ''}
											class="flex-1 px-2 py-1.5 sm:px-3 sm:py-2 text-xs sm:text-sm rounded transition-colors ${hasPhone ? 'bg-green-500 hover:bg-green-600 text-white' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}"
										>
											<span class="sm:hidden">üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –≤ WhatsApp</span>
											<span class="hidden sm:inline">üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ</span>
										</button>
									` : `
										<div class="flex-1 flex flex-wrap gap-1">
											${supplierGroup.categories.map(category => `
												<button 
													onclick="openSupplierAssignModal(${category.categoryId}, '${category.categoryName}', null)"
													class="px-2 py-1 bg-yellow-500 hover:bg-yellow-600 text-white text-xs rounded transition-colors"
												>
													${category.categoryName}
												</button>
											`).join('')}
										</div>
									`}
									
									${hasSupplier ? `
										<button 
											onclick="editSupplierCategories(${supplierInfo.id}, '${supplierInfo.name}', [${allCategoryIds.join(',')}])"
											class="px-2 py-1.5 sm:px-3 sm:py-2 bg-blue-500 hover:bg-blue-600 text-white text-xs sm:text-sm rounded transition-colors"
										>
											<span class="sm:hidden">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</span>
											<span class="hidden sm:inline">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</span>
										</button>
									` : ''}
								</div>
							</div>
						`;
					});
					
					html += `
							</div>
						</div>
					`;
				});
				
				html += '</div>';
				container.innerHTML = html;
			}
			
			// Send multiple categories to supplier (consolidated order)
			async function sendSupplierOrdersToSupplier(orderDate, categoryIds, supplierName, supplierId) {
				console.log(`üì§ Sending consolidated order to supplier: ${supplierName} for date: ${orderDate}`);
				console.log(`Categories: ${categoryIds.join(', ')}`);
				
				try {
					// Send all categories for this supplier at once
					const promises = categoryIds.map(categoryId => 
						fetch('/api/send-category-to-supplier', {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json'
							},
							body: JSON.stringify({
								categoryId: categoryId,
								supplierId: supplierId
							})
						})
					);
					
					const responses = await Promise.all(promises);
					const results = await Promise.all(responses.map(r => r.json()));
					
					const successCount = results.filter(r => r.success).length;
					const failCount = results.filter(r => !r.success).length;
					
					if (successCount > 0) {
						alert(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫—É "${supplierName}"`);
						loadOrdersByCategory(); // Refresh the display
					}
					
					if (failCount > 0) {
						alert(`‚ö†Ô∏è ${failCount} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å`);
					}
					
				} catch (error) {
					console.error('‚ùå Error sending consolidated order:', error);
					alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É');
				}
			}
			
			// Edit supplier assignments for multiple categories
			function editSupplierCategories(supplierId, supplierName, categoryIds) {
				alert(`–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è ${categoryIds.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.\n\n–ü–æ—Å—Ç–∞–≤—â–∏–∫: ${supplierName}\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryIds.join(', ')}`);
				// TODO: Implement bulk supplier assignment modal
			}

			// Send category orders to supplier (legacy function - kept for backward compatibility)
			async function sendCategoryToSupplier(orderDate, categoryId, categoryName, supplierId) {
				if (!confirm(`–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" –∑–∞ ${orderDate} –ø–æ—Å—Ç–∞–≤—â–∏–∫—É —á–µ—Ä–µ–∑ WhatsApp?`)) {
					return;
				}
				
				try {
					// First, get the category data to create WhatsApp message
					const response = await fetch('/api/orders-by-category');
					const data = await response.json();
					
					if (!data.success) {
						throw new Error('Failed to load category data');
					}
					
					// Find the specific date group and category
					let category = null;
					let dateDisplayName = '';
					
					for (const dateGroup of data.data) {
						if (dateGroup.date === orderDate) {
							dateDisplayName = dateGroup.displayDate;
							category = dateGroup.categories.find(cat => cat.categoryId === categoryId);
							break;
						}
					}
					
					if (!category || !category.supplier || !category.supplier.phone) {
						throw new Error('–ü–æ—Å—Ç–∞–≤—â–∏–∫ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
					}
					
					// Generate WhatsApp message
					let message = `üìã –ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ - ${dateDisplayName}\n\n`;
					message += `üè™ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}\n`;
					message += `üì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${category.supplier.name}\n\n`;
					
					category.items.forEach(item => {
						message += `‚Ä¢ ${item.name} - ${item.quantity} ${item.unit}\n`;
					});
					
					message += `\nüìä –ò—Ç–æ–≥–æ: ${category.items.length} —Ç–æ–≤–∞—Ä–æ–≤`;
					
					// Send via WhatsApp
					const encodedMessage = encodeURIComponent(message);
					const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
					
					let whatsappUrl;
					if (isMobile) {
						whatsappUrl = `whatsapp://send?phone=${category.supplier.phone}&text=${encodedMessage}`;
					} else {
						whatsappUrl = `https://web.whatsapp.com/send?phone=${category.supplier.phone}&text=${encodedMessage}`;
					}
					
					// Open WhatsApp
					window.open(whatsappUrl, '_blank');
					
					// Mark as sent in database
					const sendResponse = await fetch('/api/send-category-to-supplier', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ 
							categoryId: categoryId, 
							supplierId: supplierId 
						})
					});
					
					const sendData = await sendResponse.json();
					
					if (sendData.success) {
						showToast(
							`‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WhatsApp: ${category.supplier.name}`, 
							'success'
						);
						
						// Refresh the orders display
						await loadOrdersByCategory();
					} else {
						console.warn('Database update failed:', sendData.error);
						showToast(`‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WhatsApp (–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î)`, 'success');
					}
					
				} catch (error) {
					console.error('‚ùå Failed to send category to supplier:', error);
					showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É: ' + error.message, 'error');
				}
			}
			
			// Open supplier assignment modal
			function openSupplierAssignModal(categoryId, categoryName, currentSupplierId) {
				// Create and show modal for supplier assignment
				const modal = document.createElement('div');
				modal.className = 'fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center';
				modal.innerHTML = `
					<div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
						<div class="flex justify-between items-center mb-4">
							<h3 class="text-lg font-semibold">–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</h3>
							<button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-gray-600">‚úï</button>
						</div>
						<div class="mb-4">
							<p class="text-sm text-gray-600 mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <strong>${categoryName}</strong></p>
							<select id="supplierSelect" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
								<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</option>
							</select>
						</div>
						<div class="flex space-x-3">
							<button 
								onclick="assignSupplierToCategory(${categoryId}, document.getElementById('supplierSelect').value)"
								class="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg"
							>
								üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
							</button>
							<button 
								onclick="this.closest('.fixed').remove()"
								class="flex-1 px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-lg"
							>
								–û—Ç–º–µ–Ω–∞
							</button>
						</div>
					</div>
				`;
				
				document.body.appendChild(modal);
				
				// Load suppliers for the select
				loadSuppliersForModal(currentSupplierId);
			}
			
			// Load suppliers for modal
			async function loadSuppliersForModal(currentSupplierId) {
				try {
					const response = await fetch('/api/suppliers');
					const data = await response.json();
					
					if (data.success) {
						const select = document.getElementById('supplierSelect');
						data.data.forEach(supplier => {
							const option = document.createElement('option');
							option.value = supplier.id;
							option.textContent = `${supplier.name}${supplier.phone ? ` (${supplier.phone})` : ''}`;
							if (supplier.id == currentSupplierId) {
								option.selected = true;
							}
							select.appendChild(option);
						});
					}
				} catch (error) {
					console.error('Error loading suppliers for modal:', error);
				}
			}
			
			// Assign supplier to category
			async function assignSupplierToCategory(categoryId, supplierId) {
				try {
					const response = await fetch('/api/category-suppliers', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ 
							categoryId: categoryId, 
							supplierId: supplierId || null 
						})
					});
					
					const data = await response.json();
					
					if (data.success) {
						showToast('–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'success');
						
						// Close modal
						document.querySelector('.fixed.inset-0').remove();
						
						// Refresh displays
						await loadCategorySuppliers();
						await loadOrdersByCategory();
					} else {
						showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', 'error');
					}
				} catch (error) {
					console.error('Error assigning supplier to category:', error);
					showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', 'error');
				}
			}

			// SUPPLIER MANAGEMENT FUNCTIONS
			
			// Load suppliers from API
			async function loadSuppliers() {
				console.log('üîÑ Loading suppliers from API...');
				try {
					const response = await fetch('/api/suppliers');
					console.log('üì° Suppliers API response status:', response.status);
					
					const data = await response.json();
					console.log('üìä Suppliers API response data:', data);
					
					if (data.success) {
						console.log('‚úÖ Successfully loaded', data.data.length, 'suppliers');
						if (data.usingFallback) {
							console.log('‚ö†Ô∏è Using fallback suppliers (not tenant-specific)');
						}
						displaySuppliers(data.data);
					} else {
						console.error('‚ùå Failed to load suppliers:', data.error);
						displaySuppliers([]); // Show empty state
					}
				} catch (error) {
					console.error('‚ùå Error loading suppliers:', error);
					displaySuppliers([]); // Show empty state
				}
			}
			
			// Display suppliers in the UI
			function displaySuppliers(suppliers) {
				console.log('üñ•Ô∏è Displaying suppliers:', suppliers);
				const container = document.getElementById('suppliersManagement');
				
				if (!container) {
					console.error('‚ùå Suppliers container not found!');
					return;
				}
				
				if (!suppliers || suppliers.length === 0) {
					console.log('üìã No suppliers to display, showing empty state');
					container.innerHTML = `
						<div class="text-center text-gray-500 py-8">
							<span class="text-4xl mb-4 block">üè¢</span>
							<p class="text-lg mb-2">–ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</p>
							<p class="text-sm">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</p>
						</div>
					`;
					return;
				}
				
				// Desktop: Grid layout, Mobile: Single column
				let suppliersHtml = '<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">';
				suppliers.forEach((supplier, index) => {
					const createdDate = new Date(supplier.created_at).toLocaleDateString('ru-RU');
					
					suppliersHtml += `
						<div class="bg-gray-50 rounded-lg p-3">
							<!-- Mobile: Full layout, Desktop: Compact header -->
							<div class="flex flex-col md:flex-row md:justify-between md:items-start mb-2">
								<h4 class="font-medium text-gray-900 mb-1 md:mb-0">${supplier.name}</h4>
								<span class="text-xs text-gray-500 self-start md:self-center">${createdDate}</span>
								</div>
							
							${supplier.phone ? `
								<div class="text-sm text-gray-600 mb-1">üì± ${supplier.phone}</div>
							` : `
								<div class="text-sm text-red-500 mb-1">‚ö†Ô∏è –ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞</div>
							`}
							
							${supplier.contact_info ? `
								<div class="text-xs text-gray-500 mb-3 truncate" title="${supplier.contact_info}">${supplier.contact_info}</div>
							` : ''}
							
							<!-- Mobile: Full width buttons, Desktop: Compact buttons -->
							<div class="flex flex-col md:flex-row gap-2 mt-2">
									<button 
										onclick="editSupplier(${supplier.id})" 
									class="flex-1 px-2 py-1.5 md:px-3 md:py-2 bg-blue-500 hover:bg-blue-600 text-white text-xs md:text-sm rounded transition-colors"
									>
									<span class="md:hidden">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</span>
									<span class="hidden md:inline">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</span>
									</button>
									<button 
										onclick="deleteSupplier(${supplier.id})" 
									class="px-2 py-1.5 md:px-3 md:py-2 bg-red-500 hover:bg-red-600 text-white text-xs md:text-sm rounded transition-colors"
									>
									<span class="md:hidden">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</span>
									<span class="hidden md:inline">üóëÔ∏è</span>
									</button>
								</div>
						</div>
					`;
				});
				
				suppliersHtml += '</div>';
				container.innerHTML = suppliersHtml;
			}
			
			// Open add supplier modal
			function addNewSupplier() {
				document.getElementById('addSupplierModal').classList.remove('hidden');
				document.getElementById('newSupplierName').focus();
			}
			
			// Variables to track selected supplier in category modal
			let selectedSupplierId = null;

			// Load suppliers for category modal (inline list)
			async function loadSuppliersForCategoryModal() {
				try {
					const response = await fetch('/api/suppliers');
					const data = await response.json();
					
					const container = document.getElementById('suppliersList');
					if (container) {
						if (data.success && data.data && data.data.length > 0) {
							let html = '';
							
							// Add "No supplier" option
							html += `
								<label class="flex items-center p-2 hover:bg-gray-50 rounded cursor-pointer">
									<input type="radio" name="categorySupplier" value="" class="mr-2" ${!selectedSupplierId ? 'checked' : ''} onchange="selectSupplier('')">
									<span class="text-sm text-gray-700">–ë–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</span>
								</label>
							`;
							
							// Add existing suppliers
							data.data.forEach(supplier => {
								html += `
									<label class="flex items-center p-2 hover:bg-gray-50 rounded cursor-pointer">
										<input type="radio" name="categorySupplier" value="${supplier.id}" class="mr-2" ${selectedSupplierId == supplier.id ? 'checked' : ''} onchange="selectSupplier(${supplier.id})">
										<div class="flex-1">
											<div class="text-sm font-medium text-gray-900">${supplier.name}</div>
											${supplier.phone ? `<div class="text-xs text-gray-500">üì± ${supplier.phone}</div>` : ''}
										</div>
									</label>
								`;
							});
							
							container.innerHTML = html;
						} else {
							container.innerHTML = `
								<label class="flex items-center p-2 hover:bg-gray-50 rounded cursor-pointer">
									<input type="radio" name="categorySupplier" value="" class="mr-2" checked onchange="selectSupplier('')">
									<span class="text-sm text-gray-700">–ë–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</span>
								</label>
							`;
						}
					}
				} catch (error) {
					console.error('Error loading suppliers for category modal:', error);
					const container = document.getElementById('suppliersList');
					if (container) {
						container.innerHTML = `
							<label class="flex items-center p-2 hover:bg-gray-50 rounded cursor-pointer">
								<input type="radio" name="categorySupplier" value="" class="mr-2" checked onchange="selectSupplier('')">
								<span class="text-sm text-gray-700">–ë–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</span>
							</label>
						`;
					}
				}
			}

			// Select supplier in category modal
			function selectSupplier(supplierId) {
				selectedSupplierId = supplierId || null;
			}

			// Show inline add supplier form
			function showAddSupplierForm() {
				document.getElementById('addSupplierBtn').classList.add('hidden');
				document.getElementById('inlineSupplierForm').classList.remove('hidden');
				document.getElementById('inlineSupplierName').focus();
			}

			// Hide inline add supplier form
			function hideAddSupplierForm() {
				document.getElementById('addSupplierBtn').classList.remove('hidden');
				document.getElementById('inlineSupplierForm').classList.add('hidden');
				// Clear form
				document.getElementById('inlineSupplierName').value = '';
				document.getElementById('inlineSupplierPhone').value = '';
				document.getElementById('inlineSupplierContact').value = '';
			}

			// Create supplier inline
			async function createInlineSupplier() {
				const name = document.getElementById('inlineSupplierName').value.trim();
				const phone = document.getElementById('inlineSupplierPhone').value.trim();
				const contact_info = document.getElementById('inlineSupplierContact').value.trim();
				
				if (!name) {
					alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞');
					return;
				}
				
				try {
					const response = await fetch('/api/suppliers', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify({
							name: name,
							phone: phone || null,
							contact_info: contact_info || null
						})
					});
					
					const data = await response.json();
					
					if (data.success) {
						// Hide the form
						hideAddSupplierForm();
						
						// Reload the suppliers list
						await loadSuppliersForCategoryModal();
						
						// Auto-select the newly created supplier
						selectedSupplierId = data.data.id;
						
						// Update the radio buttons to reflect the selection
						const radioButtons = document.querySelectorAll('input[name="categorySupplier"]');
						radioButtons.forEach(radio => {
							radio.checked = radio.value == selectedSupplierId;
						});
						
						alert('–ü–æ—Å—Ç–∞–≤—â–∏–∫ "' + name + '" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–±—Ä–∞–Ω!');
					} else {
						alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ' + data.error);
					}
				} catch (error) {
					console.error('Error creating supplier:', error);
					alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
				}
			}
			
			// Close add supplier modal
			function closeAddSupplierModal() {
				document.getElementById('addSupplierModal').classList.add('hidden');
				document.getElementById('newSupplierName').value = '';
				document.getElementById('newSupplierPhone').value = '';
				document.getElementById('newSupplierContact').value = '';
			}
			
			// Create new supplier
			async function createSupplier() {
				const name = document.getElementById('newSupplierName').value.trim();
				const phone = document.getElementById('newSupplierPhone').value.trim();
				const contact_info = document.getElementById('newSupplierContact').value.trim();
				
				if (!name) {
					alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞');
					return;
				}
				
				try {
					const response = await fetch('/api/suppliers', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify({
							name: name,
							phone: phone || null,
							contact_info: contact_info || null
						})
					});
					
					const data = await response.json();
					
					if (data.success) {
						alert('–ü–æ—Å—Ç–∞–≤—â–∏–∫ "' + name + '" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
						closeAddSupplierModal();
						loadSuppliers(); // Refresh the list
						
						// If we came from category modal, refresh the category supplier dropdown
						if (window.categoryModalContext) {
							loadSuppliersForCategoryModal();
							window.categoryModalContext = false; // Reset the flag
						}
					} else {
						alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ' + data.error);
					}
				} catch (error) {
					console.error('Error creating supplier:', error);
					alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
				}
			}
			
			// Edit supplier (placeholder)
			function editSupplier(supplierId) {
				alert('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ. ID: ' + supplierId);
			}
			
			// Delete supplier (placeholder)
			function deleteSupplier(supplierId) {
				if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞?')) {
					alert('–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ. ID: ' + supplierId);
				}
			}


			// ========== CATEGORIES MANAGEMENT ==========
			
			// Load categories
			async function loadCategories() {
				console.log('üè∑Ô∏è Loading categories...');
				try {
					const response = await fetch('/api/get-categories');
					const data = await response.json();
					
					if (data.success) {
						displayCategories(data.data);
						updateCategoryDropdowns(data.data);
					} else {
						console.error('‚ùå Failed to load categories:', data.error);
						displayCategories([]);
					}
				} catch (error) {
					console.error('‚ùå Error loading categories:', error);
					displayCategories([]);
				}
			}
			
			// Display categories (integrated with existing categorySuppliers display)
			function displayCategories(categories) {
				// Categories are now displayed as part of displayCategorySuppliers
				// This function is kept for backward compatibility but does nothing
				console.log('üìã Categories loaded:', categories.length);
			}
			
			// Update category dropdowns throughout the app
			function updateCategoryDropdowns(categories) {
				const newProductCategorySelect = document.getElementById('newProductCategory');
				const newCategorySupplierSelect = document.getElementById('newCategorySupplier');
				
				if (newProductCategorySelect) {
					newProductCategorySelect.innerHTML = '<option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
					categories.forEach(category => {
						newProductCategorySelect.innerHTML += `<option value="${category.id}">${category.name}</option>`;
					});
				}
				
				// Load suppliers for category modal
				if (newCategorySupplierSelect) {
					loadSuppliersForCategoryModal();
				}
			}
			
			// Load suppliers for category modal
			async function loadSuppliersForCategoryModal() {
				try {
					const response = await fetch('/api/suppliers');
					const data = await response.json();
					
					const select = document.getElementById('newCategorySupplier');
					if (select && data.success) {
						select.innerHTML = '<option value="">–ë–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</option>';
						data.data.forEach(supplier => {
							select.innerHTML += `<option value="${supplier.id}">${supplier.name}</option>`;
						});
					}
				} catch (error) {
					console.error('Error loading suppliers for category modal:', error);
				}
			}
			
			// Add new category
			function addNewCategory() {
				document.getElementById('addCategoryModal').classList.remove('hidden');
				document.getElementById('newCategoryName').focus();
				// Load suppliers for the inline list
				loadSuppliersForCategoryModal();
				// Reset selected supplier
				selectedSupplierId = null;
			}
			
			// Close add category modal
			function closeAddCategoryModal() {
				document.getElementById('addCategoryModal').classList.add('hidden');
				document.getElementById('newCategoryName').value = '';
				// Reset supplier selection
				selectedSupplierId = null;
				// Hide inline supplier form if it's open
				hideAddSupplierForm();
			}
			
			// Create category
			async function createCategory() {
				const name = document.getElementById('newCategoryName').value.trim();
				const supplierId = selectedSupplierId;
				
				if (!name) {
					alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
					return;
				}
				
				try {
					const response = await fetch('/api/categories', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ 
							name, 
							supplier_id: supplierId ? parseInt(supplierId) : null 
						})
					});
					
					const data = await response.json();
					
					if (data.success) {
						alert(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}" —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
						closeAddCategoryModal();
						loadCategorySuppliers(); // Refresh the category suppliers display
						loadCategoriesForProducts(); // Refresh product categorization dropdowns
					} else {
						alert('–û—à–∏–±–∫–∞: ' + data.error);
					}
				} catch (error) {
					console.error('Error creating category:', error);
					alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
				}
			}
			
			// Edit category (placeholder for future implementation)
			function editCategory(id, name) {
				alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${name}" (ID: ${id}) –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ`);
			}
			
			// Delete category
			async function deleteCategory(id, name) {
				if (!confirm(`–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${name}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) return;
				
				try {
					const response = await fetch('/api/categories', {
						method: 'DELETE',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ id })
					});
					
					const data = await response.json();
					
					if (data.success) {
						alert(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}" —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
						loadCategorySuppliers(); // Refresh the category suppliers display
						loadCategoriesForProducts(); // Refresh product categorization dropdowns
					} else {
						alert('–û—à–∏–±–∫–∞: ' + data.error);
					}
				} catch (error) {
					console.error('Error deleting category:', error);
					alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
				}
			}

			// ========== DEPARTMENTS MANAGEMENT ==========
			
			// Load departments
			async function loadDepartments() {
				console.log('üè¢ Loading departments...');
				try {
					const response = await fetch('/api/departments');
					const data = await response.json();
					
					if (data.success) {
						displayDepartments(data.data);
						updateDepartmentDropdowns(data.data);
					} else {
						console.error('‚ùå Failed to load departments:', data.error);
						displayDepartments([]);
					}
				} catch (error) {
					console.error('‚ùå Error loading departments:', error);
					displayDepartments([]);
				}
			}
			
			// Display departments
			function displayDepartments(departments) {
				const container = document.getElementById('departmentsManagement');
				
				if (!container) {
					console.error('‚ùå Departments container not found!');
					return;
				}
				
				if (!departments || departments.length === 0) {
					container.innerHTML = `
						<div class="text-center text-gray-500 py-8">
							<span class="text-4xl mb-4 block">üè¢</span>
							<p class="text-lg mb-2">–ù–µ—Ç –æ—Ç–¥–µ–ª–æ–≤</p>
							<p class="text-sm">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ç–¥–µ–ª</p>
						</div>
					`;
					return;
				}
				
				let html = '<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">';
				
				departments.forEach(dept => {
					const isPosterDept = dept.poster_storage_id !== null;
					html += `
						<div class="border border-gray-200 rounded-lg p-4 ${isPosterDept ? 'bg-blue-50 border-blue-200' : 'bg-white'}">
							<div class="flex justify-between items-start mb-3">
								<div class="flex items-center space-x-2">
									<span class="text-2xl">${dept.emoji}</span>
									<div>
										<h4 class="font-medium text-gray-900">${dept.name}</h4>
										${isPosterDept ? '<span class="text-xs text-blue-600">üì° Poster</span>' : '<span class="text-xs text-green-600">üì¶ –ö–∞—Å—Ç–æ–º–Ω—ã–π</span>'}
									</div>
								</div>
								${!isPosterDept ? `
									<div class="flex space-x-1">
										<button 
											onclick="editDepartment(${dept.id}, '${dept.name}', '${dept.emoji}')"
											class="px-2 py-1 text-xs bg-blue-100 hover:bg-blue-200 text-blue-700 rounded"
										>
											‚úèÔ∏è
										</button>
										<button 
											onclick="deleteDepartment(${dept.id}, '${dept.name}')"
											class="px-2 py-1 text-xs bg-red-100 hover:bg-red-200 text-red-700 rounded"
										>
											üóëÔ∏è
										</button>
									</div>
								` : ''}
							</div>
							<p class="text-sm text-gray-600">${dept.custom_products_count || 0} —Ç–æ–≤–∞—Ä–æ–≤</p>
						</div>
					`;
				});
				
				html += '</div>';
				container.innerHTML = html;
			}
			
			// Update department dropdowns
			function updateDepartmentDropdowns(departments) {
				const filterSelect = document.getElementById('departmentFilter');
				const newProductSelect = document.getElementById('newProductDepartment');
				
				if (filterSelect) {
					filterSelect.innerHTML = '<option value="">–í—Å–µ –æ—Ç–¥–µ–ª—ã</option>';
					departments.forEach(dept => {
						filterSelect.innerHTML += `<option value="${dept.id}">${dept.emoji} ${dept.name}</option>`;
					});
				}
				
				if (newProductSelect) {
					newProductSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª</option>';
					departments.forEach(dept => {
						newProductSelect.innerHTML += `<option value="${dept.id}">${dept.emoji} ${dept.name}</option>`;
					});
				}
			}
			
			// Add new department
			function addNewDepartment() {
				document.getElementById('addDepartmentModal').classList.remove('hidden');
				document.getElementById('newDepartmentName').focus();
			}
			
			// Close add department modal
			function closeAddDepartmentModal() {
				document.getElementById('addDepartmentModal').classList.add('hidden');
				document.getElementById('newDepartmentName').value = '';
				document.getElementById('newDepartmentEmoji').value = '';
			}
			
			// Create department
			async function createDepartment() {
				const name = document.getElementById('newDepartmentName').value.trim();
				const emoji = document.getElementById('newDepartmentEmoji').value.trim();
				
				if (!name) {
					alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞');
					return;
				}
				
				try {
					const response = await fetch('/api/departments', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ name, emoji: emoji || 'üì¶' })
					});
					
					const data = await response.json();
					
					if (data.success) {
						alert(`–û—Ç–¥–µ–ª "${name}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
						closeAddDepartmentModal();
						loadDepartments();
					} else {
						alert('–û—à–∏–±–∫–∞: ' + data.error);
					}
				} catch (error) {
					console.error('Error creating department:', error);
					alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞');
				}
			}
			
			// Delete department
			async function deleteDepartment(id, name) {
				if (!confirm(`–£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª "${name}"?`)) return;
				
				try {
					const response = await fetch('/api/departments', {
						method: 'DELETE',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ id })
					});
					
					const data = await response.json();
					
					if (data.success) {
						alert(data.message);
						loadDepartments();
						loadCustomProducts(); // Refresh products list
					} else {
						alert('–û—à–∏–±–∫–∞: ' + data.error);
					}
				} catch (error) {
					console.error('Error deleting department:', error);
					alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞');
				}
			}
			
			// ========== CUSTOM PRODUCTS MANAGEMENT ==========
			
			// Load custom products
			async function loadCustomProducts() {
				console.log('üì¶ Loading custom products...');
				try {
					const departmentId = document.getElementById('departmentFilter')?.value || '';
					const url = departmentId ? `/api/custom-products?department_id=${departmentId}` : '/api/custom-products';
					
					const response = await fetch(url);
					const data = await response.json();
					
					if (data.success) {
						displayCustomProducts(data.data);
					} else {
						console.error('‚ùå Failed to load custom products:', data.error);
						displayCustomProducts([]);
					}
				} catch (error) {
					console.error('‚ùå Error loading custom products:', error);
					displayCustomProducts([]);
				}
			}
			
			// Display custom products
			function displayCustomProducts(products) {
				const container = document.getElementById('customProductsManagement');
				
				if (!container) {
					console.error('‚ùå Custom products container not found!');
					return;
				}
				
				if (!products || products.length === 0) {
					container.innerHTML = `
						<div class="text-center text-gray-500 py-8">
							<span class="text-4xl mb-4 block">üì¶</span>
							<p class="text-lg mb-2">–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</p>
							<p class="text-sm">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä</p>
						</div>
					`;
					return;
				}
				
				// Group by department
				const groupedByDept = {};
				products.forEach(product => {
					const deptKey = product.department_name || '–ë–µ–∑ –æ—Ç–¥–µ–ª–∞';
					if (!groupedByDept[deptKey]) {
						groupedByDept[deptKey] = [];
					}
					groupedByDept[deptKey].push(product);
				});
				
				let html = '<div class="space-y-6">';
				
				Object.keys(groupedByDept).forEach(deptName => {
					const deptProducts = groupedByDept[deptName];
					html += `
						<div class="border border-gray-200 rounded-lg">
							<div class="bg-gray-50 px-4 py-3 border-b border-gray-200">
								<h3 class="font-medium text-gray-900">${deptProducts[0]?.department_emoji || 'üì¶'} ${deptName} (${deptProducts.length})</h3>
							</div>
							<div class="p-4">
								<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
					`;
					
					deptProducts.forEach(product => {
						html += `
							<div class="border border-gray-200 rounded p-3">
								<div class="flex justify-between items-start mb-2">
									<h4 class="font-medium text-gray-900">${product.name}</h4>
									<div class="flex space-x-1">
										<button 
											onclick="editCustomProduct(${product.id})"
											class="px-2 py-1 text-xs bg-blue-100 hover:bg-blue-200 text-blue-700 rounded"
										>
											‚úèÔ∏è
										</button>
										<button 
											onclick="deleteCustomProduct(${product.id}, '${product.name}')"
											class="px-2 py-1 text-xs bg-red-100 hover:bg-red-200 text-red-700 rounded"
										>
											üóëÔ∏è
										</button>
									</div>
								</div>
								<div class="text-sm text-gray-600 space-y-1">
									<div>–ï–¥–∏–Ω–∏—Ü–∞: ${product.unit}</div>
									<div>–ú–∏–Ω. –∫–æ–ª-–≤–æ: ${product.min_quantity}</div>
									<div>–¢–µ–∫—É—â–µ–µ: ${product.current_quantity || 0}</div>
									${product.category_name ? `<div>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category_name}</div>` : ''}
								</div>
							</div>
						`;
					});
					
					html += `
								</div>
							</div>
						</div>
					`;
				});
				
				html += '</div>';
				container.innerHTML = html;
			}
			
			// Add new custom product
			function addNewCustomProduct() {
				// Load categories for the dropdown
				loadCategoriesForProductModal();
				document.getElementById('addCustomProductModal').classList.remove('hidden');
				document.getElementById('newProductName').focus();
			}
			
			// Close add custom product modal
			function closeAddCustomProductModal() {
				document.getElementById('addCustomProductModal').classList.add('hidden');
				document.getElementById('newProductName').value = '';
				document.getElementById('newProductDepartment').value = '';
				document.getElementById('newProductUnit').value = '—à—Ç';
				document.getElementById('newProductMinQty').value = '1';
				document.getElementById('newProductCategory').value = '';
			}
			
			// Load categories for product modal
			async function loadCategoriesForProductModal() {
				try {
					const response = await fetch('/api/get-categories');
					const data = await response.json();
					
					const select = document.getElementById('newProductCategory');
					if (select) {
						select.innerHTML = '<option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
						
						// Handle both 'data' and 'categories' fields for backward compatibility
						const categories = data.data || data.categories || [];
						
						if (data.success && categories.length > 0) {
							categories.forEach(category => {
								select.innerHTML += `<option value="${category.id}">${category.name}</option>`;
							});
						}
					}
				} catch (error) {
					console.error('Error loading categories:', error);
					// Still populate the select with default option even if API fails
					const select = document.getElementById('newProductCategory');
					if (select) {
						select.innerHTML = '<option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
					}
				}
			}
			
			// Create custom product
			async function createCustomProduct() {
				const name = document.getElementById('newProductName').value.trim();
				const departmentId = document.getElementById('newProductDepartment').value;
				const unit = document.getElementById('newProductUnit').value.trim();
				const minQuantity = parseInt(document.getElementById('newProductMinQty').value) || 1;
				const categoryId = document.getElementById('newProductCategory').value || null;
				
				if (!name || !departmentId) {
					alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª');
					return;
				}
				
				try {
					const response = await fetch('/api/custom-products', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({
							name,
							departmentId: parseInt(departmentId),
							unit: unit || '—à—Ç',
							minQuantity,
							categoryId: categoryId ? parseInt(categoryId) : null,
							currentQuantity: 0
						})
					});
					
					const data = await response.json();
					
					if (data.success) {
						alert(`–¢–æ–≤–∞—Ä "${name}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
						closeAddCustomProductModal();
						loadCustomProducts();
					} else {
						alert('–û—à–∏–±–∫–∞: ' + data.error);
					}
				} catch (error) {
					console.error('Error creating custom product:', error);
					alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
				}
			}
			
			// Delete custom product
			async function deleteCustomProduct(id, name) {
				if (!confirm(`–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${name}"?`)) return;
				
				try {
					const response = await fetch('/api/custom-products', {
						method: 'DELETE',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ id })
					});
					
					const data = await response.json();
					
					if (data.success) {
						alert(data.message);
						loadCustomProducts();
					} else {
						alert('–û—à–∏–±–∫–∞: ' + data.error);
					}
				} catch (error) {
					console.error('Error deleting custom product:', error);
					alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
				}
			}

			// Tab switching functionality
			function switchTab(tabName) {
				// Hide all tab contents
				const tabContents = document.querySelectorAll('.tab-content');
				tabContents.forEach(content => {
					content.classList.add('hidden');
				});
				
				// Remove active class from all tabs
				const tabButtons = document.querySelectorAll('[id^="tab-"]');
				tabButtons.forEach(button => {
					button.classList.remove('border-blue-500', 'text-blue-600');
					button.classList.add('border-transparent', 'text-gray-500');
				});
				
				// Show selected tab content
				const selectedContent = document.getElementById(`content-${tabName}`);
				if (selectedContent) {
					selectedContent.classList.remove('hidden');
				}
				
				// Add active class to selected tab
				const selectedTab = document.getElementById(`tab-${tabName}`);
				if (selectedTab) {
					selectedTab.classList.remove('border-transparent', 'text-gray-500');
					selectedTab.classList.add('border-blue-500', 'text-blue-600');
				}
				
				// Load data for specific tabs when they become active
				if (tabName === 'categories') {
					loadCategorySuppliers();
				} else if (tabName === 'suppliers') {
					loadSuppliers();
				} else if (tabName === 'departments') {
					loadDepartments();
				} else if (tabName === 'products') {
					loadCustomProducts();
				} else if (tabName === 'orders') {
					loadOrdersByCategory();
				}
			}

			// Load data when page loads
			document.addEventListener('DOMContentLoaded', function() {
				// Load only orders data initially (default tab)
				loadOrdersByCategory();
				
				// Refresh orders data every 30 seconds (only for default tab)
				setInterval(loadOrdersByCategory, 30000);
			});

			// Missing Products Modal Functions
			let currentMissingProductsSection = null;
			let currentTargetDate = null;
			let allMissingProducts = [];
			let filteredMissingProducts = [];
			let selectedMissingProducts = {};

			// Open add missing products modal (general)
			function openAddMissingProductsModal() {
				currentTargetDate = null;
				openMissingProductsModal('–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã', '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑');
			}
			
			// Open add missing products modal for specific date
			function openAddMissingProductsForDate(date, displayDate) {
				currentTargetDate = date;
				openMissingProductsModal(`–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ ${displayDate}`, `–î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑ –Ω–∞ ${displayDate}`);
			}
			
			// Common function to open missing products modal
			function openMissingProductsModal(title, description) {
				// Update modal title and description
				document.querySelector('#addMissingProductsModal h3').textContent = title;
				document.querySelector('#addMissingProductsModal .text-sm.text-gray-600').textContent = description;
				
				document.getElementById('addMissingProductsModal').classList.remove('hidden');
				// Reset state
				currentMissingProductsSection = null;
				allMissingProducts = [];
				filteredMissingProducts = [];
				selectedMissingProducts = {};
				document.getElementById('missingProductsSearch').value = '';
				updateMissingProductsButton();
				
				// Reset section tabs
				document.querySelectorAll('.section-btn').forEach(btn => {
					btn.classList.remove('text-green-600', 'border-green-500');
					btn.classList.add('text-gray-500', 'border-transparent');
				});
			}

			// Close add missing products modal
			function closeAddMissingProductsModal() {
				document.getElementById('addMissingProductsModal').classList.add('hidden');
			}

			// Load products from a specific section
			async function loadMissingProductsSection(section) {
				currentMissingProductsSection = section;
				
				// Update tab states
				document.querySelectorAll('.section-btn').forEach(btn => {
					btn.classList.remove('text-green-600', 'border-green-500');
					btn.classList.add('text-gray-500', 'border-transparent');
				});
				event.target.classList.remove('text-gray-500', 'border-transparent');
				event.target.classList.add('text-green-600', 'border-green-500');
				
				const container = document.getElementById('missingProductsList');
				container.innerHTML = `
					<div class="text-center text-gray-500 py-8">
						<div class="animate-spin h-8 w-8 border-b-2 border-green-600 rounded-full mx-auto mb-4"></div>
						<p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
					</div>
				`;
				
				try {
					let apiUrl = '';
					switch (section) {
						case 'kitchen':
							apiUrl = '/api/kitchen-inventory';
							break;
						case 'bar':
							apiUrl = '/api/bar-inventory';
							break;
						case 'custom':
							apiUrl = '/api/combined-inventory?department=–ì–æ—Ä–Ω–∏—á–Ω–∞—è';
							break;
						case 'other':
							apiUrl = '/api/custom-products';
							break;
					}
					
					const response = await fetch(apiUrl);
					const data = await response.json();
					
					if (data.success) {
						allMissingProducts = data.data || [];
						filteredMissingProducts = [...allMissingProducts];
						displayMissingProducts();
					} else {
						throw new Error(data.error || 'Failed to load products');
					}
				} catch (error) {
					console.error('Error loading missing products:', error);
					container.innerHTML = `
						<div class="text-center text-red-500 py-8">
							<span class="text-4xl mb-2 block">‚ùå</span>
							<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</p>
							<p class="text-sm text-gray-500">${error.message}</p>
						</div>
					`;
				}
			}

			// Display missing products
			function displayMissingProducts() {
				const container = document.getElementById('missingProductsList');
				
				if (filteredMissingProducts.length === 0) {
					container.innerHTML = `
						<div class="text-center text-gray-500 py-8">
							<span class="text-4xl mb-2 block">üîç</span>
							<p>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
						</div>
					`;
					return;
				}
				
				let html = '';
				filteredMissingProducts.forEach(product => {
					const productId = product.id || product.product_id;
					const productName = product.name || product.product_name || product.title;
					const productUnit = product.unit || '—à—Ç';
					const isSelected = selectedMissingProducts[productId];
					
					html += `
						<div class="flex items-center justify-between p-3 border rounded-lg ${isSelected ? 'bg-green-50 border-green-300' : 'bg-gray-50 border-gray-200'}">
							<div class="flex items-center flex-1">
								<input 
									type="checkbox" 
									id="missing-product-${productId}"
									${isSelected ? 'checked' : ''}
									onchange="toggleMissingProduct(${productId}, '${productName}', '${productUnit}')"
									class="mr-3 h-4 w-4 text-green-600 rounded focus:ring-green-500"
								>
								<div>
									<label for="missing-product-${productId}" class="font-medium text-gray-900 cursor-pointer">
										${productName}
									</label>
									<div class="text-sm text-gray-500">${productUnit}</div>
								</div>
							</div>
							${isSelected ? `
								<div class="flex items-center space-x-2">
									<input 
										type="number" 
										value="${selectedMissingProducts[productId].quantity}"
										min="0.1" 
										step="0.1"
										class="w-20 px-2 py-1 border border-green-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-green-500"
										onchange="updateMissingProductQuantity(${productId}, this.value)"
									>
									<span class="text-sm text-gray-600">${productUnit}</span>
								</div>
							` : ''}
						</div>
					`;
				});
				
				container.innerHTML = html;
			}

			// Toggle missing product selection
			function toggleMissingProduct(productId, productName, unit) {
				if (selectedMissingProducts[productId]) {
					delete selectedMissingProducts[productId];
				} else {
					selectedMissingProducts[productId] = {
						id: productId,
						name: productName,
						unit: unit,
						quantity: 1,
						section: currentMissingProductsSection
					};
				}
				
				displayMissingProducts();
				updateMissingProductsButton();
			}

			// Update missing product quantity
			function updateMissingProductQuantity(productId, quantity) {
				if (selectedMissingProducts[productId]) {
					selectedMissingProducts[productId].quantity = parseFloat(quantity) || 1;
				}
			}

			// Filter missing products based on search
			function filterMissingProducts() {
				const searchTerm = document.getElementById('missingProductsSearch').value.toLowerCase();
				
				if (!searchTerm) {
					filteredMissingProducts = [...allMissingProducts];
				} else {
					filteredMissingProducts = allMissingProducts.filter(product => {
						const productName = product.name || product.product_name || product.title || '';
						return productName.toLowerCase().includes(searchTerm);
					});
				}
				
				displayMissingProducts();
			}

			// Update add button state
			function updateMissingProductsButton() {
				const btn = document.getElementById('addMissingProductsBtn');
				const selectedCount = Object.keys(selectedMissingProducts).length;
				
				if (selectedCount > 0) {
					btn.disabled = false;
					btn.textContent = `‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ (${selectedCount})`;
				} else {
					btn.disabled = true;
					btn.textContent = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ';
				}
			}

			// Add selected missing products to orders
			async function addSelectedMissingProducts() {
				const selectedCount = Object.keys(selectedMissingProducts).length;
				if (selectedCount === 0) return;
				
				const btn = document.getElementById('addMissingProductsBtn');
				const originalText = btn.textContent;
				btn.disabled = true;
				btn.textContent = '‚è≥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...';
				
				try {
					// Create order items from selected products
					const orderItems = Object.values(selectedMissingProducts).map(product => ({
						name: product.name,
						quantity: product.quantity,
						unit: product.unit
					}));
					
					// Create a new order with these items
					const orderData = {
						department: currentMissingProductsSection || 'manager',
						items: orderItems,
						status: 'pending',
						created_by: 'manager'
					};
					
					const response = await fetch('/api/orders', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify(orderData)
					});
					
					const data = await response.json();
					
					if (data.success) {
						alert(`–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${selectedCount} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑!`);
						closeAddMissingProductsModal();
						// Refresh orders display
						loadOrdersByCategory();
					} else {
						throw new Error(data.error || 'Failed to add products');
					}
				} catch (error) {
					console.error('Error adding missing products:', error);
					alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: ' + error.message);
					btn.disabled = false;
					btn.textContent = originalText;
				}
			}
		</script>
	</Layout>
