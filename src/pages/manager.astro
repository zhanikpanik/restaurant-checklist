---
import Layout from '../layouts/Layout.astro';
---

<Layout title="–ú–µ–Ω–µ–¥–∂–µ—Ä - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è">
	<div class="min-h-screen bg-gray-50 flex flex-col">
		<!-- App Header -->
		<header class="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40">
			<div class="px-4 py-3">
				<div class="flex items-center justify-between">
					<!-- Left: Spacer -->
					<div class="w-10"></div>
					
					<!-- Center: Title -->
					<div class="flex items-center space-x-2">
						<span class="text-2xl">üëî</span>
						<h1 class="text-lg font-bold text-gray-900">–ú–µ–Ω–µ–¥–∂–µ—Ä</h1>
					</div>
					
					<!-- Right: Role Switch Dropdown -->
					<div class="relative">
						<button 
							id="roleDropdownBtn"
							onclick="toggleRoleDropdown()"
							class="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors flex items-center"
							title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–æ–ª—å"
						>
							<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m0-4l-4-4"/>
							</svg>
							<svg class="w-3 h-3 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
							</svg>
						</button>
						
						<!-- Dropdown Menu -->
						<div 
							id="roleDropdown" 
							class="absolute right-0 top-full mt-1 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-50 hidden"
						>
							<div class="py-1">
								<button 
									onclick="switchToRole('bar')" 
									class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 flex items-center"
								>
									<span class="text-lg mr-2">üç∑</span>
									–ë–∞—Ä
								</button>
								<button 
									onclick="switchToRole('kitchen')" 
									class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 flex items-center"
								>
									<span class="text-lg mr-2">üç≥</span>
									–ö—É—Ö–Ω—è
								</button>
								<button 
									onclick="switchToRole('manager')" 
									class="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 flex items-center"
								>
									<span class="text-lg mr-2">üëî</span>
									–ú–µ–Ω–µ–¥–∂–µ—Ä
									<span class="ml-auto text-xs text-green-600">‚óè</span>
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</header>

		<!-- Main Content Area -->
		<main class="flex-1 p-4">
			<div class="max-w-6xl mx-auto">


				<!-- Orders Management -->
				<div class="bg-white rounded-lg border border-gray-200 mb-8">
					<div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
						<h3 class="text-lg font-semibold text-gray-900">üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</h3>
						<div class="flex space-x-2">
							<button 
								onclick="loadServerOrders()" 
								class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg"
							>
								üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
							</button>
							<button 
								onclick="sendAllOrdersToSuppliers()" 
								class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-lg"
							>
								üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
							</button>
						</div>
					</div>
					<div class="p-6">
						<div id="ordersManagement" class="space-y-4">
							<div class="text-center text-gray-500 py-8">
								<span class="text-4xl mb-4 block">üìã</span>
								<p class="text-lg mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
							</div>
						</div>
					</div>
				</div>

				<!-- Suppliers Management -->
				<div class="bg-white rounded-lg border border-gray-200 mb-8">
					<div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
						<h3 class="text-lg font-semibold text-gray-900">üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏</h3>
						<button 
							onclick="addNewSupplier()" 
							class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-medium rounded-lg"
						>
							‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
						</button>
					</div>
					<div class="p-6">
						<div id="suppliersManagement" class="space-y-4">
							<div class="text-center text-gray-500 py-8">
								<span class="text-4xl mb-4 block">üè¢</span>
								<p class="text-lg mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...</p>
							</div>
						</div>
					</div>
				</div>

				<!-- Add Product Modal -->
				<div id="addProductModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
					<div class="bg-white h-full flex flex-col">
						<!-- Header -->
						<div class="bg-blue-600 text-white px-4 py-6">
							<div class="flex items-center justify-between">
								<div class="flex items-center space-x-2">
									<span class="text-2xl">‚ûï</span>
									<h1 class="text-xl font-bold">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã</h1>
								</div>
								<button onclick="closeAddProductModal()" class="text-blue-200 hover:text-white text-2xl">‚úï</button>
							</div>
						</div>

						<!-- Tab Navigation -->
						<div class="bg-white border-b border-gray-200">
							<div class="flex">
								<button 
									id="barTab" 
									onclick="switchDepartmentTab('bar')" 
									class="flex-1 py-3 px-4 text-center font-medium text-sm border-b-2 border-transparent text-gray-500 hover:text-gray-700"
								>
									üç∑ –ë–∞—Ä
								</button>
								<button 
									id="kitchenTab" 
									onclick="switchDepartmentTab('kitchen')" 
									class="flex-1 py-3 px-4 text-center font-medium text-sm border-b-2 border-transparent text-gray-500 hover:text-gray-700"
								>
									üç≥ –ö—É—Ö–Ω—è
								</button>
							</div>
						</div>

						<!-- Search -->
						<div class="p-4 bg-gray-50 border-b border-gray-200">
							<div class="relative">
								<input 
									type="text" 
									id="productSearch" 
									placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..." 
									class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									oninput="filterProducts()"
								>
								<span class="absolute left-3 top-2.5 text-gray-400">üîç</span>
							</div>
						</div>

						<!-- Products List -->
						<div class="flex-1 overflow-y-auto">
							<div id="productsList" class="p-4">
								<div class="text-center py-8">
									<div class="animate-spin h-8 w-8 border-b-2 border-blue-600 rounded-full mx-auto mb-4"></div>
									<p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
								</div>
							</div>
						</div>

						<!-- Selected Products Summary -->
						<div id="selectedSummary" class="bg-gray-50 border-t border-gray-200 p-4 hidden">
							<div class="flex items-center justify-between mb-3">
								<span class="font-medium text-gray-900">–í—ã–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <span id="selectedCount">0</span></span>
								<button onclick="clearSelectedProducts()" class="text-sm text-red-600 hover:text-red-800">–û—á–∏—Å—Ç–∏—Ç—å</button>
							</div>
							<div class="flex space-x-3">
								<button 
									onclick="addSelectedProductsToOrder()" 
									class="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg"
								>
									‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑
								</button>
								<button 
									onclick="closeAddProductModal()" 
									class="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-lg"
								>
									–û—Ç–º–µ–Ω–∞
								</button>
							</div>
						</div>
					</div>
				</div>

				<!-- Add Supplier Modal -->
				<div id="addSupplierModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
					<div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
						<div class="flex justify-between items-center mb-4">
							<h3 class="text-lg font-semibold">üè¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</h3>
							<button onclick="closeAddSupplierModal()" class="text-gray-400 hover:text-gray-600">‚úï</button>
						</div>
						<div class="space-y-4">
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</label>
								<input 
									type="text" 
									id="newSupplierName" 
									class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
								>
							</div>
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-1">–¢–µ–ª–µ—Ñ–æ–Ω</label>
								<input 
									type="tel" 
									id="newSupplierPhone" 
									class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									placeholder="+7 (xxx) xxx-xx-xx"
								>
							</div>
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-1">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</label>
								<textarea 
									id="newSupplierContact" 
									class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
									placeholder="Email, –∞–¥—Ä–µ—Å, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
									rows="3"
								></textarea>
							</div>
							<div class="flex space-x-3 pt-4">
								<button 
									onclick="createSupplier()" 
									class="flex-1 px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-lg"
								>
									‚ûï –°–æ–∑–¥–∞—Ç—å
								</button>
								<button 
									onclick="closeAddSupplierModal()" 
									class="flex-1 px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-lg"
								>
									–û—Ç–º–µ–Ω–∞
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</main>

		<script is:inline>
			// Toggle role dropdown
			function toggleRoleDropdown() {
				const dropdown = document.getElementById('roleDropdown');
				dropdown.classList.toggle('hidden');
			}
			
			// Switch to specific role
			function switchToRole(role) {
				const dropdown = document.getElementById('roleDropdown');
				dropdown.classList.add('hidden');
				
				if (role === 'manager') {
					// Already on manager page
					return;
				} else if (role === 'bar') {
					window.location.href = '/bar';
				} else if (role === 'kitchen') {
					window.location.href = '/kitchen';
				}
			}
			
			// Close dropdown when clicking outside
			document.addEventListener('click', function(event) {
				const dropdown = document.getElementById('roleDropdown');
				const button = document.getElementById('roleDropdownBtn');
				
				if (dropdown && button && !button.contains(event.target) && !dropdown.contains(event.target)) {
					dropdown.classList.add('hidden');
				}
			});

			// Global variables (moved to product selection section)
			
			// Migrate localStorage orders to PostgreSQL
			async function migrateLocalStorageOrders() {
				try {
					const barOrders = JSON.parse(localStorage.getItem('barDeliveryOrders') || '[]');
					const kitchenOrders = JSON.parse(localStorage.getItem('kitchenDeliveryOrders') || '[]');
					
					if (barOrders.length > 0 || kitchenOrders.length > 0) {
						console.log('üîÑ Migrating localStorage orders to PostgreSQL...', {
							bar: barOrders.length,
							kitchen: kitchenOrders.length
						});
						
						const response = await fetch('/api/migrate-orders', {
							method: 'POST',
							headers: { 'Content-Type': 'application/json' },
							body: JSON.stringify({ barOrders, kitchenOrders })
						});
						
						const result = await response.json();
						if (result.success) {
							console.log('‚úÖ Migration successful:', result.migrated);
							// Clear localStorage after successful migration
							localStorage.removeItem('barDeliveryOrders');
							localStorage.removeItem('kitchenDeliveryOrders');
						} else {
							console.error('‚ùå Migration failed:', result.error);
						}
					}
				} catch (error) {
					console.error('üí• Error during migration:', error);
				}
			}
			
			// Fallback: Load orders from localStorage (if database fails)
			async function loadOrdersFromLocalStorage() {
				console.log('‚ö†Ô∏è Falling back to localStorage data...');
				
				const barOrders = JSON.parse(localStorage.getItem('barDeliveryOrders') || '[]');
				const kitchenOrders = JSON.parse(localStorage.getItem('kitchenDeliveryOrders') || '[]');
				
				console.log('üìä Manager: Loaded from localStorage - Bar:', barOrders.length, 'Kitchen:', kitchenOrders.length);
				
				// Load orders management
				loadOrdersManagement(barOrders, kitchenOrders);
			}
			
			// Load orders management section
			function loadOrdersManagement(barOrders, kitchenOrders) {
				// Update orders management UI
				const ordersContainer = document.getElementById('ordersManagement');
				if (!ordersContainer) return;
				
				let ordersHtml = '';
				
				// Bar orders section
				if (barOrders.length > 0) {
					ordersHtml += '<h4 class="font-medium text-gray-900 mb-3">üç∑ –ó–∞–∫–∞–∑—ã –±–∞—Ä–∞</h4>';
					barOrders.forEach((order, index) => {
						const status = order.db_status || order.status;
						const statusColor = status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
										   status === 'sent' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800';
						const statusText = status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : status === 'sent' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
						const date = new Date(order.db_created_at || order.timestamp).toLocaleDateString('ru-RU');
						
						ordersHtml += `
							<div class="border border-gray-200 rounded-lg p-4 mb-3">
								<div class="flex justify-between items-start mb-2">
									<div>
										<span class="px-2 py-1 text-xs rounded-full ${statusColor}">${statusText}</span>
										<span class="text-sm text-gray-600 ml-2">${date}</span>
									</div>
									<div class="flex space-x-2">
										${status === 'pending' ? `<button onclick="sendOrderToSupplier('bar', ${index})" class="px-3 py-1 text-xs bg-green-100 hover:bg-green-200 text-green-700 rounded">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>` : ''}
										<button onclick="viewOrderDetails('bar', ${index})" class="px-3 py-1 text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 rounded">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä</button>
									</div>
								</div>
								<div class="text-sm text-gray-600">
									–¢–æ–≤–∞—Ä–æ–≤: ${order.items?.length || 0} | –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${order.supplier || '–ù–µ —É–∫–∞–∑–∞–Ω'}
								</div>
							</div>
						`;
					});
				}
				
				// Kitchen orders section
				if (kitchenOrders.length > 0) {
					ordersHtml += '<h4 class="font-medium text-gray-900 mb-3 mt-6">üç≥ –ó–∞–∫–∞–∑—ã –∫—É—Ö–Ω–∏</h4>';
					kitchenOrders.forEach((order, index) => {
						const status = order.db_status || order.status;
						const statusColor = status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
										   status === 'sent' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800';
						const statusText = status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : status === 'sent' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
						const date = new Date(order.db_created_at || order.timestamp).toLocaleDateString('ru-RU');
						
						ordersHtml += `
							<div class="border border-gray-200 rounded-lg p-4 mb-3">
								<div class="flex justify-between items-start mb-2">
									<div>
										<span class="px-2 py-1 text-xs rounded-full ${statusColor}">${statusText}</span>
										<span class="text-sm text-gray-600 ml-2">${date}</span>
									</div>
									<div class="flex space-x-2">
										${status === 'pending' ? `<button onclick="sendOrderToSupplier('kitchen', ${index})" class="px-3 py-1 text-xs bg-green-100 hover:bg-green-200 text-green-700 rounded">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>` : ''}
										<button onclick="viewOrderDetails('kitchen', ${index})" class="px-3 py-1 text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 rounded">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä</button>
									</div>
								</div>
								<div class="text-sm text-gray-600">
									–¢–æ–≤–∞—Ä–æ–≤: ${order.items?.length || 0} | –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${order.supplier || '–ù–µ —É–∫–∞–∑–∞–Ω'}
								</div>
							</div>
						`;
					});
				}
				
				if (ordersHtml === '') {
					ordersHtml = `
						<div class="text-center text-gray-500 py-8">
							<span class="text-4xl mb-4 block">üìã</span>
							<p class="text-lg mb-2">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
							<p class="text-sm">–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è</p>
						</div>
					`;
				}
				
				ordersContainer.innerHTML = ordersHtml;
			}

			// Load orders data
			async function loadOrdersData() {
				try {
					// First, try to migrate any localStorage orders to PostgreSQL
					await migrateLocalStorageOrders();
					
					// Load orders from PostgreSQL database
					const response = await fetch('/api/get-all-orders');
					const result = await response.json();
					
					if (result.success) {
						const allOrders = result.data;
						const barOrders = allOrders.filter(o => o.department === 'bar');
						const kitchenOrders = allOrders.filter(o => o.department === 'kitchen');
						
						// Load orders management with database data
						loadOrdersManagement(barOrders, kitchenOrders);
					} else {
						console.error('‚ùå Failed to load orders from database:', result.error);
						// Fallback to localStorage
						await loadOrdersFromLocalStorage();
					}

				} catch (error) {
					console.error('Failed to load orders data:', error);
				}
			}

			// Load orders management
			function loadOrdersManagement(barOrders, kitchenOrders) {
				console.log('üìã Manager: Loading orders management with:', {
					barOrders: barOrders.length,
					kitchenOrders: kitchenOrders.length
				});

				const allOrders = [
					...barOrders.map((o, i) => ({...o, department: 'bar', departmentName: '–ë–∞—Ä', departmentEmoji: 'üç∑', originalIndex: i})),
					...kitchenOrders.map((o, i) => ({...o, department: 'kitchen', departmentName: '–ö—É—Ö–Ω—è', departmentEmoji: 'üç≥', originalIndex: i}))
				];

				console.log('üìã Manager: All orders combined:', allOrders.length, allOrders);

				// Sort by timestamp (newest first)
				allOrders.sort((a, b) => b.timestamp - a.timestamp);

				const ordersContainer = document.getElementById('ordersManagement');
				
				if (allOrders.length === 0) {
					ordersContainer.innerHTML = `
						<div class="text-center text-gray-500 py-8">
							<span class="text-4xl mb-4 block">üìã</span>
							<p class="text-lg mb-2">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
							<p class="text-sm">–ó–∞–∫–∞–∑—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
						</div>
					`;
					return;
				}

				let ordersHtml = '';
				allOrders.forEach((order, globalIndex) => {
					const date = new Date(order.timestamp).toLocaleString('ru-RU');
					const statusColor = order.status === 'pending' ? 'yellow' : order.status === 'sent' ? 'blue' : 'green';
					const statusText = order.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : order.status === 'sent' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
					
					const itemsList = order.items.map(item => `
						<div class="flex justify-between items-center py-1">
							<span class="text-sm">${item.name}</span>
							<span class="text-sm text-gray-600">${item.quantity} ${item.unit}</span>
						</div>
					`).join('');
					
					ordersHtml += `
						<div class="border border-gray-200 rounded-lg p-4">
							<div class="flex justify-between items-start mb-3">
								<div class="flex items-center space-x-2">
									<span class="text-lg">${order.departmentEmoji}</span>
									<div>
										<span class="font-medium">${order.departmentName}</span>
										<div class="text-xs text-gray-500">${date}</div>
									</div>
								</div>
								<div class="flex items-center space-x-2">
									<span class="inline-block px-2 py-1 text-xs rounded-full bg-${statusColor}-100 text-${statusColor}-700">
										${statusText}
									</span>
								</div>
							</div>
							
							<div class="mb-3 max-h-32 overflow-y-auto">
								${itemsList}
							</div>
							
							<div class="flex space-x-2">
								<button 
									onclick="openAddProductModal('${order.department}', ${order.originalIndex})" 
									class="px-3 py-1 text-xs bg-blue-100 hover:bg-blue-200 text-blue-700 rounded"
								>
									‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
								</button>
								${order.status === 'pending' ? `
									<button 
										onclick="sendOrderToSupplier('${order.department}', ${order.originalIndex})" 
										class="px-3 py-1 text-xs bg-green-100 hover:bg-green-200 text-green-700 rounded"
									>
										üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
									</button>
								` : ''}
							</div>
						</div>
					`;
				});

				ordersContainer.innerHTML = ordersHtml;
			}

			// Variables for product selection
			let currentEditingDepartment = null;
			let currentEditingOrder = null;
			let currentDepartmentTab = 'bar';
			let allProducts = { bar: [], kitchen: [] };
			let selectedProducts = {};

			// Open add product modal
			function openAddProductModal(department, orderIndex) {
				currentEditingDepartment = department;
				currentEditingOrder = orderIndex;
				currentDepartmentTab = department;
				selectedProducts = {};
				
				document.getElementById('addProductModal').classList.remove('hidden');
				switchDepartmentTab(department);
				loadProductsForDepartment(department);
			}

			// Close add product modal
			function closeAddProductModal() {
				document.getElementById('addProductModal').classList.add('hidden');
				document.getElementById('productSearch').value = '';
				selectedProducts = {};
				currentEditingDepartment = null;
				currentEditingOrder = null;
				updateSelectedSummary();
			}

			// Switch department tab
			function switchDepartmentTab(department) {
				currentDepartmentTab = department;
				
				// Update tab styles
				document.getElementById('barTab').className = department === 'bar' 
					? 'flex-1 py-3 px-4 text-center font-medium text-sm border-b-2 border-blue-500 text-blue-600'
					: 'flex-1 py-3 px-4 text-center font-medium text-sm border-b-2 border-transparent text-gray-500 hover:text-gray-700';
				
				document.getElementById('kitchenTab').className = department === 'kitchen'
					? 'flex-1 py-3 px-4 text-center font-medium text-sm border-b-2 border-orange-500 text-orange-600'
					: 'flex-1 py-3 px-4 text-center font-medium text-sm border-b-2 border-transparent text-gray-500 hover:text-gray-700';
				
				loadProductsForDepartment(department);
			}

			// Load products for department
			async function loadProductsForDepartment(department) {
				const productsList = document.getElementById('productsList');
				productsList.innerHTML = `
					<div class="text-center py-8">
						<div class="animate-spin h-8 w-8 border-b-2 border-blue-600 rounded-full mx-auto mb-4"></div>
						<p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
					</div>
				`;

				try {
					const endpoint = department === 'bar' ? '/api/bar-inventory' : '/api/kitchen-inventory';
					const response = await fetch(endpoint);
					const data = await response.json();
					
					if (data.success) {
						allProducts[department] = data.data;
						displayProducts(data.data);
					} else {
						throw new Error(data.error || 'Failed to load products');
					}
				} catch (error) {
					console.error('Error loading products:', error);
					productsList.innerHTML = `
						<div class="text-center py-8">
							<span class="text-4xl mb-4 block">‚ùå</span>
							<p class="text-gray-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</p>
						</div>
					`;
				}
			}

			// Display products
			function displayProducts(products) {
				const productsList = document.getElementById('productsList');
				
				if (!products || products.length === 0) {
					productsList.innerHTML = `
						<div class="text-center py-8">
							<span class="text-4xl mb-4 block">üì¶</span>
							<p class="text-gray-600">–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</p>
						</div>
					`;
					return;
				}

				let productsHtml = '<div class="space-y-2">';
				products.forEach((product, index) => {
					const isSelected = selectedProducts[product.id];
					const borderClass = isSelected ? 'border-l-4 border-l-green-500 bg-green-50' : '';
					
					productsHtml += `
						<div class="bg-white border border-gray-200 rounded-lg p-4 ${borderClass}" data-product-id="${product.id}">
							<div class="flex justify-between items-center">
								<div class="flex-1">
									<h4 class="font-medium text-gray-900">${product.name}</h4>
									<p class="text-sm text-gray-600">–ù–∞ —Å–∫–ª–∞–¥–µ: ${product.quantity || 0} ${product.unit}</p>
									${product.category ? `<p class="text-xs text-gray-500">${product.category}</p>` : ''}
								</div>
								<div class="flex items-center space-x-2">
									${isSelected ? `
										<div class="flex items-center space-x-2 bg-gray-100 rounded-lg px-2 py-1">
											<button onclick="decreaseQuantity('${product.id}')" class="px-2 py-1 text-gray-600 hover:text-gray-800">-</button>
											<input 
												type="number" 
												id="qty-${product.id}" 
												value="${selectedProducts[product.id].quantity}" 
												min="1" 
												step="0.1"
												class="w-16 text-center border-0 bg-transparent text-sm"
												onchange="updateQuantity('${product.id}', this.value)"
											>
											<span class="text-sm text-gray-600">${product.unit}</span>
											<button onclick="increaseQuantity('${product.id}')" class="px-2 py-1 text-gray-600 hover:text-gray-800">+</button>
										</div>
									` : `
										<button 
											onclick="selectProduct('${product.id}', '${product.name}', '${product.unit}')" 
											class="px-3 py-1 bg-blue-50 hover:bg-blue-100 text-blue-700 text-sm rounded border border-blue-200"
										>
											+ –î–æ–±–∞–≤–∏—Ç—å
										</button>
									`}
								</div>
							</div>
						</div>
					`;
				});
				productsHtml += '</div>';
				
				productsList.innerHTML = productsHtml;
			}

			// Select product
			function selectProduct(productId, productName, productUnit) {
				selectedProducts[productId] = {
					id: productId,
					name: productName,
					unit: productUnit,
					quantity: 1
				};
				
				displayProducts(allProducts[currentDepartmentTab]);
				updateSelectedSummary();
			}

			// Update quantity
			function updateQuantity(productId, newQuantity) {
				const quantity = parseFloat(newQuantity) || 1;
				if (selectedProducts[productId]) {
					selectedProducts[productId].quantity = Math.max(0.1, quantity);
					updateSelectedSummary();
				}
			}

			// Increase quantity
			function increaseQuantity(productId) {
				if (selectedProducts[productId]) {
					selectedProducts[productId].quantity += 1;
					document.getElementById(`qty-${productId}`).value = selectedProducts[productId].quantity;
					updateSelectedSummary();
				}
			}

			// Decrease quantity
			function decreaseQuantity(productId) {
				if (selectedProducts[productId]) {
					if (selectedProducts[productId].quantity > 1) {
						selectedProducts[productId].quantity -= 1;
						document.getElementById(`qty-${productId}`).value = selectedProducts[productId].quantity;
						updateSelectedSummary();
					} else {
						// Remove product if quantity becomes 0
						delete selectedProducts[productId];
						displayProducts(allProducts[currentDepartmentTab]);
						updateSelectedSummary();
					}
				}
			}

			// Update selected summary
			function updateSelectedSummary() {
				const selectedCount = Object.keys(selectedProducts).length;
				const summaryDiv = document.getElementById('selectedSummary');
				const countSpan = document.getElementById('selectedCount');
				
				countSpan.textContent = selectedCount;
				
				if (selectedCount > 0) {
					summaryDiv.classList.remove('hidden');
				} else {
					summaryDiv.classList.add('hidden');
				}
			}

			// Clear selected products
			function clearSelectedProducts() {
				selectedProducts = {};
				displayProducts(allProducts[currentDepartmentTab]);
				updateSelectedSummary();
			}

			// Filter products
			function filterProducts() {
				const searchTerm = document.getElementById('productSearch').value.toLowerCase();
				const products = allProducts[currentDepartmentTab];
				
				if (!searchTerm) {
					displayProducts(products);
					return;
				}
				
				const filteredProducts = products.filter(product => 
					product.name.toLowerCase().includes(searchTerm) ||
					(product.category && product.category.toLowerCase().includes(searchTerm))
				);
				
				displayProducts(filteredProducts);
			}

			// Add selected products to order
			function addSelectedProductsToOrder() {
				const selectedCount = Object.keys(selectedProducts).length;
				if (selectedCount === 0) {
					alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
					return;
				}

				// Get current orders
				const storageKey = currentEditingDepartment === 'bar' ? 'barDeliveryOrders' : 'kitchenDeliveryOrders';
				const orders = JSON.parse(localStorage.getItem(storageKey) || '[]');

				if (orders[currentEditingOrder]) {
					// Add selected products to the order
					Object.values(selectedProducts).forEach(product => {
						orders[currentEditingOrder].items.push({
							name: product.name,
							quantity: product.quantity,
							unit: product.unit
						});
					});

					// Save back to localStorage
					localStorage.setItem(storageKey, JSON.stringify(orders));

					// Close modal and refresh
					closeAddProductModal();
					loadOrdersData();

					alert(`–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${selectedCount}`);
				}
			}

			// Send order to supplier
			async function sendOrderToSupplier(department, orderIndex) {
				if (!confirm('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É?')) {
					return;
				}

				try {
					// Get current orders to find the order ID
					const response = await fetch('/api/get-all-orders');
					const result = await response.json();
					
					if (result.success) {
						const orders = result.data.filter(o => o.department === department);
						const order = orders[orderIndex];
						
						if (order && order.db_id) {
							// Update status in database
							const updateResponse = await fetch('/api/update-order-status', {
								method: 'POST',
								headers: { 'Content-Type': 'application/json' },
								body: JSON.stringify({
									orderId: order.db_id,
									status: 'sent'
								})
							});
							
							const updateResult = await updateResponse.json();
							if (updateResult.success) {
								loadOrdersData();
								alert('–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫—É!');
							} else {
								throw new Error(updateResult.error);
							}
						} else {
							throw new Error('Order not found or missing database ID');
						}
					} else {
						throw new Error('Failed to load orders');
					}
				} catch (error) {
					console.error('‚ùå Failed to send order:', error);
					alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞: ' + error.message);
				}
			}

			// Send all pending orders to suppliers
			async function sendAllOrdersToSuppliers() {
				if (!confirm('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º?')) {
					return;
				}

				try {
					// Get all orders from database
					const response = await fetch('/api/get-all-orders');
					const result = await response.json();
					
					if (result.success) {
						const pendingOrders = result.data.filter(o => (o.db_status || o.status) === 'pending');
						let sentCount = 0;
						
						// Update each pending order to 'sent' status
						for (const order of pendingOrders) {
							if (order.db_id) {
								try {
									const updateResponse = await fetch('/api/update-order-status', {
										method: 'POST',
										headers: { 'Content-Type': 'application/json' },
										body: JSON.stringify({
											orderId: order.db_id,
											status: 'sent'
										})
									});
									
									const updateResult = await updateResponse.json();
									if (updateResult.success) {
										sentCount++;
									}
								} catch (error) {
									console.error('‚ùå Failed to update order:', order.db_id, error);
								}
							}
						}
						
						loadOrdersData();
						alert('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º: ' + sentCount);
					} else {
						throw new Error('Failed to load orders');
					}
				} catch (error) {
					console.error('‚ùå Failed to send all orders:', error);
					alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–æ–≤: ' + error.message);
				}
			}

			// View order details
			async function viewOrderDetails(department, orderIndex) {
				try {
					// Get current orders from database
					const response = await fetch('/api/get-all-orders');
					const result = await response.json();
					
					if (result.success) {
						const orders = result.data.filter(o => o.department === department);
						const order = orders[orderIndex];

						if (!order) {
							alert('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
							return;
						}

						const itemsList = order.items.map(item => '‚Ä¢ ' + item.name + ' - ' + item.quantity + ' ' + item.unit).join('\n');
						const departmentName = department === 'bar' ? '–ë–∞—Ä' : '–ö—É—Ö–Ω—è';
						const status = order.db_status || order.status;
						const statusText = status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : status === 'sent' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
						const date = new Date(order.db_created_at || order.timestamp).toLocaleString('ru-RU');

						alert('–ó–∞–∫–∞–∑ –∏–∑ –æ—Ç–¥–µ–ª–∞: ' + departmentName + '\n\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ' + date + '\n–°—Ç–∞—Ç—É—Å: ' + statusText + '\n\n–¢–æ–≤–∞—Ä—ã:\n' + itemsList + '\n\n–ü–æ—Å—Ç–∞–≤—â–∏–∫: ' + (order.supplier || '–ù–µ —É–∫–∞–∑–∞–Ω'));
					} else {
						alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞');
					}
				} catch (error) {
					console.error('‚ùå Failed to view order details:', error);
					alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞');
				}
			}

			// SUPPLIER MANAGEMENT FUNCTIONS
			
			// Load suppliers from API
			async function loadSuppliers() {
				console.log('üîÑ Loading suppliers from API...');
				try {
					const response = await fetch('/api/suppliers');
					console.log('üì° Suppliers API response status:', response.status);
					
					const data = await response.json();
					console.log('üìä Suppliers API response data:', data);
					
					if (data.success) {
						console.log('‚úÖ Successfully loaded', data.data.length, 'suppliers');
						if (data.usingFallback) {
							console.log('‚ö†Ô∏è Using fallback suppliers (not tenant-specific)');
						}
						displaySuppliers(data.data);
					} else {
						console.error('‚ùå Failed to load suppliers:', data.error);
						displaySuppliers([]); // Show empty state
					}
				} catch (error) {
					console.error('‚ùå Error loading suppliers:', error);
					displaySuppliers([]); // Show empty state
				}
			}
			
			// Display suppliers in the UI
			function displaySuppliers(suppliers) {
				console.log('üñ•Ô∏è Displaying suppliers:', suppliers);
				const container = document.getElementById('suppliersManagement');
				
				if (!container) {
					console.error('‚ùå Suppliers container not found!');
					return;
				}
				
				if (!suppliers || suppliers.length === 0) {
					console.log('üìã No suppliers to display, showing empty state');
					container.innerHTML = `
						<div class="text-center text-gray-500 py-8">
							<span class="text-4xl mb-4 block">üè¢</span>
							<p class="text-lg mb-2">–ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</p>
							<p class="text-sm">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</p>
						</div>
					`;
					return;
				}
				
				let suppliersHtml = '';
				suppliers.forEach((supplier, index) => {
					const createdDate = new Date(supplier.created_at).toLocaleDateString('ru-RU');
					
					suppliersHtml += `
						<div class="border border-gray-200 rounded-lg p-4">
							<div class="flex justify-between items-start mb-3">
								<div>
									<h4 class="font-medium text-gray-900">${supplier.name}</h4>
									<p class="text-sm text-gray-600">–°–æ–∑–¥–∞–Ω: ${createdDate}</p>
								</div>
								<div class="flex space-x-2">
									<button 
										onclick="editSupplier(${supplier.id})" 
										class="px-3 py-1 text-xs bg-blue-100 hover:bg-blue-200 text-blue-700 rounded"
									>
										‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
									</button>
									<button 
										onclick="deleteSupplier(${supplier.id})" 
										class="px-3 py-1 text-xs bg-red-100 hover:bg-red-200 text-red-700 rounded"
									>
										üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
									</button>
								</div>
							</div>
							
							${supplier.phone ? `
								<div class="mb-2">
									<span class="text-sm text-gray-600">üìû –¢–µ–ª–µ—Ñ–æ–Ω: </span>
									<span class="text-sm font-medium">${supplier.phone}</span>
								</div>
							` : ''}
							
							${supplier.contact_info ? `
								<div class="text-sm text-gray-600">
									<span class="font-medium">–ö–æ–Ω—Ç–∞–∫—Ç—ã: </span>
									<span>${supplier.contact_info}</span>
								</div>
							` : ''}
						</div>
					`;
				});
				
				container.innerHTML = suppliersHtml;
			}
			
			// Open add supplier modal
			function addNewSupplier() {
				document.getElementById('addSupplierModal').classList.remove('hidden');
				document.getElementById('newSupplierName').focus();
			}
			
			// Close add supplier modal
			function closeAddSupplierModal() {
				document.getElementById('addSupplierModal').classList.add('hidden');
				document.getElementById('newSupplierName').value = '';
				document.getElementById('newSupplierPhone').value = '';
				document.getElementById('newSupplierContact').value = '';
			}
			
			// Create new supplier
			async function createSupplier() {
				const name = document.getElementById('newSupplierName').value.trim();
				const phone = document.getElementById('newSupplierPhone').value.trim();
				const contact_info = document.getElementById('newSupplierContact').value.trim();
				
				if (!name) {
					alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞');
					return;
				}
				
				try {
					const response = await fetch('/api/suppliers', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify({
							name: name,
							phone: phone || null,
							contact_info: contact_info || null
						})
					});
					
					const data = await response.json();
					
					if (data.success) {
						alert('–ü–æ—Å—Ç–∞–≤—â–∏–∫ "' + name + '" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
						closeAddSupplierModal();
						loadSuppliers(); // Refresh the list
					} else {
						alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ' + data.error);
					}
				} catch (error) {
					console.error('Error creating supplier:', error);
					alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
				}
			}
			
			// Edit supplier (placeholder)
			function editSupplier(supplierId) {
				alert('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ. ID: ' + supplierId);
			}
			
			// Delete supplier (placeholder)
			function deleteSupplier(supplierId) {
				if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞?')) {
					alert('–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ. ID: ' + supplierId);
				}
			}


			// Load data when page loads
			document.addEventListener('DOMContentLoaded', function() {
				loadOrdersData();
				loadSuppliers();
				// Refresh data every 30 seconds
				setInterval(loadOrdersData, 30000);
				setInterval(loadSuppliers, 30000);
			});
		</script>
	</Layout>
