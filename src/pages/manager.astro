---
import Layout from '../layouts/Layout.astro';
---

<Layout title="–ú–µ–Ω–µ–¥–∂–µ—Ä - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è">
	<div class="min-h-screen bg-background">
		<!-- Navbar -->
		<div class="border-b sticky top-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
			<div class="container flex h-14 items-center justify-between mx-auto px-4">
				<div class="flex items-center gap-2">
					<span class="text-2xl">üëî</span>
					<span class="text-xl font-bold">–ú–µ–Ω–µ–¥–∂–µ—Ä</span>
				</div>
				<a href="/" class="text-sm text-muted-foreground hover:text-foreground">
					‚Üê –ù–∞–∑–∞–¥
				</a>
			</div>
		</div>

		<!-- Main Content -->
		<main class="container mx-auto p-4">
			<!-- Tabs -->
			<div class="mb-6">
				<div class="border-b">
					<nav class="flex gap-4 -mb-px">
						<button data-tab="orders" class="tab-button border-b-2 border-primary px-4 py-2 text-sm font-medium">
							üìã –ó–∞–∫–∞–∑—ã
						</button>
						<button data-tab="delivered" class="tab-button px-4 py-2 text-sm font-medium text-muted-foreground hover:text-foreground">
							‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
						</button>
						<button data-tab="categories" class="tab-button px-4 py-2 text-sm font-medium text-muted-foreground hover:text-foreground">
							üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
						</button>
						<button data-tab="suppliers" class="tab-button px-4 py-2 text-sm font-medium text-muted-foreground hover:text-foreground">
							üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏
						</button>
						<button data-tab="departments" class="tab-button px-4 py-2 text-sm font-medium text-muted-foreground hover:text-foreground">
							üè™ –û—Ç–¥–µ–ª—ã
						</button>
						<button data-tab="products" class="tab-button px-4 py-2 text-sm font-medium text-muted-foreground hover:text-foreground">
							üì¶ –¢–æ–≤–∞—Ä—ã
						</button>
						<button data-tab="settings" class="tab-button px-4 py-2 text-sm font-medium text-muted-foreground hover:text-foreground">
							‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
						</button>
					</nav>
				</div>
			</div>

			<!-- Orders Tab -->
			<div id="tab-orders" class="tab-content">
				<h3 class="text-2xl font-bold mb-4">üìã –ó–∞–∫–∞–∑—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h3>
				<div id="ordersByCategory">
					<div class="text-center text-muted-foreground py-12">
						<div class="inline-block animate-spin rounded-full h-12 w-12 border-4 border-primary border-t-transparent"></div>
						<p class="mt-4">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
					</div>
				</div>
			</div>

			<!-- Delivered Tab -->
			<div id="tab-delivered" class="tab-content hidden">
				<div class="flex justify-between items-center mb-4">
					<h3 class="text-2xl font-bold">‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã</h3>
					<button onclick="exportAllDeliveredOrders()" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90">
						üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
					</button>
				</div>
				<div id="deliveredOrders">
					<div class="text-center text-muted-foreground py-12">
						<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
					</div>
				</div>
			</div>

			<!-- Categories Tab -->
			<div id="tab-categories" class="tab-content hidden">
				<div class="flex justify-between items-center mb-4">
					<h3 class="text-2xl font-bold">üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏</h3>
					<button onclick="addNewCategory()" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90">
						‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è
					</button>
				</div>
				<div id="categorySuppliers">
					<div class="text-center text-muted-foreground py-12">
						<p>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
					</div>
				</div>
			</div>

			<!-- Suppliers Tab -->
			<div id="tab-suppliers" class="tab-content hidden">
				<div class="flex justify-between items-center mb-4">
					<h3 class="text-2xl font-bold">üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏</h3>
					<button onclick="addNewSupplier()" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90">
						‚ûï –î–æ–±–∞–≤–∏—Ç—å
					</button>
				</div>
				<div id="suppliersList">
					<div class="text-center text-muted-foreground py-12">
						<p>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
					</div>
				</div>
			</div>

			<!-- Departments Tab -->
			<div id="tab-departments" class="tab-content hidden">
				<div class="flex justify-between items-center mb-4">
					<h3 class="text-2xl font-bold">üè™ –û—Ç–¥–µ–ª—ã</h3>
					<div class="flex gap-2">
						<button onclick="syncDepartmentsFromPoster()" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground">
							üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
						</button>
						<button onclick="addNewDepartment()" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90">
							‚ûï –î–æ–±–∞–≤–∏—Ç—å
						</button>
					</div>
				</div>
				<div id="departmentsList">
					<div class="text-center text-muted-foreground py-12">
						<p>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
					</div>
				</div>
			</div>

			<!-- Products Tab -->
			<div id="tab-products" class="tab-content hidden">
				<div class="flex justify-between items-center mb-4">
					<h3 class="text-2xl font-bold">üì¶ –¢–æ–≤–∞—Ä—ã</h3>
					<button onclick="openAddProductModal()" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90">
						‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
					</button>
				</div>
				<div id="productsList">
					<div class="text-center text-muted-foreground py-12">
						<p>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
					</div>
				</div>
			</div>

			<!-- Settings Tab -->
			<div id="tab-settings" class="tab-content hidden">
				<h3 class="text-2xl font-bold mb-4">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
				<div class="space-y-4">
					<div class="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
						<h2 class="text-xl font-semibold mb-2">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Poster</h2>
						<p class="text-sm text-muted-foreground mb-4">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Poster POS —Å–∏—Å—Ç–µ–º–µ</p>
						<button class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90">
							–ù–∞—Å—Ç—Ä–æ–∏—Ç—å
						</button>
					</div>
					<div class="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
						<h2 class="text-xl font-semibold mb-2">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
						<p class="text-sm text-muted-foreground mb-4">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö</p>
						<button class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90">
							–ù–∞—Å—Ç—Ä–æ–∏—Ç—å
						</button>
					</div>
				</div>
			</div>
		</main>
	</div>

	<script>
		import OrderCard from '../lib/components/OrderCard.svelte';

		// Load orders by category
		async function loadOrdersByCategory() {
			console.log('üìã Loading orders by category...');
			try {
				const response = await fetch('/api/orders-by-category');
				const data = await response.json();

				if (data.success) {
					displayOrdersByCategory(data.data);
				} else {
					console.error('‚ùå Failed to load orders:', data.error);
					displayOrdersByCategory([]);
				}
			} catch (error) {
				console.error('‚ùå Error loading orders:', error);
				displayOrdersByCategory([]);
			}
		}

		// Display orders using Svelte components
		function displayOrdersByCategory(orders: any[]) {
			const container = document.getElementById('ordersByCategory');
			if (!container) return;

			if (!orders || orders.length === 0) {
				container.innerHTML = `
					<div class="text-center py-12">
						<div class="text-6xl mb-4">üìã</div>
						<p class="text-xl font-semibold mb-2">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
						<p class="text-muted-foreground">–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è</p>
					</div>
				`;
				return;
			}

			// Clear container
			container.innerHTML = '';

			// Create container for cards
			const cardsContainer = document.createElement('div');
			cardsContainer.className = 'space-y-4';
			container.appendChild(cardsContainer);

			// Create Svelte component for each order
			orders.forEach((order: any) => {
				const target = document.createElement('div');
				cardsContainer.appendChild(target);

				new OrderCard({
					target,
					props: { order }
				});
			});
		}

		// Tab switching
		function switchTab(tabName) {
			// Hide all tabs
			document.querySelectorAll('.tab-content').forEach(tab => {
				tab.classList.add('hidden');
			});

			// Remove active state from all buttons
			document.querySelectorAll('.tab-button').forEach(btn => {
				btn.classList.remove('border-b-2', 'border-primary');
				btn.classList.add('text-muted-foreground');
			});

			// Show selected tab
			const selectedTab = document.getElementById(`tab-${tabName}`);
			if (selectedTab) {
				selectedTab.classList.remove('hidden');
			}

			// Add active state to selected button
			const selectedButton = document.querySelector(`[data-tab="${tabName}"]`);
			if (selectedButton) {
				selectedButton.classList.add('border-b-2', 'border-primary');
				selectedButton.classList.remove('text-muted-foreground');
			}

			// Load data for specific tabs
			if (tabName === 'delivered') {
				loadDeliveredOrders();
			}
		}

		// Load delivered orders
		async function loadDeliveredOrders() {
			const container = document.getElementById('deliveredOrders');
			if (!container) return;

			container.innerHTML = '<div class="text-center text-muted-foreground py-12"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';

			try {
				const response = await fetch('/api/orders-by-category?status=delivered');
				const data = await response.json();

				if (data.success && data.data && data.data.length > 0) {
					// Reuse the same display function
					container.innerHTML = '';
					const cardsContainer = document.createElement('div');
					cardsContainer.className = 'space-y-4';
					container.appendChild(cardsContainer);

					data.data.forEach((order: any) => {
						const target = document.createElement('div');
						cardsContainer.appendChild(target);

						new OrderCard({
							target,
							props: { order }
						});
					});
				} else {
					container.innerHTML = `
						<div class="text-center py-12">
							<div class="text-6xl mb-4">‚úÖ</div>
							<p class="text-xl font-semibold mb-2">–ù–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>
							<p class="text-muted-foreground">–î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
						</div>
					`;
				}
			} catch (error) {
				console.error('Error loading delivered orders:', error);
				container.innerHTML = '<div class="text-center text-error py-12"><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p></div>';
			}
		}

		// Placeholder functions
		function exportAllDeliveredOrders() {
			alert('–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
		}

		function addNewCategory() {
			alert('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
		}

		function addNewSupplier() {
			alert('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
		}

		async function syncDepartmentsFromPoster() {
			try {
				const response = await fetch('/api/sync-departments-from-poster');
				const result = await response.json();
				alert(result.success ? '‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!' : '‚ùå –û—à–∏–±–∫–∞: ' + result.error);
			} catch (error) {
				alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
			}
		}

		function addNewDepartment() {
			alert('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
		}

		function openAddProductModal() {
			alert('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
		}

		// Load data on page load
		document.addEventListener('DOMContentLoaded', () => {
			console.log('üì± Manager page loaded with shadcn-svelte');

			// Setup tab switching
			document.querySelectorAll('.tab-button').forEach(button => {
				button.addEventListener('click', () => {
					const tabName = button.getAttribute('data-tab');
					if (tabName) {
						switchTab(tabName);
					}
				});
			});

			// Load initial data
			loadOrdersByCategory();
			setInterval(loadOrdersByCategory, 30000);
		});
	</script>
</Layout>
