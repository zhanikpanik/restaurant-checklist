---
import Layout from '../layouts/Layout.astro';
---

<style>
	/* Native app styling */
	.scrollbar-hide {
		-ms-overflow-style: none;
		scrollbar-width: none;
	}
	.scrollbar-hide::-webkit-scrollbar {
		display: none;
	}

	.overflow-x-auto {
		scroll-behavior: smooth;
	}

	.tab-button {
		-webkit-tap-highlight-color: transparent;
		touch-action: manipulation;
	}

	/* Native card style */
	.native-card {
		background: var(--card);
		border: 1px solid var(--border);
		border-radius: 12px;
		overflow: hidden;
		transition: all 0.2s;
	}

	.native-card:active {
		transform: scale(0.98);
	}

	/* Pull to refresh hint */
	@keyframes slideDown {
		from { transform: translateY(-100%); opacity: 0; }
		to { transform: translateY(0); opacity: 1; }
	}

	.slide-down {
		animation: slideDown 0.3s ease-out;
	}

	/* Safe area for mobile */
	@supports (padding-bottom: env(safe-area-inset-bottom)) {
		.bottom-nav {
			padding-bottom: calc(0.5rem + env(safe-area-inset-bottom));
		}
	}

	/* iOS style lists */
	.native-list {
		background: var(--background);
		border-radius: 12px;
		overflow: hidden;
	}

	.native-list-item {
		background: var(--card);
		border-bottom: 1px solid var(--border);
		padding: 1rem;
		transition: background 0.2s;
	}

	.native-list-item:last-child {
		border-bottom: none;
	}

	.native-list-item:active {
		background: var(--accent);
	}
</style>

<Layout title="–ú–µ–Ω–µ–¥–∂–µ—Ä - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è">
	<div class="min-h-screen bg-background pb-20">
		<!-- Mobile Native Header -->
		<div class="sticky top-0 z-50 bg-background border-b">
			<div class="flex items-center h-14 px-4">
				<a href="/" class="flex items-center justify-center w-10 h-10 -ml-2 rounded-full hover:bg-accent transition-colors">
					<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
					</svg>
				</a>
				<h1 class="flex-1 text-lg font-semibold ml-2">–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞</h1>
			</div>
		</div>

		<!-- Main Content -->
		<main>
			<!-- Mobile Tabs - Horizontal Scroll -->
			<div class="sticky top-14 z-40 bg-background border-b">
				<div class="overflow-x-auto scrollbar-hide">
					<nav class="flex gap-1 px-4 py-2 min-w-max">
						<button data-tab="orders" class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-primary text-primary-foreground">
							üìã –ó–∞–∫–∞–∑—ã
						</button>
						<button data-tab="delivered" class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-secondary text-secondary-foreground">
							‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
						</button>
						<button data-tab="categories" class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-secondary text-secondary-foreground">
							üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
						</button>
						<button data-tab="suppliers" class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-secondary text-secondary-foreground">
							üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏
						</button>
						<button data-tab="departments" class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-secondary text-secondary-foreground">
							üè™ –û—Ç–¥–µ–ª—ã
						</button>
						<button data-tab="products" class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-secondary text-secondary-foreground">
							üì¶ –¢–æ–≤–∞—Ä—ã
						</button>
						<button data-tab="settings" class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-secondary text-secondary-foreground">
							‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
						</button>
					</nav>
				</div>
			</div>

			<div class="p-4">

			<!-- Orders Tab -->
			<div id="tab-orders" class="tab-content">
				<div id="ordersByCategory">
					<div class="text-center text-muted-foreground py-12">
						<div class="inline-block animate-spin rounded-full h-12 w-12 border-4 border-primary border-t-transparent"></div>
						<p class="mt-4">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
					</div>
				</div>
			</div>

			<!-- Delivered Tab -->
			<div id="tab-delivered" class="tab-content hidden">
				<div class="flex justify-between items-center mb-4">
					<button onclick="exportAllDeliveredOrders()" class="ml-auto inline-flex items-center justify-center rounded-lg text-sm font-medium h-10 px-4 bg-primary text-primary-foreground hover:bg-primary/90 shadow-sm">
						<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
						</svg>
						–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
					</button>
				</div>
				<div id="deliveredOrders">
					<div class="text-center text-muted-foreground py-12">
						<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
					</div>
				</div>
			</div>

			<!-- Categories Tab -->
			<div id="tab-categories" class="tab-content hidden">
				<div class="flex justify-between items-center mb-4">
					<div class="flex gap-2">
						<button onclick="runAutoCategorization()" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground">
							ü§ñ –ê–≤—Ç–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
						</button>
						<button onclick="addNewCategory()" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90">
							‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è
						</button>
					</div>
				</div>
				<div id="categorySuppliers">
					<div class="text-center text-muted-foreground py-12">
						<p>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
					</div>
				</div>
			</div>

			<!-- Suppliers Tab -->
			<div id="tab-suppliers" class="tab-content hidden">
				<div class="flex justify-between items-center mb-4">
					<h3 class="text-2xl font-bold">üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏</h3>
					<button onclick="addNewSupplier()" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90">
						‚ûï –î–æ–±–∞–≤–∏—Ç—å
					</button>
				</div>
				<div id="suppliersList">
					<div class="text-center text-muted-foreground py-12">
						<p>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
					</div>
				</div>
			</div>

			<!-- Sections Tab (previously Departments) -->
			<div id="tab-departments" class="tab-content hidden">
				<div class="flex justify-between items-center mb-4">
					<h3 class="text-2xl font-bold">üè™ –°–µ–∫—Ü–∏–∏</h3>
					<div class="flex gap-2">
						<button onclick="syncSectionsFromPoster()" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground">
							üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Poster
						</button>
						<button onclick="addNewSection()" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90">
							‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é
						</button>
					</div>
				</div>
				<div id="sectionsList">
					<div class="text-center text-muted-foreground py-12">
						<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
					</div>
				</div>
			</div>

			<!-- Products Tab -->
			<div id="tab-products" class="tab-content hidden">
				<div class="flex justify-between items-center mb-4">
					<h3 class="text-2xl font-bold">üì¶ –¢–æ–≤–∞—Ä—ã</h3>
					<div class="flex gap-2">
						<button onclick="syncProducts()" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground">
							üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
						</button>
						<button onclick="openAddProductModal()" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90">
							‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
						</button>
					</div>
				</div>

				<!-- Search and Filters -->
				<div class="mb-4 flex gap-3">
					<input
						type="text"
						id="productSearchInput"
						placeholder="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
						oninput="filterProducts()"
						class="flex-1 px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
					/>
					<select id="categoryFilterSelect" onchange="filterProducts()" class="px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary">
						<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
					</select>
				</div>

				<div id="productsList">
					<div class="text-center text-muted-foreground py-12">
						<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
					</div>
				</div>
			</div>

			<!-- Settings Tab -->
			<div id="tab-settings" class="tab-content hidden">
				<h3 class="text-2xl font-bold mb-4">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
				<div class="space-y-4">
					<div class="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
						<h2 class="text-xl font-semibold mb-2">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Poster</h2>
						<p class="text-sm text-muted-foreground mb-4">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Poster POS —Å–∏—Å—Ç–µ–º–µ</p>
						<button class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90">
							–ù–∞—Å—Ç—Ä–æ–∏—Ç—å
						</button>
					</div>
					<div class="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
						<h2 class="text-xl font-semibold mb-2">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
						<p class="text-sm text-muted-foreground mb-4">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö</p>
						<button class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90">
							–ù–∞—Å—Ç—Ä–æ–∏—Ç—å
						</button>
					</div>
				</div>
			</div>
		</main>
	</div>

	<!-- Add Section Modal -->
	<div id="addSectionModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center">
		<div class="bg-background rounded-lg shadow-xl max-w-md w-full mx-4">
			<div class="p-6 border-b">
				<div class="flex justify-between items-center">
					<h3 class="text-lg font-semibold">–î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é</h3>
					<button onclick="closeAddSectionModal()" class="text-muted-foreground hover:text-foreground">‚úï</button>
				</div>
			</div>

			<div class="p-6 space-y-4">
				<div>
					<label class="block text-sm font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏</label>
					<input
						type="text"
						id="sectionNameInput"
						placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∫–ª–∞–¥ 2"
						class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
					/>
				</div>
				<div>
					<label class="block text-sm font-medium mb-2">–≠–º–æ–¥–∑–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
					<input
						type="text"
						id="sectionEmojiInput"
						placeholder="üì¶"
						maxlength="2"
						class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
					/>
				</div>
			</div>

			<div class="p-6 border-t flex gap-3">
				<button
					onclick="submitAddSection()"
					class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
				>
					–°–æ–∑–¥–∞—Ç—å
				</button>
				<button
					onclick="closeAddSectionModal()"
					class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
				>
					–û—Ç–º–µ–Ω–∞
				</button>
			</div>
		</div>
	</div>

	<!-- Add Category Modal -->
	<div id="addCategoryModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center">
		<div class="bg-background rounded-lg shadow-xl max-w-md w-full mx-4">
			<div class="p-6 border-b">
				<div class="flex justify-between items-center">
					<h3 class="text-lg font-semibold">–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h3>
					<button onclick="closeAddCategoryModal()" class="text-muted-foreground hover:text-foreground">‚úï</button>
				</div>
			</div>

			<div class="p-6 space-y-4">
				<div>
					<label class="block text-sm font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</label>
					<input
						type="text"
						id="categoryNameInput"
						placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞"
						class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
					/>
				</div>
				<div>
					<label class="block text-sm font-medium mb-2">–ü–æ—Å—Ç–∞–≤—â–∏–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
					<select id="categorySupplierSelect" class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary">
						<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ --</option>
					</select>
				</div>
			</div>

			<div class="p-6 border-t flex gap-3">
				<button
					onclick="submitAddCategory()"
					class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
				>
					–°–æ–∑–¥–∞—Ç—å
				</button>
				<button
					onclick="closeAddCategoryModal()"
					class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
				>
					–û—Ç–º–µ–Ω–∞
				</button>
			</div>
		</div>
	</div>

	<!-- Add Product Modal -->
	<div id="addProductModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center">
		<div class="bg-background rounded-lg shadow-xl max-w-md w-full mx-4">
			<div class="p-6 border-b">
				<div class="flex justify-between items-center">
					<h3 class="text-lg font-semibold">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</h3>
					<button onclick="closeAddProductModal()" class="text-muted-foreground hover:text-foreground">‚úï</button>
				</div>
			</div>

			<div class="p-6 space-y-4">
				<div>
					<label class="block text-sm font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label>
					<input
						type="text"
						id="productNameInput"
						placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–º–∏–¥–æ—Ä—ã"
						class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
					/>
				</div>
				<div>
					<label class="block text-sm font-medium mb-2">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</label>
					<input
						type="text"
						id="productUnitInput"
						placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–≥, —à—Ç, –ª"
						value="—à—Ç"
						class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
					/>
				</div>
				<div>
					<label class="block text-sm font-medium mb-2">–°–µ–∫—Ü–∏—è</label>
					<select id="productSectionSelect" class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary">
						<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é --</option>
					</select>
				</div>
				<div>
					<label class="block text-sm font-medium mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
					<select id="productCategorySelect" class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary">
						<option value="">-- –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ --</option>
					</select>
				</div>
			</div>

			<div class="p-6 border-t flex gap-3">
				<button
					onclick="submitAddProduct()"
					class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
				>
					–°–æ–∑–¥–∞—Ç—å
				</button>
				<button
					onclick="closeAddProductModal()"
					class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
				>
					–û—Ç–º–µ–Ω–∞
				</button>
			</div>
		</div>
	</div>

	<!-- Assign Supplier Modal -->
	<div id="assignSupplierModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center">
		<div class="bg-background rounded-lg shadow-xl max-w-md w-full mx-4">
			<div class="p-6 border-b">
				<div class="flex justify-between items-center">
					<h3 class="text-lg font-semibold">–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</h3>
					<button onclick="closeAssignSupplierModal()" class="text-muted-foreground hover:text-foreground">‚úï</button>
				</div>
				<p class="text-sm text-muted-foreground mt-2" id="assignSupplierCategoryName">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: </p>
			</div>

			<div class="p-6">
				<label class="block text-sm font-medium mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</label>
				<select id="supplierSelect" class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary">
					<option value="">–ó–∞–≥—Ä—É–∑–∫–∞...</option>
				</select>
			</div>

			<div class="p-6 border-t flex gap-3">
				<button
					onclick="submitAssignSupplier()"
					class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
				>
					–ù–∞–∑–Ω–∞—á–∏—Ç—å
				</button>
				<button
					onclick="closeAssignSupplierModal()"
					class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
				>
					–û—Ç–º–µ–Ω–∞
				</button>
			</div>
		</div>
	</div>

	<!-- Edit Supplier Modal -->
	<div id="editSupplierModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center">
		<div class="bg-background rounded-lg shadow-xl max-w-md w-full mx-4">
			<div class="p-6 border-b">
				<div class="flex justify-between items-center">
					<h3 class="text-lg font-semibold">–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</h3>
					<button onclick="closeEditSupplierModal()" class="text-muted-foreground hover:text-foreground">‚úï</button>
				</div>
			</div>

			<div class="p-6 space-y-4">
				<input type="hidden" id="editSupplierId">

				<div>
					<label class="block text-sm font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
					<input
						id="editSupplierName"
						type="text"
						class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
						placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
					>
				</div>

				<div>
					<label class="block text-sm font-medium mb-2">–¢–µ–ª–µ—Ñ–æ–Ω</label>
					<input
						id="editSupplierPhone"
						type="tel"
						class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
						placeholder="+996XXXXXXXXX"
					>
				</div>

				<div>
					<label class="block text-sm font-medium mb-2">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
					<textarea
						id="editSupplierContact"
						class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
						placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
						rows="2"
					></textarea>
				</div>
			</div>

			<div class="p-6 border-t flex gap-3">
				<button
					onclick="submitEditSupplier()"
					class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
				>
					–°–æ—Ö—Ä–∞–Ω–∏—Ç—å
				</button>
				<button
					onclick="closeEditSupplierModal()"
					class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
				>
					–û—Ç–º–µ–Ω–∞
				</button>
			</div>
		</div>
	</div>

	<script>
		import { mount } from 'svelte';
		import OrderCard from '../lib/components/OrderCard.svelte';

		// Load orders by category
		async function loadOrdersByCategory() {
			console.log('üìã Loading orders by category...');
			try {
				const response = await fetch('/api/orders-by-category');
				const data = await response.json();

				if (data.success) {
					displayOrdersByCategory(data.data);
				} else {
					console.error('‚ùå Failed to load orders:', data.error);
					displayOrdersByCategory([]);
				}
			} catch (error) {
				console.error('‚ùå Error loading orders:', error);
				displayOrdersByCategory([]);
			}
		}

		// Display orders using Svelte components
		function displayOrdersByCategory(orders: any[]) {
			const container = document.getElementById('ordersByCategory');
			if (!container) return;

			if (!orders || orders.length === 0) {
				container.innerHTML = `
					<div class="text-center py-12">
						<div class="text-6xl mb-4">üìã</div>
						<p class="text-xl font-semibold mb-2">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
						<p class="text-muted-foreground">–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è</p>
					</div>
				`;
				return;
			}

			// Clear container
			container.innerHTML = '';

			// Create container for cards
			const cardsContainer = document.createElement('div');
			cardsContainer.className = 'space-y-4';
			container.appendChild(cardsContainer);

			// Create Svelte component for each order
			orders.forEach((order: any) => {
				const target = document.createElement('div');
				cardsContainer.appendChild(target);

				mount(OrderCard, {
					target,
					props: { order }
				});
			});
		}

		// Tab switching
		function switchTab(tabName) {
			// Hide all tabs
			document.querySelectorAll('.tab-content').forEach(tab => {
				tab.classList.add('hidden');
			});

			// Remove active state from all buttons
			document.querySelectorAll('.tab-button').forEach(btn => {
				btn.classList.remove('bg-primary', 'text-primary-foreground');
				btn.classList.add('bg-secondary', 'text-secondary-foreground');
			});

			// Show selected tab
			const selectedTab = document.getElementById(`tab-${tabName}`);
			if (selectedTab) {
				selectedTab.classList.remove('hidden');
			}

			// Add active state to selected button
			const selectedButton = document.querySelector(`[data-tab="${tabName}"]`);
			if (selectedButton) {
				selectedButton.classList.remove('bg-secondary', 'text-secondary-foreground');
				selectedButton.classList.add('bg-primary', 'text-primary-foreground');
			}

			// Load data for specific tabs
			if (tabName === 'delivered') {
				loadDeliveredOrders();
			} else if (tabName === 'categories') {
				loadCategories();
			} else if (tabName === 'suppliers') {
				loadSuppliers();
			} else if (tabName === 'departments') {
				loadSections();
			} else if (tabName === 'products') {
				loadProducts();
			}
		}

		// Load delivered orders
		async function loadDeliveredOrders() {
			const container = document.getElementById('deliveredOrders');
			if (!container) return;

			container.innerHTML = '<div class="text-center text-muted-foreground py-12"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';

			try {
				const response = await fetch('/api/orders-by-category?status=delivered');
				const data = await response.json();

				if (data.success && data.data && data.data.length > 0) {
					// Reuse the same display function
					container.innerHTML = '';
					const cardsContainer = document.createElement('div');
					cardsContainer.className = 'space-y-4';
					container.appendChild(cardsContainer);

					data.data.forEach((order: any) => {
						const target = document.createElement('div');
						cardsContainer.appendChild(target);

						mount(OrderCard, {
							target,
							props: { order }
						});
					});
				} else {
					container.innerHTML = `
						<div class="text-center py-12">
							<div class="text-6xl mb-4">‚úÖ</div>
							<p class="text-xl font-semibold mb-2">–ù–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>
							<p class="text-muted-foreground">–î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
						</div>
					`;
				}
			} catch (error) {
				console.error('Error loading delivered orders:', error);
				container.innerHTML = '<div class="text-center text-error py-12"><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p></div>';
			}
		}

		// Load categories with suppliers
		async function loadCategories() {
			const container = document.getElementById('categorySuppliers');
			container.innerHTML = '<div class="text-center text-muted-foreground py-12"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';

			try {
				const response = await fetch('/api/categories');
				const data = await response.json();

				if (data.success && data.data && data.data.length > 0) {
					container.innerHTML = '';
					const list = document.createElement('div');
					list.className = 'space-y-2';

					data.data.forEach(category => {
						const card = document.createElement('div');
						card.className = 'native-card';
						card.innerHTML = `
							<div class="p-4">
							<div class="flex items-center justify-between gap-2">
								<div class="flex-1 min-w-0">
									<h4 class="font-medium text-base truncate">üè∑Ô∏è ${category.name}</h4>
									<div class="text-xs text-muted-foreground mt-0.5">
										${category.supplier_name ?
											`üì¶ ${category.supplier_name}` :
											'<span class="text-destructive">–ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</span>'
										}
									</div>
								</div>
								<button
									onclick="assignSupplierToCategory(${category.id}, '${category.name}')"
									class="flex-shrink-0 inline-flex items-center justify-center rounded-full text-xs font-medium h-8 px-4 bg-secondary hover:bg-secondary/80 active:scale-95 transition-all"
								>
									${category.supplier_name ? '–ò–∑–º–µ–Ω–∏—Ç—å' : '–ù–∞–∑–Ω–∞—á–∏—Ç—å'}
								</button>
							</div>
							</div>
						`;
						list.appendChild(card);
					});

					container.appendChild(list);
				} else {
					container.innerHTML = `
						<div class="text-center py-12">
							<div class="text-6xl mb-4">üè∑Ô∏è</div>
							<p class="text-xl font-semibold mb-2">–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π</p>
							<p class="text-muted-foreground">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è</p>
						</div>
					`;
				}
			} catch (error) {
				console.error('Error loading categories:', error);
				container.innerHTML = '<div class="text-center text-destructive py-12"><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p></div>';
			}
		}

		// Load suppliers
		async function loadSuppliers() {
			const container = document.getElementById('suppliersList');
			container.innerHTML = '<div class="text-center text-muted-foreground py-12"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';

			try {
				const response = await fetch('/api/suppliers');
				const data = await response.json();

				if (data.success && data.data && data.data.length > 0) {
					container.innerHTML = '';
					const list = document.createElement('div');
					list.className = 'space-y-2';

					data.data.forEach(supplier => {
						const card = document.createElement('div');
						card.className = 'native-card';
						card.innerHTML = `
							<div class="p-4">
							<div class="flex items-start justify-between gap-2">
								<div class="flex-1 min-w-0">
									<h4 class="font-medium text-base truncate">üè¢ ${supplier.name}</h4>
									<div class="text-xs text-muted-foreground mt-0.5 space-y-0.5">
										${supplier.phone ?
											`<div>üì± ${supplier.phone}</div>` :
											'<div class="text-destructive">‚ö†Ô∏è –ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞</div>'
										}
										${supplier.contact_info ?
											`<div class="truncate">${supplier.contact_info}</div>` :
											''
										}
									</div>
								</div>
								<button
									onclick="openEditSupplierModal(${supplier.id}, '${supplier.name.replace(/'/g, "\\'")}', '${supplier.phone || ''}', '${supplier.contact_info ? supplier.contact_info.replace(/'/g, "\\'") : ''}')"
									class="flex-shrink-0 h-8 px-4 text-xs rounded-full bg-secondary hover:bg-secondary/80 active:scale-95 transition-all"
								>
									‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
								</button>
							</div>
							</div>
						`;
						list.appendChild(card);
					});

					container.appendChild(list);
				} else {
					container.innerHTML = `
						<div class="text-center py-12">
							<div class="text-6xl mb-4">üè¢</div>
							<p class="text-xl font-semibold mb-2">–ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</p>
							<p class="text-muted-foreground">–î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏</p>
						</div>
					`;
				}
			} catch (error) {
				console.error('Error loading suppliers:', error);
				container.innerHTML = '<div class="text-center text-destructive py-12"><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p></div>';
			}
		}

		// Assign supplier to category
		let currentCategoryId = null;
		let currentCategoryName = null;

		window.assignSupplierToCategory = async function(categoryId, categoryName) {
			currentCategoryId = categoryId;
			currentCategoryName = categoryName;

			// Update modal title
			document.getElementById('assignSupplierCategoryName').textContent = `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`;

			// Load suppliers
			try {
				const response = await fetch('/api/suppliers');
				const data = await response.json();

				const select = document.getElementById('supplierSelect');

				if (data.success && data.data && data.data.length > 0) {
					select.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ --</option>';
					data.data.forEach(supplier => {
						const option = document.createElement('option');
						option.value = supplier.id;
						option.textContent = supplier.name;
						select.appendChild(option);
					});
				} else {
					select.innerHTML = '<option value="">–ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</option>';
				}

				// Show modal
				document.getElementById('assignSupplierModal').classList.remove('hidden');
			} catch (error) {
				console.error('Error loading suppliers:', error);
				alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤');
			}
		};

		window.closeAssignSupplierModal = function() {
			document.getElementById('assignSupplierModal').classList.add('hidden');
			currentCategoryId = null;
			currentCategoryName = null;
		};

		window.submitAssignSupplier = async function() {
			const supplierId = document.getElementById('supplierSelect').value;

			if (!supplierId) {
				alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞');
				return;
			}

			try {
				const response = await fetch('/api/categories', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						category_id: currentCategoryId,
						supplier_id: parseInt(supplierId)
					})
				});

				const data = await response.json();

				if (data.success) {
					alert('‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!');
					closeAssignSupplierModal();
					loadCategories(); // Refresh the list
				} else {
					alert('‚ùå –û—à–∏–±–∫–∞: ' + data.error);
				}
			} catch (error) {
				console.error('Error assigning supplier:', error);
				alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞');
			}
		};

		// Edit supplier modal functions
		window.openEditSupplierModal = function(id, name, phone, contactInfo) {
			document.getElementById('editSupplierId').value = id;
			document.getElementById('editSupplierName').value = name;
			document.getElementById('editSupplierPhone').value = phone || '';
			document.getElementById('editSupplierContact').value = contactInfo || '';
			document.getElementById('editSupplierModal').classList.remove('hidden');
		};

		window.closeEditSupplierModal = function() {
			document.getElementById('editSupplierModal').classList.add('hidden');
		};

		window.submitEditSupplier = async function() {
			const id = document.getElementById('editSupplierId').value;
			const name = document.getElementById('editSupplierName').value.trim();
			const phone = document.getElementById('editSupplierPhone').value.trim();
			const contact_info = document.getElementById('editSupplierContact').value.trim();

			if (!name) {
				alert('‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
				return;
			}

			try {
				const response = await fetch('/api/suppliers', {
					method: 'PUT',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						id: parseInt(id),
						name: name,
						phone: phone || null,
						contact_info: contact_info || null
					})
				});

				const data = await response.json();

				if (data.success) {
					alert('‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
					closeEditSupplierModal();
					loadSuppliers(); // Refresh the list
					loadCategories(); // Also refresh categories to update supplier info there
				} else {
					alert('‚ùå –û—à–∏–±–∫–∞: ' + data.error);
				}
			} catch (error) {
				console.error('Error updating supplier:', error);
				alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞');
			}
		};

		// Run auto-categorization
		window.runAutoCategorization = async function() {
			if (!confirm('ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤?\n\n–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π.')) {
				return;
			}

			try {
				const response = await fetch('/api/auto-categorize-products', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' }
				});

				const data = await response.json();

				if (data.success) {
					alert(`‚úÖ –ê–≤—Ç–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
						`–°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${data.data.categoriesCreated}\n` +
						`–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${data.data.categorized}\n` +
						`–ù–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${data.data.uncategorized}`);
					loadCategories(); // Refresh the display
				} else {
					alert('‚ùå –û—à–∏–±–∫–∞: ' + data.error);
				}
			} catch (error) {
				console.error('Error running auto-categorization:', error);
				alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏');
			}
		};

		// Add new category
		window.addNewCategory = async function() {
			// Load suppliers for the dropdown
			try {
				const response = await fetch('/api/suppliers');
				const data = await response.json();

				const select = document.getElementById('categorySupplierSelect');

				if (data.success && data.data && data.data.length > 0) {
					select.innerHTML = '<option value="">-- –ë–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ --</option>';
					data.data.forEach(supplier => {
						const option = document.createElement('option');
						option.value = supplier.id;
						option.textContent = supplier.name;
						select.appendChild(option);
					});
				} else {
					select.innerHTML = '<option value="">–ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</option>';
				}

				// Clear input and show modal
				document.getElementById('categoryNameInput').value = '';
				document.getElementById('addCategoryModal').classList.remove('hidden');
			} catch (error) {
				console.error('Error loading suppliers:', error);
				alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤');
			}
		};

		window.closeAddCategoryModal = function() {
			document.getElementById('addCategoryModal').classList.add('hidden');
		};

		window.submitAddCategory = async function() {
			const categoryName = document.getElementById('categoryNameInput').value.trim();
			const supplierId = document.getElementById('categorySupplierSelect').value;

			if (!categoryName) {
				alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
				return;
			}

			try {
				const response = await fetch('/api/categories', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						name: categoryName,
						supplier_id: supplierId ? parseInt(supplierId) : null
					})
				});

				const data = await response.json();

				if (data.success) {
					alert('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
					closeAddCategoryModal();
					loadCategories(); // Refresh the list
				} else {
					alert('‚ùå –û—à–∏–±–∫–∞: ' + data.error);
				}
			} catch (error) {
				console.error('Error creating category:', error);
				alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
			}
		};

		// Load sections
		async function loadSections() {
			const container = document.getElementById('sectionsList');
			container.innerHTML = '<div class="text-center text-muted-foreground py-12"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';

			try {
				const response = await fetch('/api/sections');
				const data = await response.json();

				if (data.success && data.data && data.data.length > 0) {
					container.innerHTML = '';
					const grid = document.createElement('div');
					grid.className = 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3';

					data.data.forEach(section => {
						const card = document.createElement('div');
						card.className = 'rounded-lg border bg-card p-3';
						card.innerHTML = `
							<div class="flex items-start justify-between gap-2">
								<div class="flex-1 min-w-0">
									<h4 class="font-medium text-base truncate">${section.emoji || 'üì¶'} ${section.name}</h4>
									<div class="text-xs text-muted-foreground mt-0.5">
										${section.poster_storage_id ?
											`üîó Poster` :
											`üìù –ö–∞—Å—Ç–æ–º–Ω–∞—è`
										}
									</div>
								</div>
								${section.products_count ?
									`<div class="flex-shrink-0 text-right">
										<div class="text-lg font-semibold">${section.products_count}</div>
										<div class="text-[10px] text-muted-foreground">—Ç–æ–≤–∞—Ä–æ–≤</div>
									</div>` :
									''
								}
							</div>
						`;
						grid.appendChild(card);
					});

					container.appendChild(grid);
				} else {
					container.innerHTML = `
						<div class="text-center py-12">
							<div class="text-6xl mb-4">üè™</div>
							<p class="text-xl font-semibold mb-2">–ù–µ—Ç —Å–µ–∫—Ü–∏–π</p>
							<p class="text-muted-foreground">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —Å Poster –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é</p>
						</div>
					`;
				}
			} catch (error) {
				console.error('Error loading sections:', error);
				container.innerHTML = '<div class="text-center text-destructive py-12"><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p></div>';
			}
		}

		// Add new section
		window.addNewSection = function() {
			document.getElementById('sectionNameInput').value = '';
			document.getElementById('sectionEmojiInput').value = '';
			document.getElementById('addSectionModal').classList.remove('hidden');
		};

		window.closeAddSectionModal = function() {
			document.getElementById('addSectionModal').classList.add('hidden');
		};

		window.submitAddSection = async function() {
			const name = document.getElementById('sectionNameInput').value.trim();
			const emoji = document.getElementById('sectionEmojiInput').value.trim() || 'üì¶';

			if (!name) {
				alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏');
				return;
			}

			try {
				const response = await fetch('/api/sections', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ name, emoji })
				});

				const data = await response.json();

				if (data.success) {
					alert('‚úÖ –°–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
					closeAddSectionModal();
					loadSections();
				} else {
					alert('‚ùå –û—à–∏–±–∫–∞: ' + data.error);
				}
			} catch (error) {
				console.error('Error creating section:', error);
				alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏');
			}
		};

		// Sync sections from Poster
		window.syncSectionsFromPoster = async function() {
			if (!confirm('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ü–∏–∏ –∏–∑ Poster?\n\n–≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–ª–∞–¥–æ–≤ Poster.')) {
				return;
			}

			try {
				const response = await fetch('/api/sync-sections');
				const data = await response.json();

				if (data.success) {
					alert(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°–æ–∑–¥–∞–Ω–æ: ${data.data.created}\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.data.updated}\n–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${data.data.skipped}`);
					loadSections();
				} else {
					alert('‚ùå –û—à–∏–±–∫–∞: ' + data.error);
				}
			} catch (error) {
				console.error('Error syncing sections:', error);
				alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
			}
		};

		// Store products globally for filtering
		let allProducts = [];

		// Load products (from sections and custom)
		async function loadProducts() {
			const container = document.getElementById('productsList');
			container.innerHTML = '<div class="text-center text-muted-foreground py-12"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';

			try {
				// Load section products, custom products, and categories in parallel
				const [sectionsRes, customRes, categoriesRes] = await Promise.all([
					fetch('/api/section-products'),
					fetch('/api/custom-products'),
					fetch('/api/categories')
				]);

				const sectionsData = await sectionsRes.json();
				const customData = await customRes.json();
				const categoriesData = await categoriesRes.json();

				const sectionProducts = sectionsData.success ? sectionsData.data.map(p => ({ ...p, type: 'section' })) : [];
				const customProducts = customData.success ? customData.data.map(p => ({ ...p, type: 'custom' })) : [];
				const categories = categoriesData.success ? categoriesData.data : [];

				// Store products globally
				allProducts = [...sectionProducts, ...customProducts];

				// Populate category filter dropdown
				const categoryFilter = document.getElementById('categoryFilterSelect');
				categoryFilter.innerHTML = '<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
				categories.forEach(cat => {
					categoryFilter.innerHTML += `<option value="${cat.id}">${cat.name}</option>`;
				});

				displayProducts(allProducts, categories);

			} catch (error) {
				console.error('Error loading products:', error);
				container.innerHTML = '<div class="text-center text-destructive py-12"><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p></div>';
			}
		}

		// Display products
		function displayProducts(products, categories) {
			const container = document.getElementById('productsList');

			if (products.length === 0) {
				container.innerHTML = `
					<div class="text-center py-12">
						<div class="text-6xl mb-4">üì¶</div>
						<p class="text-xl font-semibold mb-2">–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</p>
						<p class="text-muted-foreground">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —Å–µ–∫—Ü–∏–∏ –∏–∑ Poster –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤—Ä—É—á–Ω—É—é</p>
					</div>
				`;
				return;
			}

			const sectionProducts = products.filter(p => p.type === 'section');
			const customProducts = products.filter(p => p.type === 'custom');

			let html = '';

			if (sectionProducts.length > 0) {
				html += '<div class="mb-6"><h4 class="text-lg font-semibold mb-3">üì¶ –¢–æ–≤–∞—Ä—ã –∏–∑ —Å–µ–∫—Ü–∏–π Poster</h4>';
				html += '<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">';

				sectionProducts.forEach(product => {
					html += `
						<div class="rounded-lg border bg-card p-3">
							<div class="flex justify-between items-start mb-2">
								<div class="flex-1">
									<div class="font-medium">${product.name}</div>
									<div class="text-sm text-muted-foreground">${product.section_name || '–ë–µ–∑ —Å–µ–∫—Ü–∏–∏'}</div>
								</div>
								<div class="text-sm font-medium text-muted-foreground">${product.unit || '—à—Ç'}</div>
							</div>
							<div class="flex items-center gap-2">
								<select
									onchange="updateProductCategory('${product.id}', this.value, 'section')"
									class="flex-1 text-xs px-2 py-1 border rounded bg-background"
								>
									<option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
									${categories.map(cat => `
										<option value="${cat.id}" ${product.category_id == cat.id ? 'selected' : ''}>
											${cat.name}
										</option>
									`).join('')}
								</select>
							</div>
						</div>
					`;
				});

				html += '</div></div>';
			}

			if (customProducts.length > 0) {
				html += '<div class="mb-6"><h4 class="text-lg font-semibold mb-3">üìù –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</h4>';
				html += '<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">';

				customProducts.forEach(product => {
					html += `
						<div class="rounded-lg border bg-card p-3">
							<div class="flex justify-between items-start mb-2">
								<div class="flex-1">
									<div class="font-medium">${product.name || product.product_name}</div>
									<div class="text-sm text-muted-foreground">${product.section_name || '–ë–µ–∑ —Å–µ–∫—Ü–∏–∏'}</div>
								</div>
								<div class="text-sm font-medium text-muted-foreground">${product.unit || '—à—Ç'}</div>
							</div>
							<div class="flex items-center gap-2">
								<select
									onchange="updateProductCategory('${product.id}', this.value, 'custom')"
									class="flex-1 text-xs px-2 py-1 border rounded bg-background"
								>
									<option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
									${categories.map(cat => `
										<option value="${cat.id}" ${product.category_id == cat.id ? 'selected' : ''}>
											${cat.name}
										</option>
									`).join('')}
								</select>
							</div>
						</div>
					`;
				});

				html += '</div></div>';
			}

			container.innerHTML = html;
		}

		// Filter products based on search and category
		window.filterProducts = async function() {
			const searchTerm = document.getElementById('productSearchInput').value.toLowerCase();
			const categoryId = document.getElementById('categoryFilterSelect').value;

			let filtered = allProducts;

			// Filter by search term
			if (searchTerm) {
				filtered = filtered.filter(p => {
					const name = (p.name || p.product_name || '').toLowerCase();
					const sectionName = (p.section_name || '').toLowerCase();
					return name.includes(searchTerm) || sectionName.includes(searchTerm);
				});
			}

			// Filter by category
			if (categoryId) {
				filtered = filtered.filter(p => p.category_id == categoryId);
			}

			// Re-fetch categories for display
			try {
				const categoriesRes = await fetch('/api/categories');
				const categoriesData = await categoriesRes.json();
				const categories = categoriesData.success ? categoriesData.data : [];
				displayProducts(filtered, categories);
			} catch (error) {
				console.error('Error filtering products:', error);
			}
		};

		// Update product category
		window.updateProductCategory = async function(productId, categoryId, productType) {
			try {
				const response = await fetch('/api/update-product-category', {
					method: 'PUT',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						productId,
						categoryId: categoryId || null,
						productType
					})
				});

				const data = await response.json();

				if (data.success) {
					// Update local data
					const product = allProducts.find(p => p.id === productId && p.type === productType);
					if (product) {
						product.category_id = categoryId || null;
					}
					console.log('‚úÖ Category updated');
				} else {
					console.error('‚ùå Error:', data.error);
					alert('–û—à–∏–±–∫–∞: ' + data.error);
				}
			} catch (error) {
				console.error('Error updating category:', error);
				alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
			}
		};

		// Sync products from Poster
		window.syncProducts = async function() {
			if (!confirm('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ Poster?\n\n–≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Poster.')) {
				return;
			}

			try {
				const response = await fetch('/api/sync-section-products');
				const data = await response.json();

				if (data.success) {
					alert(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°–æ–∑–¥–∞–Ω–æ: ${data.data.created}\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.data.updated}\n–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${data.data.skipped}`);
					loadProducts(); // Reload products list
				} else {
					alert('‚ùå –û—à–∏–±–∫–∞: ' + data.error);
				}
			} catch (error) {
				console.error('Error syncing products:', error);
				alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
			}
		};

		// Placeholder functions
		window.exportAllDeliveredOrders = function() {
			alert('–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
		};

		window.addNewSupplier = function() {
			alert('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
		};

		window.openAddProductModal = async function() {
			const modal = document.getElementById('addProductModal');
			modal.classList.remove('hidden');

			// Load sections and categories for the dropdowns
			try {
				const [sectionsResponse, categoriesResponse] = await Promise.all([
					fetch('/api/sections'),
					fetch('/api/categories')
				]);

				const sectionsData = await sectionsResponse.json();
				const categoriesData = await categoriesResponse.json();

				// Populate sections
				if (sectionsData.success) {
					const sectionSelect = document.getElementById('productSectionSelect');
					sectionSelect.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é --</option>';
					sectionsData.data.forEach(section => {
						sectionSelect.innerHTML += `<option value="${section.id}">${section.emoji || 'üì¶'} ${section.name}</option>`;
					});
				}

				// Populate categories
				if (categoriesData.success) {
					const categorySelect = document.getElementById('productCategorySelect');
					categorySelect.innerHTML = '<option value="">-- –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ --</option>';
					categoriesData.data.forEach(cat => {
						categorySelect.innerHTML += `<option value="${cat.id}">${cat.name}</option>`;
					});
				}
			} catch (error) {
				console.error('Error loading data:', error);
			}
		};

		window.closeAddProductModal = function() {
			const modal = document.getElementById('addProductModal');
			modal.classList.add('hidden');
			// Clear inputs
			document.getElementById('productNameInput').value = '';
			document.getElementById('productUnitInput').value = '—à—Ç';
			document.getElementById('productSectionSelect').value = '';
			document.getElementById('productCategorySelect').value = '';
		};

		window.submitAddProduct = async function() {
			const name = document.getElementById('productNameInput').value.trim();
			const unit = document.getElementById('productUnitInput').value.trim() || '—à—Ç';
			const sectionId = document.getElementById('productSectionSelect').value || null;
			const categoryId = document.getElementById('productCategorySelect').value || null;

			if (!name) {
				alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
				return;
			}

			if (!sectionId) {
				alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é');
				return;
			}

			try {
				const response = await fetch('/api/custom-products', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ name, unit, section_id: sectionId, category_id: categoryId })
				});

				const data = await response.json();

				if (data.success) {
					alert('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
					closeAddProductModal();
					loadProducts(); // Reload products list
				} else {
					alert('‚ùå –û—à–∏–±–∫–∞: ' + data.error);
				}
			} catch (error) {
				console.error('Error creating product:', error);
				alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
			}
		};

		// Load data on page load
		document.addEventListener('DOMContentLoaded', () => {
			console.log('üì± Manager page loaded with shadcn-svelte');

			// Setup tab switching
			document.querySelectorAll('.tab-button').forEach(button => {
				button.addEventListener('click', () => {
					const tabName = button.getAttribute('data-tab');
					if (tabName) {
						switchTab(tabName);
					}
				});
			});

			// Load initial data
			loadOrdersByCategory();
			setInterval(loadOrdersByCategory, 30000);
		});
	</script>
</Layout>
