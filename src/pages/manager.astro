---
import Layout from "../layouts/Layout.astro";
import { getTenantId } from "../lib/tenant-manager.js";
import "../styles/app.css";

// Get tenant ID from request
const tenantId = getTenantId(Astro.request);
---

<style>
    /* Native app styling */
    .scrollbar-hide {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
    .scrollbar-hide::-webkit-scrollbar {
        display: none;
    }

    .overflow-x-auto {
        scroll-behavior: smooth;
    }

    .tab-button {
        -webkit-tap-highlight-color: transparent;
        touch-action: manipulation;
    }

    /* Native card style */
    .native-card {
        background: var(--card);
        border: 1px solid var(--border);
        border-radius: 12px;
        overflow: hidden;
        transition: all 0.2s;
    }

    .native-card:active {
        transform: scale(0.98);
    }

    /* Pull to refresh hint */
    @keyframes slideDown {
        from {
            transform: translateY(-100%);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    .slide-down {
        animation: slideDown 0.3s ease-out;
    }

    /* Safe area for mobile */
    @supports (padding-bottom: env(safe-area-inset-bottom)) {
        .bottom-nav {
            padding-bottom: calc(0.5rem + env(safe-area-inset-bottom));
        }
    }

    /* iOS style lists */
    .native-list {
        background: var(--background);
        border-radius: 12px;
        overflow: hidden;
    }

    .native-list-item {
        background: var(--card);
        border-bottom: 1px solid var(--border);
        padding: 1rem;
        transition: background 0.2s;
    }

    .native-list-item:last-child {
        border-bottom: none;
    }

    .native-list-item:active {
        background: var(--accent);
    }

    /* Orders Table Styles */
    .orders-table-container {
        background: var(--card);
        border: 1px solid var(--border);
        border-radius: 12px;
        overflow: hidden;
    }

    .orders-table {
        width: 100%;
        border-collapse: collapse;
    }

    .orders-table thead {
        background: var(--muted);
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .orders-table th {
        padding: 0.75rem 1rem;
        text-align: left;
        font-size: 0.6875rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        color: var(--muted-foreground);
        border-bottom: 1px solid var(--border);
        white-space: nowrap;
        cursor: pointer;
        user-select: none;
    }

    .orders-table th:hover {
        background: hsl(var(--muted) / 0.8);
    }

    .orders-table th.sortable::after {
        content: " ‚áÖ";
        opacity: 0.3;
        font-size: 0.75rem;
    }

    .orders-table th.sorted-asc::after {
        content: " ‚Üë";
        opacity: 1;
    }

    .orders-table th.sorted-desc::after {
        content: " ‚Üì";
        opacity: 1;
    }

    .orders-table tbody tr {
        cursor: pointer;
        transition: background-color 0.1s;
        border-bottom: 1px solid var(--border);
    }

    .orders-table tbody tr:nth-child(even) {
        background: hsl(var(--muted) / 0.2);
    }

    .orders-table tbody tr:hover {
        background: hsl(var(--accent) / 0.5);
    }

    .orders-table tbody tr:active {
        background: hsl(var(--accent) / 0.7);
    }

    .orders-table td {
        padding: 0.875rem 1rem;
        font-size: 0.875rem;
    }

    .orders-table td:first-child {
        font-weight: 600;
        color: var(--primary);
    }

    .orders-table td.number-cell {
        text-align: right;
        font-weight: 600;
        font-variant-numeric: tabular-nums;
    }

    .orders-table .action-buttons {
        display: flex;
        gap: 0.5rem;
        justify-content: flex-end;
    }

    .orders-table .action-btn {
        padding: 0.375rem 0.75rem;
        border-radius: 0.5rem;
        font-size: 0.75rem;
        transition: all 0.15s;
        border: 1px solid var(--border);
        background: var(--background);
        cursor: pointer;
    }

    .orders-table .action-btn:hover {
        background: var(--accent);
    }

    .orders-table .action-btn:active {
        transform: scale(0.95);
    }

    /* Status badges */
    .status-badge-table {
        display: inline-flex;
        align-items: center;
        padding: 0.25rem 0.625rem;
        border-radius: 999px;
        font-size: 0.75rem;
        font-weight: 500;
        white-space: nowrap;
    }

    .status-pending {
        background: hsl(48, 100%, 85%);
        color: hsl(45, 100%, 30%);
    }

    .status-sent {
        background: hsl(210, 100%, 85%);
        color: hsl(210, 100%, 30%);
    }

    .status-delivered {
        background: hsl(142, 71%, 85%);
        color: hsl(142, 71%, 30%);
    }

    /* Mobile Cards */
    .order-card-mobile {
        background: var(--card);
        border: 1px solid var(--border);
        border-radius: 10px;
        padding: 0.875rem;
        margin-bottom: 0.75rem;
        transition: all 0.15s;
        cursor: pointer;
    }

    .order-card-mobile:active {
        transform: scale(0.98);
        background: hsl(var(--accent) / 0.3);
    }

    .order-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .order-card-title {
        font-size: 0.9375rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .order-card-meta {
        font-size: 0.8125rem;
        color: var(--muted-foreground);
        margin-bottom: 0.625rem;
    }

    .order-card-actions {
        display: flex;
        gap: 0.5rem;
        padding-top: 0.5rem;
        border-top: 1px solid var(--border);
    }

    .order-card-actions button {
        flex: 1;
        padding: 0.5rem 0.75rem;
        border-radius: 0.5rem;
        font-size: 0.75rem;
        font-weight: 500;
        border: 1px solid var(--border);
        background: var(--background);
        transition: all 0.15s;
        min-height: 44px;
    }

    .order-card-actions button:active {
        transform: scale(0.95);
        background: var(--accent);
    }

    .order-card-actions .btn-primary {
        background: var(--primary);
        color: var(--primary-foreground);
        border-color: var(--primary);
    }

    .order-card-actions .btn-danger {
        background: hsl(0, 84%, 60%);
        color: white;
        border-color: hsl(0, 84%, 60%);
    }

    /* Responsive behavior */
    @media (min-width: 1024px) {
        .orders-table-container {
            display: block;
        }

        .orders-mobile-container {
            display: none;
        }
    }

    @media (max-width: 1023px) {
        .orders-table-container {
            display: none;
        }

        .orders-mobile-container {
            display: block;
        }
    }
</style>

<Layout title="–ú–µ–Ω–µ–¥–∂–µ—Ä - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è">
    <div class="min-h-screen bg-background pb-20">
        <!-- Mobile Native Header -->
        <div class="sticky top-0 z-50 bg-background border-b">
            <div class="flex items-center h-14 px-4">
                <a
                    href="/"
                    class="flex items-center justify-center w-10 h-10 -ml-2 rounded-full hover:bg-accent transition-colors"
                >
                    <svg
                        class="w-6 h-6"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M15 19l-7-7 7-7"></path>
                    </svg>
                </a>
                <h1 class="flex-1 text-lg font-semibold ml-2">
                    –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                </h1>
                <div
                    id="tenantIndicator"
                    class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full font-medium"
                >
                    üè¢ <span id="tenantId">{tenantId}</span>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <main>
            <!-- Mobile Tabs - Horizontal Scroll -->
            <div class="sticky top-14 z-40 bg-background border-b">
                <div class="overflow-x-auto scrollbar-hide">
                    <nav class="flex gap-1 px-4 py-2 min-w-max">
                        <button
                            data-tab="orders"
                            class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-primary text-primary-foreground"
                        >
                            üìã –ó–∞–∫–∞–∑—ã
                        </button>
                        <button
                            data-tab="delivered"
                            class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-secondary text-secondary-foreground"
                        >
                            ‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
                        </button>
                        <button
                            data-tab="categories"
                            class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-secondary text-secondary-foreground"
                        >
                            üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
                        </button>
                        <button
                            data-tab="suppliers"
                            class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-secondary text-secondary-foreground"
                        >
                            üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏
                        </button>
                        <button
                            data-tab="departments"
                            class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-secondary text-secondary-foreground"
                        >
                            üè™ –û—Ç–¥–µ–ª—ã
                        </button>
                        <button
                            data-tab="products"
                            class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-secondary text-secondary-foreground"
                        >
                            üì¶ –¢–æ–≤–∞—Ä—ã
                        </button>
                        <button
                            data-tab="settings"
                            class="tab-button flex-shrink-0 px-4 py-2 text-sm font-medium rounded-full bg-secondary text-secondary-foreground"
                        >
                            ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                        </button>
                    </nav>
                </div>
            </div>

            <div class="p-4">
                <!-- Orders Tab -->
                <div id="tab-orders" class="tab-content">
                    <div id="ordersByCategory">
                        <div class="text-center text-muted-foreground py-12">
                            <div
                                class="inline-block animate-spin rounded-full h-12 w-12 border-4 border-primary border-t-transparent"
                            >
                            </div>
                            <p class="mt-4">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
                        </div>
                    </div>
                </div>

                <!-- Delivered Tab -->
                <div id="tab-delivered" class="tab-content hidden">
                    <div id="deliveredOrders">
                        <div class="text-center text-muted-foreground py-12">
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                        </div>
                    </div>
                </div>

                <!-- Categories Tab -->
                <div id="tab-categories" class="tab-content hidden">
                    <div class="flex justify-between items-center mb-4">
                        <div class="flex gap-2">
                            <button
                                onclick="runAutoCategorization()"
                                class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
                            >
                                ü§ñ –ê–≤—Ç–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
                            </button>
                            <button
                                onclick="addNewCategory()"
                                class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
                            >
                                ‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                            </button>
                        </div>
                    </div>
                    <div id="categorySuppliers">
                        <div class="text-center text-muted-foreground py-12">
                            <p>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
                        </div>
                    </div>
                </div>

                <!-- Suppliers Tab -->
                <div id="tab-suppliers" class="tab-content hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-2xl font-bold">üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏</h3>
                        <div class="flex gap-2">
                            <button
                                onclick="syncSuppliersFromPoster()"
                                class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
                            >
                                üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Poster
                            </button>
                            <button
                                onclick="addNewSupplier()"
                                class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
                            >
                                ‚ûï –î–æ–±–∞–≤–∏—Ç—å
                            </button>
                        </div>
                    </div>
                    <div id="suppliersList">
                        <div class="text-center text-muted-foreground py-12">
                            <p>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
                        </div>
                    </div>
                </div>

                <!-- Sections Tab (previously Departments) -->
                <div id="tab-departments" class="tab-content hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-2xl font-bold">üè™ –°–µ–∫—Ü–∏–∏</h3>
                        <div class="flex gap-2">
                            <button
                                onclick="syncSectionsFromPoster()"
                                class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
                            >
                                üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Poster
                            </button>
                            <button
                                onclick="addNewSection()"
                                class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
                            >
                                ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é
                            </button>
                        </div>
                    </div>
                    <div id="sectionsList">
                        <div class="text-center text-muted-foreground py-12">
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                        </div>
                    </div>
                </div>

                <!-- Products Tab -->
                <div id="tab-products" class="tab-content hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-2xl font-bold">üì¶ –¢–æ–≤–∞—Ä—ã</h3>
                        <div class="flex gap-2">
                            <button
                                onclick="syncProducts()"
                                class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
                            >
                                üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                            <button
                                onclick="openAddProductModal()"
                                class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
                            >
                                ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                            </button>
                        </div>
                    </div>

                    <!-- Search and Filters -->
                    <div class="mb-4 flex gap-3">
                        <input
                            type="text"
                            id="productSearchInput"
                            placeholder="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
                            oninput="filterProducts()"
                            class="flex-1 px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                        <select
                            id="categoryFilterSelect"
                            onchange="filterProducts()"
                            class="px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                        >
                            <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                        </select>
                    </div>

                    <div id="productsList">
                        <div class="text-center text-muted-foreground py-12">
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                        </div>
                    </div>
                </div>

                <!-- Settings Tab -->
                <div id="tab-settings" class="tab-content hidden">
                    <h3 class="text-2xl font-bold mb-4">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                    <div class="space-y-4">
                        <div
                            class="rounded-lg border bg-card text-card-foreground shadow-sm p-6"
                        >
                            <h2 class="text-xl font-semibold mb-2">
                                –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Poster
                            </h2>
                            <p class="text-sm text-muted-foreground mb-4">
                                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Poster POS —Å–∏—Å—Ç–µ–º–µ
                            </p>
                            <button
                                class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
                            >
                                –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
                            </button>
                        </div>
                        <div
                            class="rounded-lg border bg-card text-card-foreground shadow-sm p-6"
                        >
                            <h2 class="text-xl font-semibold mb-2">
                                –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            </h2>
                            <p class="text-sm text-muted-foreground mb-4">
                                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö
                            </p>
                            <button
                                class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
                            >
                                –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <!-- Add Section Modal -->
        <div
            id="addSectionModal"
            class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center"
        >
            <div
                class="bg-background rounded-lg shadow-xl max-w-md w-full mx-4"
            >
                <div class="p-6 border-b">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-semibold">–î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é</h3>
                        <button
                            onclick="closeAddSectionModal()"
                            class="text-muted-foreground hover:text-foreground"
                            >‚úï</button
                        >
                    </div>
                </div>

                <div class="p-6 space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏</label
                        >
                        <input
                            type="text"
                            id="sectionNameInput"
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∫–ª–∞–¥ 2"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–≠–º–æ–¥–∑–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label
                        >
                        <input
                            type="text"
                            id="sectionEmojiInput"
                            placeholder="üì¶"
                            maxlength="2"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                    </div>
                </div>

                <div class="p-6 border-t flex gap-3">
                    <button
                        onclick="submitAddSection()"
                        class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
                    >
                        –°–æ–∑–¥–∞—Ç—å
                    </button>
                    <button
                        onclick="closeAddSectionModal()"
                        class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
                    >
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        </div>

        <!-- Add Category Modal -->
        <div
            id="addCategoryModal"
            class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center"
        >
            <div
                class="bg-background rounded-lg shadow-xl max-w-md w-full mx-4"
            >
                <div class="p-6 border-b">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-semibold">
                            –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                        </h3>
                        <button
                            onclick="closeAddCategoryModal()"
                            class="text-muted-foreground hover:text-foreground"
                            >‚úï</button
                        >
                    </div>
                </div>

                <div class="p-6 space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</label
                        >
                        <input
                            type="text"
                            id="categoryNameInput"
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–ü–æ—Å—Ç–∞–≤—â–∏–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label
                        >
                        <select
                            id="categorySupplierSelect"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                        >
                            <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ --</option>
                        </select>
                    </div>
                </div>

                <div class="p-6 border-t flex gap-3">
                    <button
                        onclick="submitAddCategory()"
                        class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
                    >
                        –°–æ–∑–¥–∞—Ç—å
                    </button>
                    <button
                        onclick="closeAddCategoryModal()"
                        class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
                    >
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        </div>

        <!-- Add Product Modal -->
        <div
            id="addProductModal"
            class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center"
        >
            <div
                class="bg-background rounded-lg shadow-xl max-w-md w-full mx-4"
            >
                <div class="p-6 border-b">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-semibold">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</h3>
                        <button
                            onclick="closeAddProductModal()"
                            class="text-muted-foreground hover:text-foreground"
                            >‚úï</button
                        >
                    </div>
                </div>

                <div class="p-6 space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label
                        >
                        <input
                            type="text"
                            id="productNameInput"
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–º–∏–¥–æ—Ä—ã"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</label
                        >
                        <input
                            type="text"
                            id="productUnitInput"
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–≥, —à—Ç, –ª"
                            value="—à—Ç"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–°–µ–∫—Ü–∏—è</label
                        >
                        <select
                            id="productSectionSelect"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                        >
                            <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é --</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label
                        >
                        <select
                            id="productCategorySelect"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                        >
                            <option value="">-- –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ --</option>
                        </select>
                    </div>
                </div>

                <div class="p-6 border-t flex gap-3">
                    <button
                        onclick="submitAddProduct()"
                        class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
                    >
                        –°–æ–∑–¥–∞—Ç—å
                    </button>
                    <button
                        onclick="closeAddProductModal()"
                        class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
                    >
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        </div>

        <!-- Assign Supplier Modal -->
        <div
            id="assignSupplierModal"
            class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center"
        >
            <div
                class="bg-background rounded-lg shadow-xl max-w-md w-full mx-4"
            >
                <div class="p-6 border-b">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-semibold">
                            –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        </h3>
                        <button
                            onclick="closeAssignSupplierModal()"
                            class="text-muted-foreground hover:text-foreground"
                            >‚úï</button
                        >
                    </div>
                    <p
                        class="text-sm text-muted-foreground mt-2"
                        id="assignSupplierCategoryName"
                    >
                        –ö–∞—Ç–µ–≥–æ—Ä–∏—è:
                    </p>
                </div>

                <div class="p-6">
                    <label class="block text-sm font-medium mb-2"
                        >–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</label
                    >
                    <select
                        id="supplierSelect"
                        class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                    >
                        <option value="">–ó–∞–≥—Ä—É–∑–∫–∞...</option>
                    </select>
                </div>

                <div class="p-6 border-t flex gap-3">
                    <button
                        onclick="submitAssignSupplier()"
                        class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
                    >
                        –ù–∞–∑–Ω–∞—á–∏—Ç—å
                    </button>
                    <button
                        onclick="closeAssignSupplierModal()"
                        class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
                    >
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        </div>

        <!-- Edit Supplier Modal -->
        <div
            id="editSupplierModal"
            class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center"
        >
            <div
                class="bg-background rounded-lg shadow-xl max-w-md w-full mx-4"
            >
                <div class="p-6 border-b">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-semibold">
                            –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        </h3>
                        <button
                            onclick="closeEditSupplierModal()"
                            class="text-muted-foreground hover:text-foreground"
                            >‚úï</button
                        >
                    </div>
                </div>

                <div class="p-6 space-y-4">
                    <input type="hidden" id="editSupplierId" />

                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–ù–∞–∑–≤–∞–Ω–∏–µ</label
                        >
                        <input
                            id="editSupplierName"
                            type="text"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
                        />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–¢–µ–ª–µ—Ñ–æ–Ω</label
                        >
                        <input
                            id="editSupplierPhone"
                            type="tel"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                            placeholder="+996XXXXXXXXX"
                        />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label
                        >
                        <textarea
                            id="editSupplierContact"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                            placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                            rows="2"></textarea>
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >Poster –ø–æ—Å—Ç–∞–≤—â–∏–∫ (–¥–ª—è –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫)</label
                        >
                        <select
                            id="editSupplierPosterMapping"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                        >
                            <option value="">-- –ù–µ —Å–≤—è–∑–∞–Ω —Å Poster --</option>
                        </select>
                        <p class="text-xs text-muted-foreground mt-1">
                            –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ Poster –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ
                            —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫
                        </p>
                    </div>
                </div>

                <div class="p-6 border-t flex gap-3">
                    <button
                        onclick="submitEditSupplier()"
                        class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
                    >
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                    <button
                        onclick="closeEditSupplierModal()"
                        class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
                    >
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        </div>

        <!-- Add Supplier Modal -->
        <div
            id="addSupplierModal"
            class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center"
        >
            <div
                class="bg-background rounded-lg shadow-xl max-w-md w-full mx-4"
            >
                <div class="p-6 border-b">
                    \
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-semibold">
                            –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        </h3>
                        <button
                            onclick="closeAddSupplierModal()"
                            class="text-muted-foreground hover:text-foreground"
                            >‚úï</button
                        >
                    </div>
                </div>

                <div class="p-6 space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–ù–∞–∑–≤–∞–Ω–∏–µ <span class="text-destructive">*</span
                            ></label
                        >
                        <input
                            id="addSupplierName"
                            type="text"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
                        />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–¢–µ–ª–µ—Ñ–æ–Ω</label
                        >
                        <input
                            id="addSupplierPhone"
                            type="tel"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                            placeholder="+996XXXXXXXXX"
                        />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</label
                        >
                        <textarea
                            id="addSupplierContact"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                            placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                            rows="2"></textarea>
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2"
                            >Poster –ø–æ—Å—Ç–∞–≤—â–∏–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label
                        >
                        <select
                            id="addSupplierPosterMapping"
                            class="w-full px-3 py-2 border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary"
                        >
                            <option value="">-- –ù–µ —Å–≤—è–∑–∞–Ω —Å Poster --</option>
                        </select>
                        <p class="text-xs text-muted-foreground mt-1">
                            –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ Poster –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ
                            —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫
                        </p>
                    </div>
                </div>

                <div class="p-6 border-t flex gap-3">
                    <button
                        onclick="submitAddSupplier()"
                        class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 bg-primary text-primary-foreground hover:bg-primary/90"
                    >
                        –°–æ–∑–¥–∞—Ç—å
                    </button>
                    <button
                        onclick="closeAddSupplierModal()"
                        class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-3 border border-input bg-background hover:bg-accent hover:text-accent-foreground"
                    >
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        </div>

        <script define:vars={{ tenantId }}>
            // Store tenant ID globally for API calls
            window.TENANT_ID = tenantId;
        </script>

        <script>
            // Helper function to render orders table with Alpine.js
            function renderOrdersTable(container, orders, onDelete) {
                // Store orders data globally to avoid JSON injection issues
                const dataId = 'ordersData_' + Date.now();
                window[dataId] = orders;

                container.innerHTML = `
                    <div x-data="{
                        orders: window['${dataId}'] || [],
                        sortKey: 'orderId',
                        sortDir: 'desc',
                        detailsOpen: false,
                        actionsOpen: false,
                        selectedOrder: null,
                        get selectedOrderBySupplier() {
                            if (!this.selectedOrder || !this.selectedOrder.categories) return [];

                            // Group categories by supplier
                            const supplierMap = new Map();

                            this.selectedOrder.categories.forEach(category => {
                                const supplierKey = category.supplier?.id || 'no-supplier';
                                const supplierName = category.supplier?.name || '–ë–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞';
                                const supplierPhone = category.supplier?.phone || null;

                                if (!supplierMap.has(supplierKey)) {
                                    supplierMap.set(supplierKey, {
                                        id: category.supplier?.id || null,
                                        name: supplierName,
                                        phone: supplierPhone,
                                        categories: []
                                    });
                                }

                                supplierMap.get(supplierKey).categories.push(category);
                            });

                            return Array.from(supplierMap.values());
                        },
                        get sortedOrders() {
                            return [...this.orders].sort((a, b) => {
                                let aVal = a[this.sortKey];
                                let bVal = b[this.sortKey];
                                if (typeof aVal === 'string') {
                                    aVal = aVal.toLowerCase();
                                    bVal = bVal.toLowerCase();
                                }
                                return this.sortDir === 'asc' ? (aVal > bVal ? 1 : -1) : (aVal < bVal ? 1 : -1);
                            });
                        },
                        handleSort(key) {
                            if (key === this.sortKey) {
                                this.sortDir = this.sortDir === 'asc' ? 'desc' : 'asc';
                            } else {
                                this.sortKey = key;
                                this.sortDir = 'asc';
                            }
                        },
                        getSortIcon(key) {
                            if (this.sortKey !== key) return '‚áÖ';
                            return this.sortDir === 'asc' ? '‚Üë' : '‚Üì';
                        },
                        getStatusBadge(status) {
                            const badges = {
                                'pending': { class: 'bg-yellow-100 text-yellow-800', text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç' },
                                'sent': { class: 'bg-blue-100 text-blue-800', text: 'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω' },
                                'delivered': { class: 'bg-green-100 text-green-800', text: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω' }
                            };
                            return badges[status] || badges['pending'];
                        },
                        openDetails(order) {
                            this.selectedOrder = order;
                            this.detailsOpen = true;
                        },
                        openActions(order) {
                            this.selectedOrder = order;
                            this.actionsOpen = true;
                        },
                        deleteOrder(orderId) {
                            ${onDelete ? `window.deleteOrder(orderId);` : ''}
                        }
                    }">
                        <!-- Desktop Table -->
                        <div class="hidden lg:block">
                            <div class="rounded-lg border bg-card shadow-sm overflow-hidden">
                                <table class="w-full">
                                    <thead>
                                        <tr class="border-b">
                                            <th @click="handleSort('orderId')" class="cursor-pointer px-4 py-3 text-left text-xs font-bold uppercase">
                                                # <span class="text-xs opacity-50" x-text="getSortIcon('orderId')"></span>
                                            </th>
                                            <th @click="handleSort('departmentName')" class="cursor-pointer px-4 py-3 text-left text-xs font-bold uppercase">
                                                –û—Ç–¥–µ–ª <span class="text-xs opacity-50" x-text="getSortIcon('departmentName')"></span>
                                            </th>
                                            <th @click="handleSort('displayDate')" class="cursor-pointer px-4 py-3 text-left text-xs font-bold uppercase">
                                                –î–∞—Ç–∞ <span class="text-xs opacity-50" x-text="getSortIcon('displayDate')"></span>
                                            </th>
                                            <th @click="handleSort('status')" class="cursor-pointer px-4 py-3 text-left text-xs font-bold uppercase">
                                                –°—Ç–∞—Ç—É—Å <span class="text-xs opacity-50" x-text="getSortIcon('status')"></span>
                                            </th>
                                            <th @click="handleSort('totalItems')" class="cursor-pointer px-4 py-3 text-right text-xs font-bold uppercase">
                                                –¢–æ–≤–∞—Ä–æ–≤ <span class="text-xs opacity-50" x-text="getSortIcon('totalItems')"></span>
                                            </th>
                                            <th @click="handleSort('totalQuantity')" class="cursor-pointer px-4 py-3 text-right text-xs font-bold uppercase">
                                                –ï–¥–∏–Ω–∏—Ü <span class="text-xs opacity-50" x-text="getSortIcon('totalQuantity')"></span>
                                            </th>
                                            <th class="px-4 py-3 text-right text-xs font-bold uppercase">–î–µ–π—Å—Ç–≤–∏—è</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <template x-for="order in sortedOrders" :key="order.orderId">
                                            <tr @click="openDetails(order)" class="cursor-pointer border-b hover:bg-accent/50">
                                                <td class="px-4 py-3 font-semibold text-primary" x-text="'#' + order.orderId"></td>
                                                <td class="px-4 py-3">
                                                    <span x-text="order.departmentEmoji"></span>
                                                    <span x-text="order.departmentName" class="ml-2 font-medium"></span>
                                                </td>
                                                <td class="px-4 py-3 text-muted-foreground" x-text="order.displayDate"></td>
                                                <td class="px-4 py-3">
                                                    <span :class="'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ' + getStatusBadge(order.status).class" x-text="getStatusBadge(order.status).text"></span>
                                                </td>
                                                <td class="px-4 py-3 text-right font-semibold" x-text="order.totalItems"></td>
                                                <td class="px-4 py-3 text-right font-semibold" x-text="order.totalQuantity.toFixed(1)"></td>
                                                <td class="px-4 py-3 text-right" @click.stop="">
                                                    <button @click="openActions(order)" class="px-3 py-1 text-sm rounded hover:bg-accent">‚ãØ</button>
                                                </td>
                                            </tr>
                                        </template>
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Mobile Cards -->
                        <div class="lg:hidden space-y-3">
                            <template x-for="order in sortedOrders" :key="order.orderId">
                                <div @click="openActions(order)" class="p-4 rounded-lg border bg-white shadow-sm active:scale-[0.98] active:shadow-md transition-all">
                                    <div class="flex items-start justify-between gap-2 mb-2">
                                        <div class="flex items-center gap-2">
                                            <span class="text-base font-bold text-blue-600" x-text="'#' + order.orderId"></span>
                                            <span class="text-lg" x-text="order.departmentEmoji"></span>
                                            <span class="font-semibold text-gray-900" x-text="order.departmentName"></span>
                                        </div>
                                        <span :class="'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ' + getStatusBadge(order.status).class" x-text="getStatusBadge(order.status).text"></span>
                                    </div>
                                    <div class="text-sm text-gray-600">
                                        <span x-text="order.displayDate"></span>
                                    </div>
                                    <div class="flex items-center gap-4 mt-3 pt-3 border-t border-gray-100">
                                        <div class="flex items-center gap-1.5 text-sm">
                                            <span class="font-medium text-gray-900" x-text="order.totalItems"></span>
                                            <span class="text-gray-500">—Ç–æ–≤–∞—Ä–æ–≤</span>
                                        </div>
                                        <div class="flex items-center gap-1.5 text-sm">
                                            <span class="font-medium text-gray-900" x-text="order.totalQuantity.toFixed(1)"></span>
                                            <span class="text-gray-500">–µ–¥–∏–Ω–∏—Ü</span>
                                        </div>
                                        <div class="ml-auto text-gray-400">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                            </template>
                        </div>

                        <!-- Order Details Modal (Mobile Bottom Sheet) -->
                        <div x-show="actionsOpen"
                             x-transition:enter="transition ease-out duration-200"
                             x-transition:enter-start="opacity-0"
                             x-transition:enter-end="opacity-100"
                             x-transition:leave="transition ease-in duration-150"
                             x-transition:leave-start="opacity-100"
                             x-transition:leave-end="opacity-0"
                             @click="actionsOpen = false"
                             class="fixed inset-0 bg-black/50 z-50"
                             style="display: none;">
                            <div @click.stop=""
                                 x-show="actionsOpen"
                                 x-transition:enter="transition ease-out duration-200"
                                 x-transition:enter-start="translate-y-full"
                                 x-transition:enter-end="translate-y-0"
                                 x-transition:leave="transition ease-in duration-150"
                                 x-transition:leave-start="translate-y-0"
                                 x-transition:leave-end="translate-y-full"
                                 class="fixed bottom-0 left-0 right-0 bg-white rounded-t-2xl flex flex-col lg:max-w-2xl lg:mx-auto lg:bottom-auto lg:top-1/2 lg:-translate-y-1/2 lg:rounded-2xl"
                                 style="max-height: 90vh; height: 90vh;">
                                <template x-if="selectedOrder">
                                    <div class="flex flex-col flex-1 min-h-0">
                                        <!-- Header -->
                                        <div class="flex-shrink-0 p-4 border-b">
                                            <!-- Handle Bar (Mobile) -->
                                            <div class="lg:hidden w-12 h-1.5 bg-gray-300 rounded-full mx-auto mb-3"></div>

                                            <div class="flex items-start justify-between gap-3">
                                                <div>
                                                    <div class="flex items-center gap-2 mb-1">
                                                        <span class="text-lg font-bold text-blue-600" x-text="'#' + selectedOrder.orderId"></span>
                                                        <span class="text-xl" x-text="selectedOrder.departmentEmoji"></span>
                                                        <span class="font-semibold" x-text="selectedOrder.departmentName"></span>
                                                    </div>
                                                    <div class="text-sm text-gray-600">
                                                        <span x-text="selectedOrder.displayDate"></span> ‚Ä¢
                                                        <span x-text="selectedOrder.totalItems"></span> —Ç–æ–≤–∞—Ä–æ–≤ ‚Ä¢
                                                        <span x-text="selectedOrder.totalQuantity.toFixed(1)"></span> –µ–¥–∏–Ω–∏—Ü
                                                    </div>
                                                </div>
                                                <span :class="'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ' + getStatusBadge(selectedOrder.status).class" x-text="getStatusBadge(selectedOrder.status).text"></span>
                                            </div>
                                        </div>

                                        <!-- Scrollable Order Content -->
                                        <div class="flex-1 overflow-y-auto p-4 space-y-3" style="min-height: 0;"
                                             x-data="{
                                                 supplierStates: {},
                                                 initSupplierStates() {
                                                     if (selectedOrder) {
                                                         const autoExpand = selectedOrder.totalItems <= 8;
                                                         selectedOrderBySupplier.forEach(supplier => {
                                                             this.supplierStates[supplier.id || 'no-supplier'] = autoExpand;
                                                         });
                                                     }
                                                 },
                                                 toggleSupplier(supplierId) {
                                                     this.supplierStates[supplierId] = !this.supplierStates[supplierId];
                                                 },
                                                 isSupplierExpanded(supplierId) {
                                                     if (this.supplierStates[supplierId] === undefined) {
                                                         this.initSupplierStates();
                                                     }
                                                     return this.supplierStates[supplierId] || false;
                                                 },
                                                 getTotalItemsForSupplier(supplier) {
                                                     return supplier.categories.reduce((sum, cat) => sum + cat.items.length, 0);
                                                 }
                                             }"
                                             x-init="initSupplierStates()">
                                            <template x-if="selectedOrderBySupplier.length > 0">
                                                <div>
                                                    <template x-for="supplier in selectedOrderBySupplier" :key="supplier.id || 'no-supplier'">
                                                        <div class="mb-3 rounded-lg border-2 overflow-hidden"
                                                             :class="supplier.phone ? 'border-green-200' : 'border-yellow-200'">
                                                            <!-- Supplier Header (Clickable) -->
                                                            <button @click="toggleSupplier(supplier.id || 'no-supplier')"
                                                                    class="w-full px-3 py-3 hover:bg-gray-50 active:bg-gray-100 transition-colors"
                                                                    :class="supplier.phone ? 'bg-green-50' : 'bg-yellow-50'">
                                                                <div class="flex items-center justify-between gap-2">
                                                                    <div class="flex items-center gap-2 flex-1 min-w-0">
                                                                        <svg :class="isSupplierExpanded(supplier.id || 'no-supplier') ? 'rotate-90' : ''"
                                                                             class="w-5 h-5 transition-transform duration-200 flex-shrink-0"
                                                                             :class="supplier.phone ? 'text-green-600' : 'text-yellow-600'"
                                                                             fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M9 5l7 7-7 7"/>
                                                                        </svg>
                                                                        <div class="flex-1 text-left min-w-0">
                                                                            <div class="font-bold text-base truncate"
                                                                                 :class="supplier.phone ? 'text-green-900' : 'text-yellow-900'"
                                                                                 x-text="supplier.name"></div>
                                                                            <div class="text-xs mt-0.5"
                                                                                 :class="supplier.phone ? 'text-green-700' : 'text-yellow-700'">
                                                                                <span x-text="supplier.categories.length"></span> –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Ä¢
                                                                                <span x-text="getTotalItemsForSupplier(supplier)"></span> —Ç–æ–≤–∞—Ä–æ–≤
                                                                                <template x-if="supplier.phone">
                                                                                    <span class="ml-2">üì± <span x-text="supplier.phone"></span></span>
                                                                                </template>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </button>

                                                            <!-- Categories & Items (Collapsible) -->
                                                            <div x-show="isSupplierExpanded(supplier.id || 'no-supplier')"
                                                                 x-collapse
                                                                 class="bg-white">
                                                                <template x-for="category in supplier.categories" :key="category.categoryId">
                                                                    <div class="border-t first:border-t-0">
                                                                        <!-- Category Name -->
                                                                        <div class="bg-gray-50 px-3 py-2 border-b">
                                                                            <span class="font-semibold text-sm text-gray-700" x-text="'üè∑Ô∏è ' + category.categoryName"></span>
                                                                            <span class="text-xs text-gray-500 ml-2" x-text="category.items.length + ' —à—Ç'"></span>
                                                                        </div>
                                                                        <!-- Items -->
                                                                        <div class="divide-y">
                                                                            <template x-for="item in category.items" :key="item.name">
                                                                                <div class="flex items-center justify-between px-3 py-2.5">
                                                                                    <span class="text-sm flex-1 mr-2" x-text="item.name"></span>
                                                                                    <span class="text-sm font-semibold whitespace-nowrap" x-text="item.quantity + ' ' + item.unit"></span>
                                                                                </div>
                                                                            </template>
                                                                        </div>
                                                                    </div>
                                                                </template>
                                                            </div>

                                                            <!-- Send to Supplier Button -->
                                                            <template x-if="supplier.phone">
                                                                <div class="p-2 bg-green-50 border-t-2 border-green-200">
                                                                    <button @click="window.location.href = '/order-details?orderId=' + selectedOrder.orderId"
                                                                            class="w-full px-3 py-2.5 bg-green-600 text-white text-sm font-bold rounded-lg hover:bg-green-700 active:bg-green-800 transition-colors">
                                                                        üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ <span x-text="supplier.name"></span>
                                                                    </button>
                                                                </div>
                                                            </template>
                                                            <template x-if="!supplier.phone">
                                                                <div class="p-2 bg-yellow-50 border-t-2 border-yellow-200">
                                                                    <button @click="window.location.href = '/order-details?orderId=' + selectedOrder.orderId"
                                                                            class="w-full px-3 py-2.5 bg-yellow-500 text-white text-sm font-bold rounded-lg hover:bg-yellow-600 active:bg-yellow-700 transition-colors">
                                                                        üîó –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                                                                    </button>
                                                                </div>
                                                            </template>
                                                        </div>
                                                    </template>
                                                </div>
                                            </template>
                                        </div>

                                        <!-- Footer Actions -->
                                        <div class="flex-shrink-0 p-4 border-t bg-gray-50 space-y-2">
                                            <div class="flex gap-2">
                                                <a :href="'/order-details?orderId=' + selectedOrder.orderId"
                                                   class="flex-1 flex items-center justify-center gap-2 px-4 py-2.5 border bg-white rounded-lg hover:bg-gray-50 active:bg-gray-100 font-medium transition-colors">
                                                    <span>üëÅÔ∏è</span>
                                                    <span class="text-sm">–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è</span>
                                                </a>
                                                <button @click="alert('Excel export coming soon')"
                                                        class="flex-1 flex items-center justify-center gap-2 px-4 py-2.5 border bg-white rounded-lg hover:bg-gray-50 active:bg-gray-100 font-medium transition-colors">
                                                    <span>üìÑ</span>
                                                    <span class="text-sm">Excel</span>
                                                </button>
                                            </div>
                                            <button @click="if(confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ #' + selectedOrder.orderId + '?')) { deleteOrder(selectedOrder.orderId); actionsOpen = false; }"
                                                    class="w-full px-4 py-2.5 bg-red-50 text-red-700 rounded-lg hover:bg-red-100 active:bg-red-200 font-medium transition-colors">
                                                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
                                            </button>
                                            <button @click="actionsOpen = false"
                                                    class="w-full px-4 py-2.5 border bg-white rounded-lg hover:bg-gray-50 active:bg-gray-100 font-medium transition-colors">
                                                –ó–∞–∫—Ä—ã—Ç—å
                                            </button>
                                        </div>
                                    </div>
                                </template>
                            </div>
                        </div>
                    </div>
                `;
            }

            // Helper function to render products table with Alpine.js
            function renderProductsTable(container, products, categories, onCategoryChange, onDelete) {
                const sectionProducts = products.filter(p => p.type === 'section');
                const customProducts = products.filter(p => p.type === 'custom');

                if (products.length === 0) {
                    container.innerHTML = `
                        <div class="text-center py-12">
                            <div class="text-6xl mb-4">üì¶</div>
                            <p class="text-xl font-semibold mb-2">–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</p>
                            <p class="text-muted-foreground">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —Å–µ–∫—Ü–∏–∏ –∏–∑ Poster –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤—Ä—É—á–Ω—É—é</p>
                        </div>
                    `;
                    return;
                }

                // Store data globally to avoid JSON injection issues
                const dataId = 'productsData_' + Date.now();
                window[dataId] = { sectionProducts, customProducts, categories };

                container.innerHTML = `
                    <div x-data="{
                        sectionProducts: window['${dataId}'].sectionProducts || [],
                        customProducts: window['${dataId}'].customProducts || [],
                        categories: window['${dataId}'].categories || [],
                        getProductName(product) {
                            return product.name || product.product_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                        }
                    }">
                        ${sectionProducts.length > 0 ? `
                        <div class="mb-8">
                            <h4 class="text-lg font-semibold mb-3">üì¶ –¢–æ–≤–∞—Ä—ã –∏–∑ —Å–µ–∫—Ü–∏–π Poster</h4>

                            <!-- Desktop Table -->
                            <div class="hidden md:block">
                                <div class="rounded-lg border bg-card shadow-sm overflow-hidden">
                                    <table class="w-full">
                                        <thead class="border-b">
                                            <tr>
                                                <th class="px-4 py-3 text-left text-xs font-bold uppercase w-[40%]">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                                <th class="px-4 py-3 text-left text-xs font-bold uppercase w-[25%]">–°–µ–∫—Ü–∏—è</th>
                                                <th class="px-4 py-3 text-left text-xs font-bold uppercase w-[10%]">–ï–¥. –∏–∑–º.</th>
                                                <th class="px-4 py-3 text-left text-xs font-bold uppercase w-[25%]">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <template x-for="product in sectionProducts" :key="product.id">
                                                <tr class="border-b">
                                                    <td class="px-4 py-3 font-medium" x-text="getProductName(product)"></td>
                                                    <td class="px-4 py-3 text-muted-foreground" x-text="product.section_name || '–ë–µ–∑ —Å–µ–∫—Ü–∏–∏'"></td>
                                                    <td class="px-4 py-3 text-muted-foreground" x-text="product.unit || '—à—Ç'"></td>
                                                    <td class="px-4 py-3">
                                                        <select @change="window.updateProductCategory(product.id, $event.target.value, 'section')" :value="product.category_id || ''" class="w-full text-xs px-2 py-1.5 border rounded bg-background focus:outline-none focus:ring-2 focus:ring-primary">
                                                            <option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                                                            <template x-for="cat in categories" :key="cat.id">
                                                                <option :value="cat.id" x-text="cat.name"></option>
                                                            </template>
                                                        </select>
                                                    </td>
                                                </tr>
                                            </template>
                                        </tbody>
                                    </table>
                                </div>
                            </div>

                            <!-- Mobile Cards -->
                            <div class="md:hidden space-y-3">
                                <template x-for="product in sectionProducts" :key="product.id">
                                    <div class="p-4 rounded-lg border bg-card shadow-sm">
                                        <div class="font-medium mb-2" x-text="getProductName(product)"></div>
                                        <div class="text-sm text-muted-foreground mb-2">
                                            <span x-text="product.section_name || '–ë–µ–∑ —Å–µ–∫—Ü–∏–∏'"></span> ‚Ä¢
                                            <span x-text="product.unit || '—à—Ç'"></span>
                                        </div>
                                        <select @change="window.updateProductCategory(product.id, $event.target.value, 'section')" :value="product.category_id || ''" class="w-full text-sm px-3 py-2 border rounded bg-background focus:outline-none focus:ring-2 focus:ring-primary">
                                            <option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                                            <template x-for="cat in categories" :key="cat.id">
                                                <option :value="cat.id" x-text="cat.name"></option>
                                            </template>
                                        </select>
                                    </div>
                                </template>
                            </div>
                        </div>
                        ` : ''}

                        ${customProducts.length > 0 ? `
                        <div>
                            <h4 class="text-lg font-semibold mb-3">‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã</h4>

                            <!-- Desktop Table -->
                            <div class="hidden md:block">
                                <div class="rounded-lg border bg-card shadow-sm overflow-hidden">
                                    <table class="w-full">
                                        <thead class="border-b">
                                            <tr>
                                                <th class="px-4 py-3 text-left text-xs font-bold uppercase w-[40%]">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                                <th class="px-4 py-3 text-left text-xs font-bold uppercase w-[10%]">–ï–¥. –∏–∑–º.</th>
                                                <th class="px-4 py-3 text-left text-xs font-bold uppercase w-[30%]">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                                                <th class="px-4 py-3 text-left text-xs font-bold uppercase w-[20%]">–î–µ–π—Å—Ç–≤–∏—è</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <template x-for="product in customProducts" :key="product.id">
                                                <tr class="border-b">
                                                    <td class="px-4 py-3 font-medium" x-text="getProductName(product)"></td>
                                                    <td class="px-4 py-3 text-muted-foreground" x-text="product.unit || '—à—Ç'"></td>
                                                    <td class="px-4 py-3">
                                                        <select @change="window.updateProductCategory(product.id, $event.target.value, 'custom')" :value="product.category_id || ''" class="w-full text-xs px-2 py-1.5 border rounded bg-background focus:outline-none focus:ring-2 focus:ring-primary">
                                                            <option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                                                            <template x-for="cat in categories" :key="cat.id">
                                                                <option :value="cat.id" x-text="cat.name"></option>
                                                            </template>
                                                        </select>
                                                    </td>
                                                    <td class="px-4 py-3">
                                                        <button @click="window.deleteProduct(product.id, getProductName(product), 'custom')" class="px-3 py-1 text-xs bg-destructive text-destructive-foreground rounded hover:bg-destructive/90">
                                                            üóëÔ∏è
                                                        </button>
                                                    </td>
                                                </tr>
                                            </template>
                                        </tbody>
                                    </table>
                                </div>
                            </div>

                            <!-- Mobile Cards -->
                            <div class="md:hidden space-y-3">
                                <template x-for="product in customProducts" :key="product.id">
                                    <div class="p-4 rounded-lg border bg-card shadow-sm">
                                        <div class="flex justify-between items-start mb-2">
                                            <div class="font-medium" x-text="getProductName(product)"></div>
                                            <button @click="window.deleteProduct(product.id, getProductName(product), 'custom')" class="px-2 py-1 text-xs bg-destructive text-destructive-foreground rounded">
                                                üóëÔ∏è
                                            </button>
                                        </div>
                                        <div class="text-sm text-muted-foreground mb-2" x-text="product.unit || '—à—Ç'"></div>
                                        <select @change="window.updateProductCategory(product.id, $event.target.value, 'custom')" :value="product.category_id || ''" class="w-full text-sm px-3 py-2 border rounded bg-background focus:outline-none focus:ring-2 focus:ring-primary">
                                            <option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                                            <template x-for="cat in categories" :key="cat.id">
                                                <option :value="cat.id" x-text="cat.name"></option>
                                            </template>
                                        </select>
                                    </div>
                                </template>
                            </div>
                        </div>
                        ` : ''}
                    </div>
                `;

                // Set up global functions for callbacks
                window.updateProductCategory = onCategoryChange;
                window.deleteProduct = onDelete;
            }

            // Load orders by category
            async function loadOrdersByCategory() {
                console.log("üìã Loading orders by category...");
                try {
                    const response = await fetch(
                        `/api/orders-by-category?tenant=${window.TENANT_ID}`,
                    );
                    const data = await response.json();

                    if (data.success) {
                        displayOrdersByCategory(data.data);
                    } else {
                        console.error("‚ùå Failed to load orders:", data.error);
                        displayOrdersByCategory([]);
                    }
                } catch (error) {
                    console.error("‚ùå Error loading orders:", error);
                    displayOrdersByCategory([]);
                }
            }

            // Display orders using Alpine.js
            function displayOrdersByCategory(orders) {
                const container = document.getElementById("ordersByCategory");
                if (!container) return;

                if (!orders || orders.length === 0) {
                    container.innerHTML = `
					<div class="text-center py-12">
						<div class="text-6xl mb-4">üìã</div>
						<p class="text-xl font-semibold mb-2">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
						<p class="text-muted-foreground">–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è</p>
					</div>
				`;
                    return;
                }

                // Set up Alpine.js data and render template
                window.ordersData = orders;
                window.deleteOrder = async (orderId) => {
                    try {
                        const response = await fetch("/api/delete-order", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ orderId }),
                        });
                        const result = await response.json();
                        if (result.success) {
                            loadOrdersByCategory();
                        } else {
                            alert(`–û—à–∏–±–∫–∞: ${result.error}`);
                        }
                    } catch (error) {
                        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞");
                        console.error(error);
                    }
                };
                renderOrdersTable(container, orders, window.deleteOrder);
            }

            // Tab switching
            function switchTab(tabName) {
                // Hide all tabs
                document.querySelectorAll(".tab-content").forEach((tab) => {
                    tab.classList.add("hidden");
                });

                // Remove active state from all buttons
                document.querySelectorAll(".tab-button").forEach((btn) => {
                    btn.classList.remove(
                        "bg-primary",
                        "text-primary-foreground",
                    );
                    btn.classList.add(
                        "bg-secondary",
                        "text-secondary-foreground",
                    );
                });

                // Show selected tab
                const selectedTab = document.getElementById(`tab-${tabName}`);
                if (selectedTab) {
                    selectedTab.classList.remove("hidden");
                }

                // Add active state to selected button
                const selectedButton = document.querySelector(
                    `[data-tab="${tabName}"]`,
                );
                if (selectedButton) {
                    selectedButton.classList.remove(
                        "bg-secondary",
                        "text-secondary-foreground",
                    );
                    selectedButton.classList.add(
                        "bg-primary",
                        "text-primary-foreground",
                    );
                }

                // Load data for specific tabs
                if (tabName === "delivered") {
                    loadDeliveredOrders();
                } else if (tabName === "categories") {
                    loadCategories();
                } else if (tabName === "suppliers") {
                    loadSuppliers();
                } else if (tabName === "departments") {
                    loadSections();
                } else if (tabName === "products") {
                    loadProducts();
                }
            }

            // Load delivered orders
            async function loadDeliveredOrders() {
                const container = document.getElementById("deliveredOrders");
                if (!container) return;

                container.innerHTML =
                    '<div class="text-center text-muted-foreground py-12"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';

                try {
                    const response = await fetch(
                        `/api/orders-by-category?status=delivered&tenant=${window.TENANT_ID}`,
                        { cache: "no-store" },
                    );
                    const data = await response.json();

                    if (data.success && data.data && data.data.length > 0) {
                        // Use the same table/card display function
                        displayDeliveredOrders(data.data);
                    } else {
                        container.innerHTML = `
						<div class="text-center py-12">
							<div class="text-6xl mb-4">‚úÖ</div>
							<p class="text-xl font-semibold mb-2">–ù–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>
							<p class="text-muted-foreground">–î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
						</div>
					`;
                    }
                } catch (error) {
                    console.error("Error loading delivered orders:", error);
                    container.innerHTML =
                        '<div class="text-center text-error py-12"><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p></div>';
                }
            }

            // Display delivered orders using Alpine.js
            function displayDeliveredOrders(orders) {
                const container = document.getElementById("deliveredOrders");
                if (!container) return;

                // Set up Alpine.js data and render template
                const deleteOrderDelivered = async (orderId) => {
                    try {
                        const response = await fetch("/api/delete-order", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ orderId }),
                        });
                        const result = await response.json();
                        if (result.success) {
                            loadDeliveredOrders();
                        } else {
                            alert(`–û—à–∏–±–∫–∞: ${result.error}`);
                        }
                    } catch (error) {
                        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞");
                        console.error(error);
                    }
                };
                renderOrdersTable(container, orders, deleteOrderDelivered);
            }

            // Load categories with suppliers
            async function loadCategories() {
                const container = document.getElementById("categorySuppliers");
                container.innerHTML =
                    '<div class="text-center text-muted-foreground py-12"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';

                try {
                    const response = await fetch("/api/categories");
                    const data = await response.json();

                    if (data.success && data.data && data.data.length > 0) {
                        container.innerHTML = "";
                        const list = document.createElement("div");
                        list.className = "space-y-2";

                        data.data.forEach((category) => {
                            const card = document.createElement("div");
                            card.className = "native-card";
                            card.innerHTML = `
							<div class="p-4">
							<div class="flex items-center justify-between gap-2">
								<div class="flex-1 min-w-0">
									<h4 class="font-medium text-base truncate">üè∑Ô∏è ${category.name}</h4>
									<div class="text-xs text-muted-foreground mt-0.5">
										${
                                            category.supplier_name
                                                ? `üì¶ ${category.supplier_name}`
                                                : '<span class="text-destructive">–ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</span>'
                                        }
									</div>
								</div>
								<div class="flex gap-2">
									<button
										onclick="assignSupplierToCategory(${category.id}, '${category.name}')"
										class="flex-shrink-0 inline-flex items-center justify-center rounded-full text-xs font-medium h-8 px-4 bg-secondary hover:bg-secondary/80 active:scale-95 transition-all"
									>
										${category.supplier_name ? "–ò–∑–º–µ–Ω–∏—Ç—å" : "–ù–∞–∑–Ω–∞—á–∏—Ç—å"}
									</button>
									<button
										onclick="deleteCategory(${category.id}, '${category.name.replace(/'/g, "\\'")}', this)"
										class="flex-shrink-0 inline-flex items-center justify-center rounded-full text-xs font-medium h-8 px-3 bg-destructive text-destructive-foreground hover:bg-destructive/90 active:scale-95 transition-all"
									>
										üóëÔ∏è
									</button>
								</div>
							</div>
							</div>
						`;
                            list.appendChild(card);
                        });

                        container.appendChild(list);
                    } else {
                        container.innerHTML = `
						<div class="text-center py-12">
							<div class="text-6xl mb-4">üè∑Ô∏è</div>
							<p class="text-xl font-semibold mb-2">–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π</p>
							<p class="text-muted-foreground">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è</p>
						</div>
					`;
                    }
                } catch (error) {
                    console.error("Error loading categories:", error);
                    container.innerHTML =
                        '<div class="text-center text-destructive py-12"><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p></div>';
                }
            }

            // Load suppliers
            async function loadSuppliers() {
                const container = document.getElementById("suppliersList");
                container.innerHTML =
                    '<div class="text-center text-muted-foreground py-12"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';

                try {
                    const response = await fetch("/api/suppliers");
                    const data = await response.json();

                    if (data.success && data.data && data.data.length > 0) {
                        container.innerHTML = "";
                        const list = document.createElement("div");
                        list.className = "space-y-2";

                        data.data.forEach((supplier) => {
                            const card = document.createElement("div");
                            card.className = "native-card";
                            card.innerHTML = `
							<div class="p-4">
							<div class="flex items-start justify-between gap-2">
								<div class="flex-1 min-w-0">
									<h4 class="font-medium text-base truncate">
                                        üè¢ ${supplier.name}
                                        ${supplier.poster_supplier_id ? '<span class="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded">üîó Poster</span>' : ""}
                                    </h4>
									<div class="text-xs text-muted-foreground mt-0.5 space-y-0.5">
										${
                                            supplier.phone
                                                ? `<div>üì± ${supplier.phone}</div>`
                                                : '<div class="text-destructive">‚ö†Ô∏è –ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞</div>'
                                        }
										${
                                            supplier.contact_info
                                                ? `<div class="truncate">${supplier.contact_info}</div>`
                                                : ""
                                        }
                                        ${
                                            supplier.poster_supplier_id
                                                ? `<div class="text-blue-600">Poster ID: ${supplier.poster_supplier_id}</div>`
                                                : '<div class="text-amber-600">‚ö†Ô∏è –ù–µ —Å–≤—è–∑–∞–Ω —Å Poster</div>'
                                        }
									</div>
								</div>
								<div class="flex gap-2">
									<button
										onclick="openEditSupplierModal(${supplier.id}, '${supplier.name.replace(/'/g, "\\'")}', '${supplier.phone || ""}', '${supplier.contact_info ? supplier.contact_info.replace(/'/g, "\\'") : ""}', ${supplier.poster_supplier_id || "null"})"
										class="flex-shrink-0 h-8 px-4 text-xs rounded-full bg-secondary hover:bg-secondary/80 active:scale-95 transition-all"
									>
										‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
									</button>
									<button
										onclick="deleteSupplier(${supplier.id}, '${supplier.name.replace(/'/g, "\\'")}', this)"
										class="flex-shrink-0 h-8 px-3 text-xs rounded-full bg-destructive text-destructive-foreground hover:bg-destructive/90 active:scale-95 transition-all"
									>
										üóëÔ∏è
									</button>
								</div>
							</div>
							</div>
						`;
                            list.appendChild(card);
                        });

                        container.appendChild(list);
                    } else {
                        container.innerHTML = `
						<div class="text-center py-12">
							<div class="text-6xl mb-4">üè¢</div>
							<p class="text-xl font-semibold mb-2">–ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</p>
							<p class="text-muted-foreground">–î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏</p>
						</div>
					`;
                    }
                } catch (error) {
                    console.error("Error loading suppliers:", error);
                    container.innerHTML =
                        '<div class="text-center text-destructive py-12"><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p></div>';
                }
            }

            // Assign supplier to category
            let currentCategoryId = null;
            let currentCategoryName = null;

            window.assignSupplierToCategory = async function (
                categoryId,
                categoryName,
            ) {
                currentCategoryId = categoryId;
                currentCategoryName = categoryName;

                // Update modal title
                document.getElementById(
                    "assignSupplierCategoryName",
                ).textContent = `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`;

                // Load suppliers
                try {
                    const response = await fetch("/api/suppliers");
                    const data = await response.json();

                    const select = document.getElementById("supplierSelect");

                    if (data.success && data.data && data.data.length > 0) {
                        select.innerHTML =
                            '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ --</option>';
                        data.data.forEach((supplier) => {
                            const option = document.createElement("option");
                            option.value = supplier.id;
                            option.textContent = supplier.name;
                            select.appendChild(option);
                        });
                    } else {
                        select.innerHTML =
                            '<option value="">–ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</option>';
                    }

                    // Show modal
                    document
                        .getElementById("assignSupplierModal")
                        .classList.remove("hidden");
                } catch (error) {
                    console.error("Error loading suppliers:", error);
                    alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤");
                }
            };

            window.closeAssignSupplierModal = function () {
                document
                    .getElementById("assignSupplierModal")
                    .classList.add("hidden");
                currentCategoryId = null;
                currentCategoryName = null;
            };

            window.submitAssignSupplier = async function () {
                const supplierId =
                    document.getElementById("supplierSelect").value;

                if (!supplierId) {
                    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞");
                    return;
                }

                try {
                    const response = await fetch("/api/categories", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            category_id: currentCategoryId,
                            supplier_id: parseInt(supplierId),
                        }),
                    });

                    const data = await response.json();

                    if (data.success) {
                        alert("‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
                        closeAssignSupplierModal();
                        loadCategories(); // Refresh the list
                    } else {
                        alert("‚ùå –û—à–∏–±–∫–∞: " + data.error);
                    }
                } catch (error) {
                    console.error("Error assigning supplier:", error);
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞");
                }
            };

            // Edit supplier modal functions
            window.openEditSupplierModal = async function (
                id,
                name,
                phone,
                contactInfo,
                posterSupplierId,
            ) {
                document.getElementById("editSupplierId").value = id;
                document.getElementById("editSupplierName").value = name;
                document.getElementById("editSupplierPhone").value =
                    phone || "";
                document.getElementById("editSupplierContact").value =
                    contactInfo || "";

                // Load Poster suppliers for mapping
                const posterSelect = document.getElementById(
                    "editSupplierPosterMapping",
                );
                posterSelect.innerHTML =
                    '<option value="">-- –ù–µ —Å–≤—è–∑–∞–Ω —Å Poster --</option>';

                try {
                    const response = await fetch("/api/poster-suppliers");
                    const data = await response.json();

                    if (data.success && data.data && data.data.length > 0) {
                        data.data.forEach((supplier) => {
                            const option = document.createElement("option");
                            option.value = supplier.id;
                            option.textContent = supplier.name;
                            if (
                                posterSupplierId &&
                                supplier.id == posterSupplierId
                            ) {
                                option.selected = true;
                            }
                            posterSelect.appendChild(option);
                        });
                    }
                } catch (error) {
                    console.error("Failed to load Poster suppliers:", error);
                }

                document
                    .getElementById("editSupplierModal")
                    .classList.remove("hidden");
            };

            window.closeEditSupplierModal = function () {
                document
                    .getElementById("editSupplierModal")
                    .classList.add("hidden");
            };

            window.submitEditSupplier = async function () {
                const id = document.getElementById("editSupplierId").value;
                const name = document
                    .getElementById("editSupplierName")
                    .value.trim();
                const phone = document
                    .getElementById("editSupplierPhone")
                    .value.trim();
                const contact_info = document
                    .getElementById("editSupplierContact")
                    .value.trim();
                const poster_supplier_id = document.getElementById(
                    "editSupplierPosterMapping",
                ).value;

                if (!name) {
                    alert("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
                    return;
                }

                try {
                    const response = await fetch("/api/suppliers", {
                        method: "PUT",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            id: parseInt(id),
                            name: name,
                            phone: phone || null,
                            contact_info: contact_info || null,
                            poster_supplier_id: poster_supplier_id
                                ? parseInt(poster_supplier_id)
                                : null,
                        }),
                    });

                    const data = await response.json();

                    if (data.success) {
                        alert("‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
                        closeEditSupplierModal();
                        loadSuppliers(); // Refresh the list
                        loadCategories(); // Also refresh categories to update supplier info there
                    } else {
                        alert("‚ùå –û—à–∏–±–∫–∞: " + data.error);
                    }
                } catch (error) {
                    console.error("Error updating supplier:", error);
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞");
                }
            };

            // Delete supplier
            window.deleteSupplier = async function (
                supplierId,
                supplierName,
                buttonElement,
            ) {
                if (
                    !confirm(
                        `–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ "${supplierName}"?\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.`,
                    )
                ) {
                    return;
                }

                try {
                    const response = await fetch("/api/suppliers", {
                        method: "DELETE",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ id: supplierId }),
                    });

                    const data = await response.json();

                    if (data.success) {
                        // Remove the card from DOM
                        const card = buttonElement.closest(".native-card");
                        if (card) {
                            card.remove();
                        }
                    } else {
                        alert(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
                    }
                } catch (error) {
                    console.error("Error deleting supplier:", error);
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞");
                }
            };

            // Run auto-categorization
            window.runAutoCategorization = async function () {
                if (
                    !confirm(
                        "ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤?\n\n–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π.",
                    )
                ) {
                    return;
                }

                try {
                    const response = await fetch(
                        "/api/auto-categorize-products",
                        {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                        },
                    );

                    const data = await response.json();

                    if (data.success) {
                        alert(
                            `‚úÖ –ê–≤—Ç–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                                `–°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${data.data.categoriesCreated}\n` +
                                `–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${data.data.categorized}\n` +
                                `–ù–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${data.data.uncategorized}`,
                        );
                        loadCategories(); // Refresh the display
                    } else {
                        alert("‚ùå –û—à–∏–±–∫–∞: " + data.error);
                    }
                } catch (error) {
                    console.error("Error running auto-categorization:", error);
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏");
                }
            };

            // Add new category
            window.addNewCategory = async function () {
                // Load suppliers for the dropdown
                try {
                    const response = await fetch("/api/suppliers");
                    const data = await response.json();

                    const select = document.getElementById(
                        "categorySupplierSelect",
                    );

                    if (data.success && data.data && data.data.length > 0) {
                        select.innerHTML =
                            '<option value="">-- –ë–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ --</option>';
                        data.data.forEach((supplier) => {
                            const option = document.createElement("option");
                            option.value = supplier.id;
                            option.textContent = supplier.name;
                            select.appendChild(option);
                        });
                    } else {
                        select.innerHTML =
                            '<option value="">–ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</option>';
                    }

                    // Clear input and show modal
                    document.getElementById("categoryNameInput").value = "";
                    document
                        .getElementById("addCategoryModal")
                        .classList.remove("hidden");
                } catch (error) {
                    console.error("Error loading suppliers:", error);
                    alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤");
                }
            };

            window.closeAddCategoryModal = function () {
                document
                    .getElementById("addCategoryModal")
                    .classList.add("hidden");
            };

            window.submitAddCategory = async function () {
                const categoryName = document
                    .getElementById("categoryNameInput")
                    .value.trim();
                const supplierId = document.getElementById(
                    "categorySupplierSelect",
                ).value;

                if (!categoryName) {
                    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
                    return;
                }

                try {
                    const response = await fetch("/api/categories", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            name: categoryName,
                            supplier_id: supplierId
                                ? parseInt(supplierId)
                                : null,
                        }),
                    });

                    const data = await response.json();

                    if (data.success) {
                        alert("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
                        closeAddCategoryModal();
                        loadCategories(); // Refresh the list
                    } else {
                        alert("‚ùå –û—à–∏–±–∫–∞: " + data.error);
                    }
                } catch (error) {
                    console.error("Error creating category:", error);
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
                }
            };

            // Delete category
            window.deleteCategory = async function (
                categoryId,
                categoryName,
                buttonElement,
            ) {
                if (
                    !confirm(
                        `–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryName}"?\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–≤–∞—Ä–∞–º–∏.`,
                    )
                ) {
                    return;
                }

                try {
                    const response = await fetch("/api/categories", {
                        method: "DELETE",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ id: categoryId }),
                    });

                    const data = await response.json();

                    if (data.success) {
                        // Remove the card from DOM
                        const card = buttonElement.closest(".native-card");
                        if (card) {
                            card.remove();
                        }
                    } else {
                        alert(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
                    }
                } catch (error) {
                    console.error("Error deleting category:", error);
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
                }
            };

            // Load sections
            async function loadSections() {
                const container = document.getElementById("sectionsList");
                container.innerHTML =
                    '<div class="text-center text-muted-foreground py-12"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';

                try {
                    const response = await fetch("/api/sections");
                    const data = await response.json();

                    if (data.success && data.data && data.data.length > 0) {
                        container.innerHTML = "";
                        const grid = document.createElement("div");
                        grid.className =
                            "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3";

                        data.data.forEach((section) => {
                            const card = document.createElement("div");
                            card.className = "rounded-lg border bg-card p-3";
                            const isFromPoster = section.poster_storage_id;

                            card.innerHTML = `
							<div class="space-y-2">
								<div class="flex items-start justify-between gap-2">
									<div class="flex-1 min-w-0">
										<h4 class="font-medium text-base truncate">${section.emoji || "üì¶"} ${section.name}</h4>
										<div class="text-xs text-muted-foreground mt-0.5">
											${isFromPoster ? `üîó Poster` : `üìù –ö–∞—Å—Ç–æ–º–Ω–∞—è`}
										</div>
									</div>
									${
                                        section.products_count
                                            ? `<div class="flex-shrink-0 text-right">
											<div class="text-lg font-semibold">${section.products_count}</div>
											<div class="text-[10px] text-muted-foreground">—Ç–æ–≤–∞—Ä–æ–≤</div>
										</div>`
                                            : ""
                                    }
								</div>
								${
                                    !isFromPoster
                                        ? `
									<button
										onclick="deleteSection(${section.id}, '${section.name.replace(/'/g, "\\'")}', this)"
										class="w-full h-8 text-xs rounded-md bg-destructive text-destructive-foreground hover:bg-destructive/90 active:scale-95 transition-all"
									>
										üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
									</button>
								`
                                        : ""
                                }
							</div>
						`;
                            grid.appendChild(card);
                        });

                        container.appendChild(grid);
                    } else {
                        container.innerHTML = `
						<div class="text-center py-12">
							<div class="text-6xl mb-4">üè™</div>
							<p class="text-xl font-semibold mb-2">–ù–µ—Ç —Å–µ–∫—Ü–∏–π</p>
							<p class="text-muted-foreground">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —Å Poster –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é</p>
						</div>
					`;
                    }
                } catch (error) {
                    console.error("Error loading sections:", error);
                    container.innerHTML =
                        '<div class="text-center text-destructive py-12"><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p></div>';
                }
            }

            // Add new section
            window.addNewSection = function () {
                document.getElementById("sectionNameInput").value = "";
                document.getElementById("sectionEmojiInput").value = "";
                document
                    .getElementById("addSectionModal")
                    .classList.remove("hidden");
            };

            window.closeAddSectionModal = function () {
                document
                    .getElementById("addSectionModal")
                    .classList.add("hidden");
            };

            window.submitAddSection = async function () {
                const name = document
                    .getElementById("sectionNameInput")
                    .value.trim();
                const emoji =
                    document.getElementById("sectionEmojiInput").value.trim() ||
                    "üì¶";

                if (!name) {
                    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏");
                    return;
                }

                try {
                    const response = await fetch("/api/sections", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ name, emoji }),
                    });

                    const data = await response.json();

                    if (data.success) {
                        alert("‚úÖ –°–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
                        closeAddSectionModal();
                        loadSections();
                    } else {
                        alert("‚ùå –û—à–∏–±–∫–∞: " + data.error);
                    }
                } catch (error) {
                    console.error("Error creating section:", error);
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏");
                }
            };

            // Delete section
            window.deleteSection = async function (
                sectionId,
                sectionName,
                buttonElement,
            ) {
                if (
                    !confirm(
                        `–£–¥–∞–ª–∏—Ç—å —Å–µ–∫—Ü–∏—é "${sectionName}"?\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°–µ–∫—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.`,
                    )
                ) {
                    return;
                }

                try {
                    const response = await fetch("/api/sections", {
                        method: "DELETE",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ id: sectionId }),
                    });

                    const data = await response.json();

                    if (data.success) {
                        // Remove the card from DOM
                        const card = buttonElement.closest(".rounded-lg");
                        if (card) {
                            card.remove();
                        }
                    } else {
                        alert(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
                    }
                } catch (error) {
                    console.error("Error deleting section:", error);
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏");
                }
            };

            // Sync sections from Poster
            window.syncSectionsFromPoster = async function () {
                if (
                    !confirm(
                        "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ü–∏–∏ –∏–∑ Poster?\n\n–≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–ª–∞–¥–æ–≤ Poster.",
                    )
                ) {
                    return;
                }

                try {
                    const response = await fetch("/api/sync-sections");
                    const data = await response.json();

                    if (data.success) {
                        alert(
                            `‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°–æ–∑–¥–∞–Ω–æ: ${data.data.created}\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.data.updated}\n–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${data.data.skipped}`,
                        );
                        loadSections();
                    } else {
                        alert("‚ùå –û—à–∏–±–∫–∞: " + data.error);
                    }
                } catch (error) {
                    console.error("Error syncing sections:", error);
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
                }
            };

            // Store products globally for filtering
            let allProducts = [];

            // Load products (from sections and custom)
            async function loadProducts() {
                const container = document.getElementById("productsList");
                container.innerHTML =
                    '<div class="text-center text-muted-foreground py-12"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';

                try {
                    // Load section products, custom products, and categories in parallel
                    const [sectionsRes, customRes, categoriesRes] =
                        await Promise.all([
                            fetch("/api/section-products"),
                            fetch("/api/custom-products"),
                            fetch("/api/categories"),
                        ]);

                    const sectionsData = await sectionsRes.json();
                    const customData = await customRes.json();
                    const categoriesData = await categoriesRes.json();

                    const sectionProducts = sectionsData.success
                        ? sectionsData.data.map((p) => ({
                              ...p,
                              type: "section",
                          }))
                        : [];
                    const customProducts = customData.success
                        ? customData.data.map((p) => ({ ...p, type: "custom" }))
                        : [];
                    const categories = categoriesData.success
                        ? categoriesData.data
                        : [];

                    // Store products globally
                    allProducts = [...sectionProducts, ...customProducts];

                    // Populate category filter dropdown
                    const categoryFilter = document.getElementById(
                        "categoryFilterSelect",
                    );
                    categoryFilter.innerHTML =
                        '<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
                    categories.forEach((cat) => {
                        categoryFilter.innerHTML += `<option value="${cat.id}">${cat.name}</option>`;
                    });

                    displayProducts(allProducts, categories);
                } catch (error) {
                    console.error("Error loading products:", error);
                    container.innerHTML =
                        '<div class="text-center text-destructive py-12"><p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p></div>';
                }
            }

            // Display products using Alpine.js
            function displayProducts(products, categories) {
                const container = document.getElementById("productsList");

                const onCategoryChange = async (productId, categoryId, type) => {
                    await updateProductCategory(productId, categoryId, type);
                };

                const onDelete = async (productId, productName, type) => {
                    if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${productName}"?`)) {
                        try {
                            const endpoint = type === "custom" ? `/api/custom-products` : `/api/section-products`;
                            const response = await fetch(endpoint, {
                                method: "DELETE",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ id: productId }),
                            });
                            const data = await response.json();
                            if (data.success) {
                                await loadProducts();
                            } else {
                                alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${data.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
                            }
                        } catch (error) {
                            console.error("Error deleting product:", error);
                            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞");
                        }
                    }
                };

                renderProductsTable(container, products, categories, onCategoryChange, onDelete);
            }

            // Filter products based on search and category
            window.filterProducts = async function () {
                const searchTerm = document
                    .getElementById("productSearchInput")
                    .value.toLowerCase();
                const categoryId = document.getElementById(
                    "categoryFilterSelect",
                ).value;

                let filtered = allProducts;

                // Filter by search term
                if (searchTerm) {
                    filtered = filtered.filter((p) => {
                        const name = (
                            p.name ||
                            p.product_name ||
                            ""
                        ).toLowerCase();
                        const sectionName = (
                            p.section_name || ""
                        ).toLowerCase();
                        return (
                            name.includes(searchTerm) ||
                            sectionName.includes(searchTerm)
                        );
                    });
                }

                // Filter by category
                if (categoryId) {
                    filtered = filtered.filter(
                        (p) => p.category_id == categoryId,
                    );
                }

                // Re-fetch categories for display
                try {
                    const categoriesRes = await fetch("/api/categories");
                    const categoriesData = await categoriesRes.json();
                    const categories = categoriesData.success
                        ? categoriesData.data
                        : [];
                    displayProducts(filtered, categories);
                } catch (error) {
                    console.error("Error filtering products:", error);
                }
            };

            // Update product category
            window.updateProductCategory = async function (
                productId,
                categoryId,
                productType,
            ) {
                try {
                    const response = await fetch(
                        "/api/update-product-category",
                        {
                            method: "PUT",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                productId,
                                categoryId: categoryId || null,
                                productType,
                            }),
                        },
                    );

                    const data = await response.json();

                    if (data.success) {
                        // Update local data
                        const product = allProducts.find(
                            (p) => p.id === productId && p.type === productType,
                        );
                        if (product) {
                            product.category_id = categoryId || null;
                        }
                        console.log("‚úÖ Category updated");
                    } else {
                        console.error("‚ùå Error:", data.error);
                        alert("–û—à–∏–±–∫–∞: " + data.error);
                    }
                } catch (error) {
                    console.error("Error updating category:", error);
                    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
                }
            };

            // Delete product (custom products only)
            // Sync products from Poster
            window.syncProducts = async function () {
                if (
                    !confirm(
                        "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ Poster?\n\n–≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Poster.",
                    )
                ) {
                    return;
                }

                try {
                    const response = await fetch("/api/sync-section-products");
                    const data = await response.json();

                    if (data.success) {
                        alert(
                            `‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°–æ–∑–¥–∞–Ω–æ: ${data.data.created}\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.data.updated}\n–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${data.data.skipped}`,
                        );
                        loadProducts(); // Reload products list
                    } else {
                        alert("‚ùå –û—à–∏–±–∫–∞: " + data.error);
                    }
                } catch (error) {
                    console.error("Error syncing products:", error);
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
                }
            };

            // Placeholder functions
            window.exportAllDeliveredOrders = function () {
                alert("–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
            };

            // Sync suppliers from Poster
            window.syncSuppliersFromPoster = async function () {
                if (
                    !confirm(
                        "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ Poster?\n\n–≠—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Poster.",
                    )
                ) {
                    return;
                }

                try {
                    const response = await fetch("/api/sync-suppliers", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                    });

                    const data = await response.json();

                    if (data.success) {
                        alert(
                            `‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                                `–°–æ–∑–¥–∞–Ω–æ: ${data.data.created}\n` +
                                `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.data.updated}\n` +
                                `–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${data.data.skipped}\n` +
                                `–í—Å–µ–≥–æ: ${data.data.total}`,
                        );
                        loadSuppliers(); // Refresh the list
                    } else {
                        alert("‚ùå –û—à–∏–±–∫–∞: " + data.error);
                    }
                } catch (error) {
                    console.error("Error syncing suppliers:", error);
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤");
                }
            };

            window.addNewSupplier = async function () {
                // Clear form
                document.getElementById("addSupplierName").value = "";
                document.getElementById("addSupplierPhone").value = "";
                document.getElementById("addSupplierContact").value = "";

                // Load Poster suppliers for mapping
                const posterSelect = document.getElementById(
                    "addSupplierPosterMapping",
                );
                posterSelect.innerHTML =
                    '<option value="">-- –ù–µ —Å–≤—è–∑–∞–Ω —Å Poster --</option>';

                try {
                    const response = await fetch("/api/poster-suppliers");
                    const data = await response.json();

                    if (data.success && data.data && data.data.length > 0) {
                        data.data.forEach((supplier) => {
                            const option = document.createElement("option");
                            option.value = supplier.id;
                            option.textContent = supplier.name;
                            posterSelect.appendChild(option);
                        });
                    }
                } catch (error) {
                    console.error("Failed to load Poster suppliers:", error);
                }

                // Show modal
                document
                    .getElementById("addSupplierModal")
                    .classList.remove("hidden");
            };

            window.closeAddSupplierModal = function () {
                document
                    .getElementById("addSupplierModal")
                    .classList.add("hidden");
            };

            window.submitAddSupplier = async function () {
                const name = document
                    .getElementById("addSupplierName")
                    .value.trim();
                const phone = document
                    .getElementById("addSupplierPhone")
                    .value.trim();
                const contact_info = document
                    .getElementById("addSupplierContact")
                    .value.trim();
                const poster_supplier_id = document.getElementById(
                    "addSupplierPosterMapping",
                ).value;

                if (!name) {
                    alert("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
                    return;
                }

                try {
                    const response = await fetch("/api/suppliers", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            name: name,
                            phone: phone || null,
                            contact_info: contact_info || null,
                            poster_supplier_id: poster_supplier_id
                                ? parseInt(poster_supplier_id)
                                : null,
                        }),
                    });

                    const data = await response.json();

                    if (data.success) {
                        alert("‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
                        closeAddSupplierModal();
                        loadSuppliers(); // Refresh the list
                    } else {
                        alert("‚ùå –û—à–∏–±–∫–∞: " + data.error);
                    }
                } catch (error) {
                    console.error("Error creating supplier:", error);
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞");
                }
            };

            window.openAddProductModal = async function () {
                const modal = document.getElementById("addProductModal");
                modal.classList.remove("hidden");

                // Load sections and categories for the dropdowns
                try {
                    const [sectionsResponse, categoriesResponse] =
                        await Promise.all([
                            fetch("/api/sections"),
                            fetch("/api/categories"),
                        ]);

                    const sectionsData = await sectionsResponse.json();
                    const categoriesData = await categoriesResponse.json();

                    // Populate sections
                    if (sectionsData.success) {
                        const sectionSelect = document.getElementById(
                            "productSectionSelect",
                        );
                        sectionSelect.innerHTML =
                            '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é --</option>';
                        sectionsData.data.forEach((section) => {
                            sectionSelect.innerHTML += `<option value="${section.id}">${section.emoji || "üì¶"} ${section.name}</option>`;
                        });
                    }

                    // Populate categories
                    if (categoriesData.success) {
                        const categorySelect = document.getElementById(
                            "productCategorySelect",
                        );
                        categorySelect.innerHTML =
                            '<option value="">-- –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ --</option>';
                        categoriesData.data.forEach((cat) => {
                            categorySelect.innerHTML += `<option value="${cat.id}">${cat.name}</option>`;
                        });
                    }
                } catch (error) {
                    console.error("Error loading data:", error);
                }
            };

            window.closeAddProductModal = function () {
                const modal = document.getElementById("addProductModal");
                modal.classList.add("hidden");
                // Clear inputs
                document.getElementById("productNameInput").value = "";
                document.getElementById("productUnitInput").value = "—à—Ç";
                document.getElementById("productSectionSelect").value = "";
                document.getElementById("productCategorySelect").value = "";
            };

            window.submitAddProduct = async function () {
                const name = document
                    .getElementById("productNameInput")
                    .value.trim();
                const unit =
                    document.getElementById("productUnitInput").value.trim() ||
                    "—à—Ç";
                const sectionId =
                    document.getElementById("productSectionSelect").value ||
                    null;
                const categoryId =
                    document.getElementById("productCategorySelect").value ||
                    null;

                if (!name) {
                    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞");
                    return;
                }

                if (!sectionId) {
                    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é");
                    return;
                }

                try {
                    const response = await fetch("/api/custom-products", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            name,
                            unit,
                            section_id: sectionId,
                            category_id: categoryId,
                        }),
                    });

                    const data = await response.json();

                    if (data.success) {
                        alert("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
                        closeAddProductModal();
                        loadProducts(); // Reload products list
                    } else {
                        alert("‚ùå –û—à–∏–±–∫–∞: " + data.error);
                    }
                } catch (error) {
                    console.error("Error creating product:", error);
                    alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞");
                }
            };

            // Load data on page load
            document.addEventListener("DOMContentLoaded", () => {
                console.log("üì± Manager page loaded with shadcn-svelte");

                // Setup tab switching
                document.querySelectorAll(".tab-button").forEach((button) => {
                    button.addEventListener("click", () => {
                        const tabName = button.getAttribute("data-tab");
                        if (tabName) {
                            switchTab(tabName);
                        }
                    });
                });

                // Load initial data
                loadOrdersByCategory();
                setInterval(loadOrdersByCategory, 30000);
            });
        </script>
    </div>
</Layout>
