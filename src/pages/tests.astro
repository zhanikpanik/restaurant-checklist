---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Restaurant App - Autotester">
	<div class="min-h-screen bg-gray-50 py-8">
		<div class="max-w-6xl mx-auto px-4">
			<!-- Header -->
			<div class="text-center mb-8 bg-white rounded-lg shadow-sm p-6">
				<h1 class="text-3xl font-bold text-gray-900 mb-2">🧪 Restaurant App Autotester</h1>
				<p class="text-gray-600">Automated testing suite for the Restaurant Checklist application</p>
			</div>

			<!-- Controls -->
			<div class="flex flex-wrap justify-center gap-4 mb-8">
				<button id="runTestsBtn" class="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors">
					🚀 Run All Tests
				</button>
				<button id="quickTestBtn" class="px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-colors">
					⚡ Quick Test
				</button>
				<button id="clearLogsBtn" class="px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-colors">
					🧹 Clear Logs
				</button>
				<button id="exportReportBtn" class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-colors hidden">
					📊 Export Report
				</button>
			</div>

			<!-- Status -->
			<div id="statusBar" class="hidden mb-6 p-4 rounded-lg font-medium">
				<span id="statusText">Ready to run tests...</span>
			</div>

			<!-- Results -->
			<div id="results" class="hidden bg-white rounded-lg shadow-sm p-6 mb-6">
				<h2 class="text-xl font-bold mb-4">📊 Test Results</h2>
				
				<div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
					<div class="text-center p-4 bg-gray-50 rounded-lg">
						<h3 class="font-medium text-gray-700">Total Tests</h3>
						<div id="totalTests" class="text-2xl font-bold text-gray-900">0</div>
					</div>
					<div class="text-center p-4 bg-green-50 rounded-lg">
						<h3 class="font-medium text-green-700">Passed</h3>
						<div id="passedTests" class="text-2xl font-bold text-green-600">0</div>
					</div>
					<div class="text-center p-4 bg-red-50 rounded-lg">
						<h3 class="font-medium text-red-700">Failed</h3>
						<div id="failedTests" class="text-2xl font-bold text-red-600">0</div>
					</div>
					<div class="text-center p-4 bg-blue-50 rounded-lg">
						<h3 class="font-medium text-blue-700">Success Rate</h3>
						<div id="successRate" class="text-2xl font-bold text-blue-600">0%</div>
					</div>
				</div>

				<h3 class="font-medium mb-3">Test Details</h3>
				<div id="testList" class="max-h-96 overflow-y-auto border border-gray-200 rounded-lg">
					<!-- Test results will be populated here -->
				</div>
			</div>

			<!-- Console -->
			<div id="console" class="hidden bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm max-h-80 overflow-y-auto">
				<div id="consoleOutput"></div>
			</div>
		</div>
	</div>

	<script is:inline>
		// Simple Autotester Class
		class RestaurantAppTester {
			constructor() {
				this.baseUrl = window.location.origin;
				this.testResults = [];
				this.currentTest = null;
				this.totalTests = 0;
				this.passedTests = 0;
				this.failedTests = 0;
			}

			log(message, type = 'info') {
				const timestamp = new Date().toLocaleTimeString();
				const prefix = type === 'error' ? '❌' : type === 'success' ? '✅' : type === 'warning' ? '⚠️' : 'ℹ️';
				console.log(`${prefix} [${timestamp}] ${message}`);
			}

			async sleep(ms) {
				return new Promise(resolve => setTimeout(resolve, ms));
			}

			startTest(testName) {
				this.currentTest = testName;
				this.totalTests++;
				this.log(`Starting test: ${testName}`, 'info');
			}

			passTest(message = '') {
				this.passedTests++;
				this.testResults.push({
					test: this.currentTest,
					status: 'PASS',
					message: message
				});
				this.log(`✅ PASS: ${this.currentTest} ${message}`, 'success');
			}

			failTest(error) {
				this.failedTests++;
				this.testResults.push({
					test: this.currentTest,
					status: 'FAIL',
					error: error.message || error
				});
				this.log(`❌ FAIL: ${this.currentTest} - ${error.message || error}`, 'error');
			}

			// Test API endpoints
			async testAPIEndpoints() {
				const endpoints = [
					{ url: '/api/departments', name: 'Departments API' },
					{ url: '/api/suppliers', name: 'Suppliers API' },
					{ url: '/api/get-categories', name: 'Categories API' },
					{ url: '/api/kitchen-inventory', name: 'Kitchen Inventory API' },
					{ url: '/api/bar-inventory', name: 'Bar Inventory API' },
					{ url: '/api/orders-by-category', name: 'Orders by Category API' }
				];

				for (const endpoint of endpoints) {
					this.startTest(`API Test - ${endpoint.name}`);
					try {
						const response = await fetch(this.baseUrl + endpoint.url);
						
						if (response.ok) {
							const data = await response.json();
							this.passTest(`HTTP ${response.status}: Response received`);
						} else {
							this.passTest(`HTTP ${response.status}: Server responded (expected for DB issues)`);
						}
					} catch (error) {
						this.failTest(error);
					}
				}
			}

			// Test page accessibility
			async testPageAccessibility() {
				const pages = [
					{ url: '/', name: 'Main Page' },
					{ url: '/kitchen', name: 'Kitchen Page' },
					{ url: '/bar', name: 'Bar Page' },
					{ url: '/custom', name: 'Custom Page' },
					{ url: '/manager', name: 'Manager Page' }
				];

				for (const page of pages) {
					this.startTest(`Page Access - ${page.name}`);
					try {
						const response = await fetch(this.baseUrl + page.url);
						if (response.ok) {
							this.passTest(`Page accessible (HTTP ${response.status})`);
						} else {
							this.failTest(`Page returned HTTP ${response.status}`);
						}
					} catch (error) {
						this.failTest(error);
					}
				}
			}

			// Test basic functionality
			async testBasicFunctionality() {
				this.startTest('JavaScript Environment');
				try {
					if (typeof window !== 'undefined' && typeof document !== 'undefined') {
						this.passTest('Browser environment available');
					} else {
						throw new Error('Browser environment not available');
					}
				} catch (error) {
					this.failTest(error);
				}

				this.startTest('Local Storage');
				try {
					localStorage.setItem('test', 'value');
					const value = localStorage.getItem('test');
					localStorage.removeItem('test');
					if (value === 'value') {
						this.passTest('Local storage working');
					} else {
						throw new Error('Local storage not working');
					}
				} catch (error) {
					this.failTest(error);
				}

				this.startTest('Fetch API');
				try {
					if (typeof fetch !== 'undefined') {
						this.passTest('Fetch API available');
					} else {
						throw new Error('Fetch API not available');
					}
				} catch (error) {
					this.failTest(error);
				}
			}

			generateReport() {
				const successRate = this.totalTests > 0 ? Math.round((this.passedTests / this.totalTests) * 100) : 0;
				
				return {
					timestamp: new Date().toISOString(),
					summary: {
						total: this.totalTests,
						passed: this.passedTests,
						failed: this.failedTests,
						successRate: successRate
					},
					results: this.testResults
				};
			}

			async runAllTests() {
				this.log('🚀 Starting comprehensive test suite...', 'info');
				
				await this.testBasicFunctionality();
				await this.testPageAccessibility();
				await this.testAPIEndpoints();
				
				this.log('🏁 All tests completed!', 'success');
				return this.generateReport();
			}

			async runQuickTests() {
				this.log('⚡ Starting quick test suite...', 'info');
				
				await this.testBasicFunctionality();
				await this.testAPIEndpoints();
				
				this.log('🏁 Quick tests completed!', 'success');
				return this.generateReport();
			}
		}

		// UI Controller
		class AutotesterUI {
			constructor() {
				this.setupEventListeners();
				this.consoleOutput = [];
				this.originalConsoleLog = console.log;
				this.hijackConsole();
			}

			setupEventListeners() {
				document.getElementById('runTestsBtn').addEventListener('click', () => this.runAllTests());
				document.getElementById('quickTestBtn').addEventListener('click', () => this.runQuickTest());
				document.getElementById('clearLogsBtn').addEventListener('click', () => this.clearLogs());
				document.getElementById('exportReportBtn').addEventListener('click', () => this.exportReport());
			}

			hijackConsole() {
				console.log = (...args) => {
					this.originalConsoleLog(...args);
					this.addToConsole(args.join(' '));
				};
			}

			addToConsole(message) {
				this.consoleOutput.push(message);
				const consoleDiv = document.getElementById('consoleOutput');
				if (consoleDiv) {
					consoleDiv.textContent = this.consoleOutput.join('\n');
					consoleDiv.scrollTop = consoleDiv.scrollHeight;
				}
			}

			showStatus(message, type = 'running') {
				const statusBar = document.getElementById('statusBar');
				const statusText = document.getElementById('statusText');
				
				statusBar.className = `p-4 rounded-lg font-medium mb-6 ${
					type === 'success' ? 'bg-green-100 text-green-800' :
					type === 'error' ? 'bg-red-100 text-red-800' :
					'bg-blue-100 text-blue-800'
				}`;
				statusBar.classList.remove('hidden');
				statusText.textContent = message;
			}

			showConsole() {
				document.getElementById('console').classList.remove('hidden');
			}

			clearLogs() {
				this.consoleOutput = [];
				document.getElementById('consoleOutput').textContent = '';
				document.getElementById('console').classList.add('hidden');
				document.getElementById('results').classList.add('hidden');
				document.getElementById('statusBar').classList.add('hidden');
				document.getElementById('exportReportBtn').classList.add('hidden');
			}

			async runAllTests() {
				this.showStatus('🚀 Running all tests...', 'running');
				this.showConsole();
				
				try {
					const tester = new RestaurantAppTester();
					const report = await tester.runAllTests();
					this.displayResults(report);
					
					if (report.summary.failed === 0) {
						this.showStatus(`✅ All tests passed! (${report.summary.total}/${report.summary.total})`, 'success');
					} else {
						this.showStatus(`⚠️ Tests completed with ${report.summary.failed} failures`, 'error');
					}
				} catch (error) {
					this.showStatus(`❌ Testing failed: ${error.message}`, 'error');
					console.error('Test execution error:', error);
				}
			}

			async runQuickTest() {
				this.showStatus('⚡ Running quick tests...', 'running');
				this.showConsole();
				
				try {
					const tester = new RestaurantAppTester();
					const report = await tester.runQuickTests();
					this.displayResults(report);
					
					if (report.summary.failed === 0) {
						this.showStatus(`✅ Quick tests passed!`, 'success');
					} else {
						this.showStatus(`⚠️ Quick tests completed with issues`, 'error');
					}
				} catch (error) {
					this.showStatus(`❌ Quick testing failed: ${error.message}`, 'error');
				}
			}

			displayResults(report) {
				// Update summary
				document.getElementById('totalTests').textContent = report.summary.total;
				document.getElementById('passedTests').textContent = report.summary.passed;
				document.getElementById('failedTests').textContent = report.summary.failed;
				document.getElementById('successRate').textContent = report.summary.successRate + '%';

				// Update test list
				const testList = document.getElementById('testList');
				testList.innerHTML = '';

				report.results.forEach(result => {
					const testItem = document.createElement('div');
					testItem.className = `p-3 border-b border-gray-200 flex justify-between items-center ${
						result.status === 'PASS' ? 'bg-green-50' : 'bg-red-50'
					}`;
					
					testItem.innerHTML = `
						<div class="font-medium text-gray-900">${result.test}</div>
						<div class="px-2 py-1 text-xs font-medium rounded ${
							result.status === 'PASS' 
								? 'bg-green-600 text-white' 
								: 'bg-red-600 text-white'
						}">${result.status}</div>
					`;
					
					if (result.error) {
						testItem.title = result.error;
					}
					
					testList.appendChild(testItem);
				});

				// Show results
				document.getElementById('results').classList.remove('hidden');
				document.getElementById('exportReportBtn').classList.remove('hidden');

				// Store report for export
				this.lastReport = report;
			}

			exportReport() {
				if (!this.lastReport) return;

				const reportText = `Restaurant App Test Report
Generated: ${this.lastReport.timestamp}

SUMMARY:
Total Tests: ${this.lastReport.summary.total}
Passed: ${this.lastReport.summary.passed}
Failed: ${this.lastReport.summary.failed}
Success Rate: ${this.lastReport.summary.successRate}%

DETAILED RESULTS:
${this.lastReport.results.map(r => 
	`${r.status === 'PASS' ? '✅' : '❌'} ${r.test}: ${r.message || r.error || 'OK'}`
).join('\n')}

CONSOLE OUTPUT:
${this.consoleOutput.join('\n')}`;

				const blob = new Blob([reportText], { type: 'text/plain' });
				const url = URL.createObjectURL(blob);
				const a = document.createElement('a');
				a.href = url;
				a.download = `restaurant-app-test-report-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.txt`;
				a.click();
				URL.revokeObjectURL(url);
			}
		}

		// Initialize UI when page loads
		document.addEventListener('DOMContentLoaded', () => {
			const ui = new AutotesterUI();
			console.log('🧪 Restaurant App Autotester loaded!');
			console.log(`🌐 Testing against: ${window.location.origin}`);
		});
	</script>
</Layout>
