---
import Layout from '../layouts/Layout.astro';
---

<Layout title="–ë–∞—Ä - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å">
	<div class="min-h-screen bg-white">
		<!-- Header with Role Info -->
		<header class="bg-blue-600 text-white px-4 py-6">
			<div class="max-w-md mx-auto">
				<div class="flex items-center justify-between mb-4">
					<div class="flex items-center space-x-2">
						<span class="text-2xl">üç∑</span>
						<h1 class="text-2xl font-bold">–ë–∞—Ä</h1>
					</div>
					<div class="text-right text-sm">
						<div class="font-medium">–ü–µ—Ä—Å–æ–Ω–∞–ª –±–∞—Ä–∞</div>
						<a href="/" class="text-blue-200 hover:text-white">‚Üê –ì–ª–∞–≤–Ω–∞—è</a>
					</div>
				</div>

			</div>
		</header>

		<!-- Main Content -->
		<main class="max-w-md mx-auto px-4 py-6">
			<!-- Loading State -->
			<div id="loadingState" class="text-center py-8">
				<div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
				<p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±–∞—Ä–∞...</p>
			</div>

			<!-- Order View -->
			<div id="orderView" class="space-y-4 hidden">
				<!-- Search Field -->
				<div class="sticky top-0 z-10 bg-gray-50 p-4 rounded-lg border-2 border-blue-200 shadow-sm">
					<div class="relative">
						<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
							<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
							</svg>
						</div>
						<input 
							type="text" 
							id="productSearchInput"
							class="block w-full pl-10 pr-10 py-3 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
							placeholder="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±–∞—Ä–∞..."
							autocomplete="off"
						/>
						<div class="absolute inset-y-0 right-0 pr-3 flex items-center">
							<button 
								id="clearSearchBtn"
								class="h-5 w-5 text-gray-400 hover:text-gray-600 focus:outline-none hidden"
								title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
							>
								<svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
								</svg>
							</button>
						</div>
					</div>
					<div id="searchResultsCount" class="mt-2 text-sm text-gray-600 hidden">
						<span id="searchResultsText"></span>
					</div>
					<div id="addedProductsLabel" class="mt-2 text-sm font-medium text-blue-700 bg-blue-50 px-3 py-2 rounded-lg border border-blue-200 hidden">
						<span id="addedProductsText">–¢–æ–≤–∞—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</span>
					</div>
				</div>
				
				<!-- Inline Custom Item Form -->
				<div class="mb-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
					<div class="flex items-center space-x-1">
						<input 
							type="text" 
							id="customItemName" 
							placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
							class="flex-1 px-2 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm min-w-0"
						/>
						<input 
							type="number" 
							id="customItemQuantity" 
							placeholder="–ö–æ–ª-–≤–æ"
							min="0.1"
							step="0.1"
							inputmode="numeric"
							pattern="[0-9]*"
							class="w-16 px-2 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
						/>
						<select 
							id="customItemUnit" 
							class="w-14 px-1 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
						>
							<option value="—à—Ç">—à—Ç</option>
							<option value="–∫–≥">–∫–≥</option>
							<option value="–ª">–ª</option>
							<option value="–º–ª">–º–ª</option>
							<option value="–≥">–≥</option>
							<option value="–±—É—Ç">–±—É—Ç</option>
							<option value="—É–ø–∞–∫">—É–ø–∞–∫</option>
						</select>
						<button 
							id="addCustomItemBtn"
							class="px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200 text-sm font-medium flex-shrink-0"
						>
							‚ûï
						</button>
					</div>
				</div>

				<!-- Products List -->
				<div id="productsList">
					<!-- Products will be populated by JavaScript -->
				</div>
				
				<!-- Manual Sync Button (for debugging) -->
				<button 
					id="manualSyncBtn" 
					class="fixed bottom-24 right-6 bg-purple-500 hover:bg-purple-600 text-white font-medium py-2 px-4 rounded-lg shadow-lg z-50 transition-all duration-200 text-sm"
					onclick="manualSync()"
				>
					üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
				</button>

				<!-- Floating Action Button -->
				<button 
					id="sendWhatsAppBtn" 
					class="fixed bottom-6 right-6 bg-gray-400 hover:bg-gray-500 text-white font-medium py-4 px-6 rounded-lg shadow-lg z-50 transition-all duration-200 flex items-center space-x-2 min-w-[180px] justify-center"
					onclick="goToCart()"
				>
					<span class="text-center">–í –∫–æ—Ä–∑–∏–Ω—É</span>
				</button>
			</div>
		</main>


	</div>

	<script is:inline>
		// Set role and department
		window.userRole = 'bar';
		window.currentDepartment = 'bar';
		
		// Load bar products
		async function loadBarProducts() {
			const loadingState = document.getElementById('loadingState');
			const orderView = document.getElementById('orderView');
			
			try {
				console.log('üç∑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±–∞—Ä–∞...');
				
				const response = await fetch('/api/bar-inventory');
				const result = await response.json();
				
				if (!result.success) {
					throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –±–∞—Ä–∞');
				}
				
				const barProducts = result.data;
				console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${barProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –±–∞—Ä–∞`);
				
				// Hide loading and show order view
				loadingState.style.display = 'none';
				orderView.style.display = 'block';
				orderView.classList.remove('hidden');
				
				// Store products globally
				window.barProducts = barProducts;
				
				// Initialize order mode
				if (window.initializeOrderMode) {
					window.initializeOrderMode();
				}
				
				// Wait a bit for shopping list data to be initialized, then load cart from server
				setTimeout(async () => {
					if (window.checklist && window.checklist.loadCartFromServer) {
						await window.checklist.loadCartFromServer();
					}
				}, 500);
				
				// Update floating button label
				if (window.updateFloatingButtonLabel) {
					window.updateFloatingButtonLabel();
				}
				
			} catch (error) {
				console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –±–∞—Ä–∞:', error);
				loadingState.innerHTML = `
					<div class="text-center py-8">
						<div class="text-red-500 mb-4">‚ùå</div>
						<p class="text-red-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–∞—Ä–∞</p>
						<p class="text-sm text-gray-500">${error.message}</p>
						<button onclick="loadBarProducts()" class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg">
							–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
						</button>
					</div>
				`;
			}
		}
		
		// Load on page ready
		document.addEventListener('DOMContentLoaded', loadBarProducts);

		// Go to cart function - saves to server then navigates
		async function goToCart() {
			const btn = document.getElementById('sendWhatsAppBtn');
			const originalText = btn.innerHTML;
			btn.innerHTML = '<span>‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...</span>';
			btn.disabled = true;

			try {
				// Save current cart to server for multi-device sync
				if (window.checklist && window.checklist.saveCartToServer) {
					await window.checklist.saveCartToServer();
				}
				
				// Navigate to cart
				window.location.href = '/cart';
				
			} catch (error) {
				console.error('‚ùå Failed to sync cart:', error);
				btn.innerHTML = '<span>‚ùå –û—à–∏–±–∫–∞</span>';
				setTimeout(() => {
					btn.innerHTML = originalText;
					btn.disabled = false;
				}, 2000);
			}
		}

		// Manual sync function for debugging
		async function manualSync() {
			const btn = document.getElementById('manualSyncBtn');
			const originalText = btn.innerHTML;
			btn.innerHTML = '‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...';
			btn.disabled = true;

			try {
				console.log('üîÑ Manual sync triggered');
				
				// First save current cart to server
				if (window.checklist && window.checklist.saveCartToServer) {
					await window.checklist.saveCartToServer();
				}
				
				// Then load from server
				if (window.checklist && window.checklist.loadCartFromServer) {
					await window.checklist.loadCartFromServer();
				}
				
				btn.innerHTML = '‚úÖ –ì–æ—Ç–æ–≤–æ';
				setTimeout(() => {
					btn.innerHTML = originalText;
					btn.disabled = false;
				}, 2000);
				
			} catch (error) {
				console.error('‚ùå Manual sync failed:', error);
				btn.innerHTML = '‚ùå –û—à–∏–±–∫–∞';
				setTimeout(() => {
					btn.innerHTML = originalText;
					btn.disabled = false;
				}, 2000);
			}
		}

		// Setup inline custom item form
		document.addEventListener('DOMContentLoaded', function() {
			const addCustomItemBtn = document.getElementById('addCustomItemBtn');
			const customItemName = document.getElementById('customItemName');
			const customItemQuantity = document.getElementById('customItemQuantity');
			const customItemUnit = document.getElementById('customItemUnit');
			
			if (addCustomItemBtn) {
				addCustomItemBtn.addEventListener('click', function() {
					const name = customItemName.value.trim();
					const quantity = parseFloat(customItemQuantity.value);
					const unit = customItemUnit.value;
					
					if (!name || !quantity || !unit) {
						alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
						return;
					}
					
					// Create custom item with unique ID (negative to distinguish from Poster items)
					const customItem = {
						id: -Date.now(), // Negative ID for custom items
						name: name,
						quantity: 0, // Current stock (unknown for custom items)
						unit: unit,
						minQuantity: 0,
						checked: false,
						shoppingQuantity: quantity,
						isCustom: true,
					};
					
					// Wait for checklist.js to be loaded and initialized
					const waitForChecklist = setInterval(() => {
						if (window.customItems && window.shoppingListData && window.renderShoppingListProducts) {
							clearInterval(waitForChecklist);
							
							// Add to custom items array
							window.customItems.push(customItem);
							
							// Add to shopping list data
							window.shoppingListData.push(customItem);
							
							// Re-render the shopping list to include the new item
							window.renderShoppingListProducts();
							
							// Update floating button label
							if (window.updateFloatingButtonLabel) {
								window.updateFloatingButtonLabel();
							}
							
							// Auto-save
							if (window.autoSaveToCache) {
								window.autoSaveToCache();
							}
							
							// Clear form
							customItemName.value = '';
							customItemQuantity.value = '';
							customItemUnit.value = '—à—Ç';
							
							// Focus back to name input
							customItemName.focus();
							
							// Show success message
							alert(`–¢–æ–≤–∞—Ä "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!`);
						}
					}, 100);
					
					// Timeout after 5 seconds if checklist.js doesn't load
					setTimeout(() => {
						clearInterval(waitForChecklist);
						alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
					}, 5000);
				});
			}
			
			// Handle Enter key in name input
			if (customItemName) {
				customItemName.addEventListener('keydown', function(e) {
					if (e.key === 'Enter') {
						e.preventDefault();
						addCustomItemBtn.click();
					}
				});
			}
			
			// Handle Enter key in quantity input
			if (customItemQuantity) {
				customItemQuantity.addEventListener('keydown', function(e) {
					if (e.key === 'Enter') {
						e.preventDefault();
						addCustomItemBtn.click();
					}
				});
			}
		});
	</script>

	<script src="/scripts/checklist.js" is:inline></script>
</Layout>