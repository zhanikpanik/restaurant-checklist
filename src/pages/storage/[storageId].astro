---
import Layout from '../../layouts/Layout.astro';

// Get storage/department info from URL
const { storageId } = Astro.params;
---

<Layout title="–°–∫–ª–∞–¥ - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å">
	<div class="min-h-screen bg-white">
		<!-- Header -->
		<header class="bg-blue-600 text-white px-4 py-4">
			<div class="max-w-md mx-auto flex items-center relative">
				<a href="/" class="flex items-center justify-center w-10 h-10 hover:bg-white/10 rounded-full transition-all duration-200 active:scale-95 z-10">
					<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
						<path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7"></path>
					</svg>
				</a>
				<h1 id="pageTitle" class="text-lg font-semibold absolute left-1/2 transform -translate-x-1/2">üì¶ –°–∫–ª–∞–¥</h1>
			</div>
		</header>

		<!-- Main Content -->
		<main class="max-w-md mx-auto px-4 py-6">
			<!-- Loading State -->
			<div id="loadingState" class="text-center py-8">
				<div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
				<p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
			</div>

			<!-- Order View -->
			<div id="orderView" class="space-y-4 hidden">
				<!-- Search Field -->
				<div class="sticky top-0 z-10 bg-gray-50 p-4 rounded-lg border-2 border-blue-200 shadow-sm">
					<div class="relative">
						<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
							<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
							</svg>
						</div>
						<input
							type="text"
							id="productSearchInput"
							class="block w-full pl-10 pr-10 py-3 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
							placeholder="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
							autocomplete="off"
						/>
					</div>
				</div>

				<!-- Products List -->
				<div id="productsList">
					<!-- Products will be populated by JavaScript -->
				</div>

				<!-- Floating Action Button -->
				<button
					id="sendWhatsAppBtn"
					class="fixed bottom-6 right-6 bg-gray-400 hover:bg-gray-500 text-white font-medium py-4 px-6 rounded-lg shadow-lg z-50 transition-all duration-200 flex items-center space-x-2 min-w-[180px] justify-center"
					onclick="goToCart()"
				>
					<span class="text-center">–í –∫–æ—Ä–∑–∏–Ω—É</span>
				</button>
			</div>
		</main>
	</div>

	<script is:inline define:vars={{ storageId }}>
		window.storageId = storageId;
		window.userRole = 'storage';
		window.currentDepartment = 'storage';

		// Load products for this storage
		async function loadStorageProducts() {
			const loadingState = document.getElementById('loadingState');
			const orderView = document.getElementById('orderView');
			const pageTitle = document.getElementById('pageTitle');

			try {
				console.log(`üì¶ Loading products for storage ID: ${storageId}...`);

				// Fetch storage info and products
				const response = await fetch(`/api/storage-inventory?storage_id=${storageId}`);
				const result = await response.json();

				if (!result.success) {
					throw new Error(result.error || 'Failed to load products');
				}

				const products = result.data;
				const storageName = result.storage?.name || '–°–∫–ª–∞–¥';

				console.log(`‚úÖ Loaded ${products.length} products`);

				// Update page title
				pageTitle.textContent = `${result.storage?.emoji || 'üì¶'} ${storageName}`;

				// Hide loading and show order view
				loadingState.style.display = 'none';
				orderView.style.display = 'block';
				orderView.classList.remove('hidden');

				// Store products globally
				window.storageProducts = products;

				// Initialize order mode
				if (window.initializeOrderMode) {
					window.initializeOrderMode();
				}

				// Load cart from localStorage
				setTimeout(() => {
					if (window.checklist && window.checklist.loadCartFromLocalStorage) {
						window.checklist.loadCartFromLocalStorage();
					}
				}, 500);

				// Update floating button label
				if (window.updateFloatingButtonLabel) {
					window.updateFloatingButtonLabel();
				}

			} catch (error) {
				console.error('‚ùå Failed to load products:', error);
				loadingState.innerHTML = `
					<div class="text-center py-8">
						<div class="text-red-500 mb-4">‚ùå</div>
						<p class="text-red-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>
						<p class="text-sm text-gray-500">${error.message}</p>
						<button onclick="loadStorageProducts()" class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg">
							–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
						</button>
					</div>
				`;
			}
		}

		function goToCart() {
			window.location.href = '/cart';
		}

		// Load products when page loads
		document.addEventListener('DOMContentLoaded', loadStorageProducts);
	</script>

	<!-- Include checklist script -->
	<script is:inline src="/scripts/checklist.js"></script>
</Layout>
