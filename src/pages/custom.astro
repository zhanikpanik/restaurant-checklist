---
import Layout from '../layouts/Layout.astro';
---

<Layout title="–ì–æ—Ä–Ω–∏—á–Ω–∞—è - –•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã">
	<div class="min-h-screen bg-white">
		<!-- Header with Role Info -->
		<header class="bg-purple-600 text-white px-4 py-6">
			<div class="max-w-md mx-auto">
				<div class="flex items-center justify-between mb-4">
					<div class="flex items-center space-x-2">
						<span class="text-2xl">üßπ</span>
						<h1 class="text-2xl font-bold">–ì–æ—Ä–Ω–∏—á–Ω–∞—è</h1>
					</div>
					<div class="text-right text-sm">
						<div class="font-medium">–•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</div>
						<a href="/" class="text-purple-200 hover:text-white">‚Üê –ù–∞–∑–∞–¥</a>
					</div>
				</div>
			</div>
		</header>

		<!-- Main Content -->
		<main class="max-w-md mx-auto px-4 py-6">
			<!-- Search Field -->
			<div class="sticky top-0 z-10 bg-gray-50 p-4 rounded-lg border-2 border-purple-200 shadow-sm mb-4">
				<div class="relative">
					<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
						<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
						</svg>
					</div>
					<input 
						type="text" 
						id="searchInput"
						class="block w-full pl-10 pr-10 py-3 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-base"
						placeholder="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å–∫–ª–∞–¥–∞..."
						autocomplete="off"
					/>
					<div class="absolute inset-y-0 right-0 pr-3 flex items-center">
						<button 
							id="clearSearchBtn"
							class="h-5 w-5 text-gray-400 hover:text-gray-600 focus:outline-none hidden"
							title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
						>
							<svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
				</div>
			</div>
			
			<!-- Inline Custom Item Form -->
			<div class="mb-4 p-3 bg-purple-50 rounded-lg border border-purple-200">
				<div class="flex items-center space-x-1">
					<input 
						type="text" 
						id="productName" 
						placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
						class="flex-1 px-2 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm min-w-0"
					/>
					<input 
						type="number" 
						id="productQuantity" 
						placeholder="–ö–æ–ª-–≤–æ"
						min="0.1"
						step="0.1"
						inputmode="numeric"
						pattern="[0-9]*"
						class="w-16 px-2 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm"
					/>
					<select 
						id="productUnit" 
						class="w-14 px-1 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm"
					>
						<option value="—à—Ç">—à—Ç</option>
						<option value="–∫–≥">–∫–≥</option>
						<option value="–≥">–≥</option>
						<option value="–ª">–ª</option>
						<option value="–º–ª">–º–ª</option>
						<option value="—É–ø–∞–∫">—É–ø–∞–∫</option>
						<option value="–±—É—Ç—ã–ª–∫–∞">–±—É—Ç—ã–ª–∫–∞</option>
						<option value="–∫–æ—Ä–æ–±–∫–∞">–∫–æ—Ä–æ–±–∫–∞</option>
						<option value="–º–µ—à–æ–∫">–º–µ—à–æ–∫</option>
					</select>
					<button 
						id="addProductBtn"
						class="px-3 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors duration-200 text-sm font-medium flex-shrink-0"
					>
						‚ûï
					</button>
				</div>
			</div>

			<!-- Products List -->
			<div id="productsList" class="space-y-3">
				<!-- Products will be populated by JavaScript -->
			</div>

			<!-- Empty State -->
			<div id="emptyState" class="text-center py-12 text-gray-500">
				<div class="text-4xl mb-4">üì¶</div>
				<p class="text-lg font-medium mb-2">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
				<p class="text-sm">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É –≤—ã—à–µ</p>
			</div>

			<!-- Floating Action Button -->
			<button 
				id="createOrderBtn" 
				class="fixed bottom-6 right-6 bg-gray-400 hover:bg-gray-500 text-white font-medium py-4 px-6 rounded-lg shadow-lg z-50 transition-all duration-200 flex items-center space-x-2 min-w-[180px] justify-center"
			>
				<span class="text-center">–í –∫–æ—Ä–∑–∏–Ω—É</span>
			</button>
		</main>
	</div>


	<script is:inline>
		// Set role and department
		window.userRole = 'custom';
		window.currentDepartment = 'custom';
		
		// Custom products storage
		let customProducts = [];
		let filteredProducts = [];
		let selectedProducts = [];

		// Default products list
		const defaultProducts = [
			{ name: '—à–∞–º–ø—É–Ω—å', unit: '—à—Ç', quantity: 0, minQuantity: 2, isDefault: true },
			{ name: '–ª–æ—Å—å–æ–Ω –¥–ª—è —Ç–µ–ª–∞', unit: '—à—Ç', quantity: 0, minQuantity: 2, isDefault: true },
			{ name: '–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', unit: '—à—Ç', quantity: 0, minQuantity: 2, isDefault: true },
			{ name: '–≥–∏–≥–∏–µ–Ω –Ω–∞–±–æ—Ä', unit: '—à—Ç', quantity: 0, minQuantity: 5, isDefault: true },
			{ name: '–∑—É–±–Ω–∞—è —â–µ—Ç–∫–∞', unit: '—à—Ç', quantity: 0, minQuantity: 10, isDefault: true },
			{ name: '—Ç–∞–ø–æ—á–∫–∏', unit: '—à—Ç', quantity: 0, minQuantity: 10, isDefault: true },
			{ name: '—Å–∞–ª—Ñ–µ—Ç–∫–∏ –Ω–∞ —Å—Ç–æ–ª', unit: '—É–ø–∞–∫', quantity: 0, minQuantity: 5, isDefault: true },
			{ name: '–∑—É–±–æ—á–∏—Å—Ç–∫–∏', unit: '—É–ø–∞–∫', quantity: 0, minQuantity: 3, isDefault: true },
			{ name: '—Å–∞—Ö–∞—Ä —Å—Ç–∏–∫–∏', unit: '—É–ø–∞–∫', quantity: 0, minQuantity: 5, isDefault: true },
			{ name: '–ø–∞–∫–µ—Ç —á–∞–π —á–µ—Ä–Ω—ã–π', unit: '—É–ø–∞–∫', quantity: 0, minQuantity: 3, isDefault: true },
			{ name: '–ø–∞–∫–µ—Ç —á–∞–π –∑–µ–ª–µ–Ω—ã–π', unit: '—É–ø–∞–∫', quantity: 0, minQuantity: 3, isDefault: true },
			{ name: '–¥–∏—Å–ø–µ–Ω—Å–µ—Ä–Ω—ã–µ —Å–∞–ª—Ñ–µ—Ç–∫–∏', unit: '—É–ø–∞–∫', quantity: 0, minQuantity: 5, isDefault: true },
			{ name: '—Ç—É–∞–ª–µ—Ç –±—É–º–∞–≥–∞', unit: '—É–ø–∞–∫', quantity: 0, minQuantity: 10, isDefault: true },
			{ name: '–æ—Å–≤–µ–∂–∏—Ç–µ–ª—å –≤–æ–∑–¥—É—Ö–∞', unit: '—à—Ç', quantity: 0, minQuantity: 3, isDefault: true },
			{ name: '–≤–æ–Ω—é—á–∫–∏', unit: '—à—Ç', quantity: 0, minQuantity: 5, isDefault: true },
			{ name: '–∫—Ä–µ–º –º—ã–ª–æ', unit: '—à—Ç', quantity: 0, minQuantity: 5, isDefault: true },
			{ name: '—Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ—Å—É–¥—ã', unit: '—à—Ç', quantity: 0, minQuantity: 3, isDefault: true },
			{ name: '–∫–æ–º–µ—Ç', unit: '—à—Ç', quantity: 0, minQuantity: 2, isDefault: true },
			{ name: '—Å–∏—Ñ', unit: '—à—Ç', quantity: 0, minQuantity: 2, isDefault: true },
			{ name: '–∫—Ä–æ—Ç', unit: '—à—Ç', quantity: 0, minQuantity: 1, isDefault: true },
			{ name: '–∞–∑–µ–ª–∏—Ç', unit: '—à—Ç', quantity: 0, minQuantity: 2, isDefault: true },
			{ name: '–º–∏—Å—Ç–µ—Ä –ø—Ä–æ–ø–µ—Ä', unit: '—à—Ç', quantity: 0, minQuantity: 2, isDefault: true },
			{ name: '–∂–µ–ª–µ–∑–Ω–∞—è –≥—É–±–∫–∞', unit: '—É–ø–∞–∫', quantity: 0, minQuantity: 3, isDefault: true },
			{ name: '–º—É—Å–æ—Ä –ø–∞–∫–µ—Ç –±–æ–ª—å—à–æ–π', unit: '—É–ø–∞–∫', quantity: 0, minQuantity: 5, isDefault: true },
			{ name: '–¥–æ–º–µ—Å—Ç–æ—Å', unit: '—à—Ç', quantity: 0, minQuantity: 2, isDefault: true },
			{ name: '—Å—Ç–µ–∫–ª–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª—å', unit: '—à—Ç', quantity: 0, minQuantity: 2, isDefault: true },
			{ name: '–±–µ–ª–∏–∑–Ω–∞', unit: '—à—Ç', quantity: 0, minQuantity: 2, isDefault: true },
			{ name: '–≤–∞–Ω–∏—à', unit: '—à—Ç', quantity: 0, minQuantity: 1, isDefault: true },
			{ name: '–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –¥–ª—è –±–µ–ª—å—è', unit: '—à—Ç', quantity: 0, minQuantity: 2, isDefault: true },
			{ name: '–ø–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å–µ', unit: '–∫–æ–º–ø–ª–µ–∫—Ç', quantity: 0, minQuantity: 5, isDefault: true },
			{ name: '–º—É—Å–æ—Ä –ø–∞–∫–µ—Ç –±–æ–ª—å—à–∏–µ', unit: '—É–ø–∞–∫', quantity: 0, minQuantity: 3, isDefault: true },
			{ name: '–º—É—Å–æ—Ä –ø–∞–∫–µ—Ç –º–∞–ª–µ–Ω—å–∫–∏–µ', unit: '—É–ø–∞–∫', quantity: 0, minQuantity: 3, isDefault: true },
			{ name: '–ø–ª–µ–¥—ã', unit: '—à—Ç', quantity: 0, minQuantity: 10, isDefault: true },
			{ name: '—Å—É—à–∏–ª–∫–∏', unit: '—à—Ç', quantity: 0, minQuantity: 3, isDefault: true },
			{ name: '–¥–æ–ø –¥–≤—É—Å–ø–∞–ª–∫–∏', unit: '—à—Ç', quantity: 0, minQuantity: 2, isDefault: true },
			{ name: '–¥–æ–ø –æ–¥–Ω–æ—Å–ø–∞–ª–∫–∏', unit: '—à—Ç', quantity: 0, minQuantity: 3, isDefault: true }
		];

		// Load custom products from database
		async function loadCustomProducts() {
			try {
				console.log('üîÑ Loading custom products from database...');
				
				// Get department from URL parameter or default to –ì–æ—Ä–Ω–∏—á–Ω–∞—è
				const urlParams = new URLSearchParams(window.location.search);
				const deptName = urlParams.get('dept') || '–ì–æ—Ä–Ω–∏—á–Ω–∞—è';
				
				// Update page title and header if it's a custom department
				if (deptName !== '–ì–æ—Ä–Ω–∏—á–Ω–∞—è') {
					document.title = `${deptName} - –¢–æ–≤–∞—Ä—ã`;
					const headerTitle = document.querySelector('h1');
					if (headerTitle) headerTitle.textContent = deptName;
					const headerDesc = document.querySelector('.text-right .font-medium');
					if (headerDesc) headerDesc.textContent = '–¢–æ–≤–∞—Ä—ã –æ—Ç–¥–µ–ª–∞';
				}
				
				// First check if we need to migrate from localStorage (only for –ì–æ—Ä–Ω–∏—á–Ω–∞—è)
				if (deptName === '–ì–æ—Ä–Ω–∏—á–Ω–∞—è') {
					const localProducts = localStorage.getItem('customProducts');
					if (localProducts && !localStorage.getItem('customProductsMigrated')) {
						await migrateFromLocalStorage();
					}
				}
				
				// Load from database via combined inventory API
				const response = await fetch(`/api/combined-inventory?department=${encodeURIComponent(deptName)}`);
				const result = await response.json();
				
				if (result.success && result.data) {
					customProducts = result.data.map(product => ({
						id: product.id,
						name: product.name,
						quantity: product.quantity,
						unit: product.unit,
						minQuantity: product.minQuantity || 1,
						checked: false,
						shoppingQuantity: 0,
						isDefault: false,
						isCustom: true,
						source: product.source,
						category_name: product.category_name,
						createdAt: new Date().toISOString()
					}));
					
					console.log(`‚úÖ Loaded ${customProducts.length} custom products from database`);
				} else {
					throw new Error(result.error || 'Failed to load products');
				}
				
				filteredProducts = [...customProducts];
				renderProducts();
				updateCreateOrderButton();
			} catch (error) {
				console.error('‚ùå Error loading custom products:', error);
				
				// Fallback to default products if database fails
				customProducts = defaultProducts.map((product, index) => ({
					id: Date.now() + index,
					name: product.name,
					quantity: product.quantity,
					unit: product.unit,
					minQuantity: product.minQuantity,
					checked: false,
					shoppingQuantity: 0,
					isDefault: product.isDefault,
					isCustom: !product.isDefault,
					createdAt: new Date().toISOString()
				}));
				
				filteredProducts = [...customProducts];
				renderProducts();
				updateCreateOrderButton();
			}
		}
		
		// Migrate existing localStorage products to database
		async function migrateFromLocalStorage() {
			try {
				const localProducts = localStorage.getItem('customProducts');
				if (!localProducts) return;
				
				const products = JSON.parse(localProducts);
				console.log('üîÑ Migrating', products.length, 'products from localStorage to database...');
				
				const response = await fetch('/api/migrate-custom-products', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ customProducts: products })
				});
				
				const result = await response.json();
				if (result.success) {
					console.log('‚úÖ Migration completed:', result.results);
					localStorage.setItem('customProductsMigrated', 'true');
				} else {
					console.error('‚ùå Migration failed:', result.error);
				}
			} catch (error) {
				console.error('‚ùå Migration error:', error);
			}
		}

		// Save custom products to localStorage
		function saveCustomProducts() {
			try {
				localStorage.setItem('customProducts', JSON.stringify(customProducts));
				
				// Also save selected products for cart compatibility
				const itemsForCart = selectedProducts.filter(item => item.shoppingQuantity > 0);
				localStorage.setItem('customShoppingList', JSON.stringify(itemsForCart));
			} catch (error) {
				console.error('Failed to save custom products:', error);
			}
		}

		// Add new product
		function addProduct() {
			const name = document.getElementById('productName').value.trim();
			const quantity = parseFloat(document.getElementById('productQuantity').value) || 0;
			const unit = document.getElementById('productUnit').value;

			if (!name || !quantity) {
				alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!');
				return;
			}

			// Check if product already exists
			const existingProduct = customProducts.find(p => p.name.toLowerCase() === name.toLowerCase());
			if (existingProduct) {
				alert('–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
				return;
			}

			// Create new product
			const newProduct = {
				id: Date.now(),
				name: name,
				quantity: 0,
				unit: unit,
				minQuantity: 0,
				checked: true,
				shoppingQuantity: quantity,
				isDefault: false,
				isCustom: true,
				createdAt: new Date().toISOString()
			};

			customProducts.push(newProduct);
			selectedProducts.push(newProduct);
			saveCustomProducts();
			
			// Clear form
			document.getElementById('productName').value = '';
			document.getElementById('productQuantity').value = '';
			document.getElementById('productUnit').value = '—à—Ç';

			// Refresh display
			applySearch();
			updateCreateOrderButton();
			
			alert(`–¢–æ–≤–∞—Ä "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!`);
		}

		// Delete product
		function deleteProduct(productId) {
			const product = customProducts.find(p => p.id === productId);
			if (product && product.isDefault) {
				alert('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!');
				return;
			}
			
			if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
				customProducts = customProducts.filter(p => p.id !== productId);
				selectedProducts = selectedProducts.filter(p => p.id !== productId);
				saveCustomProducts();
				applySearch();
				updateCreateOrderButton();
			}
		}

		// Toggle product selection for order
		function toggleProduct(productId) {
			const product = customProducts.find(p => p.id === productId);
			if (!product) return;

			const existingIndex = selectedProducts.findIndex(p => p.id === productId);
			
			if (existingIndex >= 0) {
				// Remove from selection
				selectedProducts.splice(existingIndex, 1);
				product.checked = false;
				product.shoppingQuantity = 0;
			} else {
				// Add to selection
				const selectedProduct = { ...product };
				selectedProduct.checked = true;
				selectedProduct.shoppingQuantity = 1;
				selectedProducts.push(selectedProduct);
				product.checked = true;
				product.shoppingQuantity = 1;
			}

			renderProducts();
			updateCreateOrderButton();
		}

		// Update shopping quantity with +/- buttons
		function updateShoppingQuantity(productId, change) {
			const originalProduct = customProducts.find(p => p.id === productId);
			if (!originalProduct) return;
			
			const currentQuantity = originalProduct.shoppingQuantity || 0;
			const newQuantity = Math.max(0, currentQuantity + change);
			
			originalProduct.shoppingQuantity = newQuantity;
			
			// Update selected products array
			const existingIndex = selectedProducts.findIndex(p => p.id === productId);
			
			if (newQuantity > 0) {
				if (existingIndex >= 0) {
					selectedProducts[existingIndex].shoppingQuantity = newQuantity;
				} else {
					const selectedProduct = { ...originalProduct };
					selectedProduct.checked = true;
					selectedProduct.shoppingQuantity = newQuantity;
					selectedProducts.push(selectedProduct);
					originalProduct.checked = true;
				}
			} else {
				if (existingIndex >= 0) {
					selectedProducts.splice(existingIndex, 1);
				}
				originalProduct.checked = false;
			}
			
			renderProducts();
			updateCreateOrderButton();
			saveCustomProducts();
		}

		// Update shopping quantity from input field
		function updateShoppingQuantityFromInput(productId, inputValue) {
			const numericValue = parseFloat(inputValue.replace(/[^\d.]/g, '')) || 0;
			const originalProduct = customProducts.find(p => p.id === productId);
			if (!originalProduct) return;
			
			originalProduct.shoppingQuantity = numericValue;
			
			// Update selected products array
			const existingIndex = selectedProducts.findIndex(p => p.id === productId);
			
			if (numericValue > 0) {
				if (existingIndex >= 0) {
					selectedProducts[existingIndex].shoppingQuantity = numericValue;
				} else {
					const selectedProduct = { ...originalProduct };
					selectedProduct.checked = true;
					selectedProduct.shoppingQuantity = numericValue;
					selectedProducts.push(selectedProduct);
					originalProduct.checked = true;
				}
			} else {
				if (existingIndex >= 0) {
					selectedProducts.splice(existingIndex, 1);
				}
				originalProduct.checked = false;
			}
			
			renderProducts();
			updateCreateOrderButton();
			saveCustomProducts();
		}

		// Apply search filter
		function applySearch() {
			const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
			
			if (searchTerm === '') {
				filteredProducts = [...customProducts];
			} else {
				filteredProducts = customProducts.filter(product => 
					product.name.toLowerCase().includes(searchTerm)
				);
			}
			
			renderProducts();
		}

		// Render products list
		function renderProducts() {
			const productsList = document.getElementById('productsList');
			const emptyState = document.getElementById('emptyState');
			
			if (filteredProducts.length === 0) {
				productsList.innerHTML = '';
				emptyState.style.display = 'block';
				return;
			}
			
			emptyState.style.display = 'none';
			
			productsList.innerHTML = filteredProducts.map(product => {
				const shoppingQuantity = product.shoppingQuantity || 0;
				const isCustom = !product.isDefault;
				const borderColor = isCustom ? "border-l-4 border-l-blue-500" : "";
				const stockInfo = isCustom
					? '<div class="text-sm text-blue-600 mt-1 font-medium">üìù –î–æ–±–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é</div>'
					: '';
				
				return `
					<div class="product-item bg-white py-4 ${borderColor}" data-product-id="${product.id}">
						<div class="flex items-center justify-between w-full">
							<div class="flex-1">
								<h3 class="text-base font-medium text-gray-900">${product.name}</h3>
								${stockInfo}
							</div>
							<div class="flex items-center justify-end">
								<!-- Inline quantity controls: - [input with unit] + -->
								<div class="flex items-center bg-gray-100 rounded-lg border border-gray-300">
									<button
										class="px-2 h-10 bg-gray-100 hover:bg-gray-200 text-gray-700 flex items-center justify-center text-2xl font-normal transition-colors duration-200 rounded-l-lg"
										onclick="updateShoppingQuantity(${product.id}, -0.5)"
										title="–£–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 0.5 ${product.unit}"
										type="button"
									>
										‚àí
									</button>
									<div class="relative">
										<input
											type="text"
											inputmode="numeric"
											pattern="[0-9]*"
											class="quantity-input w-16 px-3 py-2 border-0 focus:outline-none focus:ring-0 text-center bg-gray-100 text-sm font-medium"
											placeholder="0 ${product.unit}"
											value="${shoppingQuantity > 0 ? shoppingQuantity + ' ' + product.unit : ''}"
											data-product-id="${product.id}"
											data-unit="${product.unit}"
											onchange="updateShoppingQuantityFromInput(${product.id}, this.value)"
										/>
									</div>
									<button
										class="px-2 h-10 bg-gray-100 hover:bg-gray-200 text-gray-700 flex items-center justify-center text-2xl font-normal transition-colors duration-200 rounded-r-lg"
										onclick="updateShoppingQuantity(${product.id}, 0.5)"
										title="–î–æ–±–∞–≤–∏—Ç—å 0.5 ${product.unit}"
										type="button"
									>
										+
									</button>
								</div>

								${isCustom ? `
									<!-- Delete Custom Item Button -->
									<button
										class="delete-btn w-9 h-10.5 bg-red-500 hover:bg-red-600 text-white ml-2 flex items-center justify-center text-lg font-normal transition-colors duration-200 rounded-lg"
										data-product-id="${product.id}"
										onclick="deleteProduct(${product.id})"
										title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
									>
										üóë
									</button>
								` : ''}
							</div>
						</div>
					</div>
				`;
			}).join('');
		}

		// Update create order button
		function updateCreateOrderButton() {
			const createOrderBtn = document.getElementById('createOrderBtn');
			const selectedCount = selectedProducts.length;
			
			if (selectedCount > 0) {
				createOrderBtn.textContent = `–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ (${selectedCount})`;
				createOrderBtn.classList.remove('bg-gray-400', 'hover:bg-gray-500');
				createOrderBtn.classList.add('bg-purple-600', 'hover:bg-purple-700');
			} else {
				createOrderBtn.textContent = '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑';
				createOrderBtn.classList.remove('bg-purple-600', 'hover:bg-purple-700');
				createOrderBtn.classList.add('bg-gray-400', 'hover:bg-gray-500');
			}
		}

		// Create order - navigate to cart
		function createOrder() {
			// Navigate to cart page for review
			window.location.href = "/cart";
		}

		// Initialize page
		document.addEventListener('DOMContentLoaded', async function() {
			// Load products
			await loadCustomProducts();
			
			// Load saved quantities from localStorage after products are loaded
			setTimeout(() => {
				if (window.checklist && window.checklist.loadCartFromLocalStorage) {
					window.checklist.loadCartFromLocalStorage();
					console.log('üì• Restored cart quantities from localStorage');
				}
			}, 100);
			
			// Initialize order mode for custom items
			if (window.initializeOrderMode) {
				window.initializeOrderMode();
			}
			
			// Wait a bit for shopping list data to be initialized, then load cart from localStorage
			setTimeout(() => {
				if (window.checklist && window.checklist.loadCartFromLocalStorage) {
					window.checklist.loadCartFromLocalStorage();
				}
			}, 500);
			
			// Update floating button label
			if (window.updateFloatingButtonLabel) {
				window.updateFloatingButtonLabel();
			}

			// Setup event listeners
			document.getElementById('addProductBtn').addEventListener('click', addProduct);
			document.getElementById('createOrderBtn').addEventListener('click', createOrder);
			
			// Search functionality
			const searchInput = document.getElementById('searchInput');
			const clearSearchBtn = document.getElementById('clearSearchBtn');
			
			searchInput.addEventListener('input', function() {
				applySearch();
				clearSearchBtn.style.display = this.value ? 'block' : 'none';
			});
			
			clearSearchBtn.addEventListener('click', function() {
				searchInput.value = '';
				this.style.display = 'none';
				applySearch();
			});

			// Enter key support for product name
			document.getElementById('productName').addEventListener('keydown', function(e) {
				if (e.key === 'Enter') {
					e.preventDefault();
					addProduct();
				}
			});

			// Enter key support for quantity
			document.getElementById('productQuantity').addEventListener('keydown', function(e) {
				if (e.key === 'Enter') {
					e.preventDefault();
					addProduct();
				}
			});
		});

	</script>
</Layout>
