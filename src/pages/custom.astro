---
import Layout from "../layouts/Layout.astro";
---

<Layout title="–ì–æ—Ä–Ω–∏—á–Ω–∞—è - –•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã">
    <div class="min-h-screen bg-white">
        <!-- Header with Role Info -->
        <header class="bg-purple-600 text-white px-4 py-4">
            <div class="max-w-md mx-auto flex items-center relative">
                <a
                    href="/"
                    class="flex items-center justify-center w-10 h-10 hover:bg-white/10 rounded-full transition-all duration-200 active:scale-95 z-10"
                >
                    <svg
                        class="w-6 h-6 text-white"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        stroke-width="2.5"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            d="M15 19l-7-7 7-7"></path>
                    </svg>
                </a>
                <h1
                    class="text-lg font-semibold absolute left-1/2 transform -translate-x-1/2"
                >
                    üßπ –ì–æ—Ä–Ω–∏—á–Ω–∞—è
                </h1>
            </div>
        </header>

        <!-- Main Content -->
        <main class="max-w-md mx-auto px-4 py-6">
            <!-- My Recent Orders Section -->
            <div id="myRecentOrders" class="mb-6 hidden">
                <h2
                    class="text-lg font-semibold text-gray-900 mb-3 flex items-center"
                >
                    <span class="text-xl mr-2">üìã</span>
                    –ú–æ–∏ –∑–∞–∫–∞–∑—ã
                </h2>
                <div id="recentOrdersList" class="space-y-3">
                    <!-- Orders will be loaded here -->
                </div>
            </div>

            <!-- Search Field -->
            <div
                class="sticky top-0 z-10 bg-gray-50 p-4 rounded-lg border-2 border-purple-200 shadow-sm mb-4"
            >
                <div class="relative">
                    <div
                        class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
                    >
                        <svg
                            class="h-5 w-5 text-gray-400"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                            ></path>
                        </svg>
                    </div>
                    <input
                        type="text"
                        id="searchInput"
                        class="block w-full pl-10 pr-10 py-3 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-base"
                        placeholder="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å–∫–ª–∞–¥–∞..."
                        autocomplete="off"
                    />
                    <div
                        class="absolute inset-y-0 right-0 pr-3 flex items-center"
                    >
                        <button
                            id="clearSearchBtn"
                            class="h-5 w-5 text-gray-400 hover:text-gray-600 focus:outline-none hidden"
                            title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
                        >
                            <svg
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Inline Custom Item Form -->
            <div
                class="mb-4 p-3 bg-purple-50 rounded-lg border border-purple-200"
            >
                <div class="flex items-center space-x-1">
                    <input
                        type="text"
                        id="productName"
                        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
                        class="flex-1 px-2 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm min-w-0"
                    />
                    <input
                        type="number"
                        id="productQuantity"
                        placeholder="–ö–æ–ª-–≤–æ"
                        min="0.1"
                        step="0.1"
                        inputmode="numeric"
                        pattern="[0-9]*"
                        class="w-16 px-2 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm"
                    />
                    <select
                        id="productUnit"
                        class="w-14 px-1 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm"
                    >
                        <option value="—à—Ç">—à—Ç</option>
                        <option value="–∫–≥">–∫–≥</option>
                        <option value="–≥">–≥</option>
                        <option value="–ª">–ª</option>
                        <option value="–º–ª">–º–ª</option>
                        <option value="—É–ø–∞–∫">—É–ø–∞–∫</option>
                        <option value="–±—É—Ç—ã–ª–∫–∞">–±—É—Ç—ã–ª–∫–∞</option>
                        <option value="–∫–æ—Ä–æ–±–∫–∞">–∫–æ—Ä–æ–±–∫–∞</option>
                        <option value="–º–µ—à–æ–∫">–º–µ—à–æ–∫</option>
                    </select>
                    <button
                        id="addProductBtn"
                        class="px-3 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors duration-200 text-sm font-medium flex-shrink-0"
                    >
                        ‚ûï
                    </button>
                </div>
            </div>

            <!-- Products List -->
            <div id="productsList" class="space-y-3">
                <!-- Products will be populated by JavaScript -->
            </div>

            <!-- Empty State -->
            <div id="emptyState" class="text-center py-12 text-gray-500">
                <div class="text-4xl mb-4">üì¶</div>
                <p class="text-lg font-medium mb-2">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                <p class="text-sm">
                    –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É –≤—ã—à–µ
                </p>
            </div>

            <!-- Floating Action Button -->
            <button
                id="createOrderBtn"
                onclick="createOrder()"
                class="fixed bottom-6 right-6 bg-gray-400 hover:bg-gray-500 text-white font-medium py-4 px-6 rounded-lg shadow-lg z-50 transition-all duration-200 flex items-center space-x-2 min-w-[180px] justify-center"
            >
                <span class="text-center">–í –∫–æ—Ä–∑–∏–Ω—É</span>
            </button>
        </main>
    </div>

    <script is:inline>
        // Set role and department - will be updated based on URL parameter
        window.userRole = "custom";
        window.currentDepartment = "custom";

        // Custom products storage
        // Products loaded from database
        let customProducts = [];
        let filteredProducts = [];
        let selectedProducts = [];

        // Load custom products from database
        async function loadCustomProducts() {
            try {
                console.log("üîÑ Loading custom products from database...");

                // Get department from URL parameter or default to –ì–æ—Ä–Ω–∏—á–Ω–∞—è
                const urlParams = new URLSearchParams(window.location.search);
                const sectionId = urlParams.get("section_id");
                const deptName = urlParams.get("dept") || "–ì–æ—Ä–Ω–∏—á–Ω–∞—è";

                // Generate department key from name if not provided
                let deptKey = urlParams.get("key");
                if (!deptKey) {
                    // Convert department name to safe key (e.g., "–°–∫–ª–∞–¥ 1" -> "skl–∞d1", "New Section" -> "newsection")
                    // Remove spaces and special characters for a clean localStorage key
                    deptKey = deptName
                        .toLowerCase()
                        .trim()
                        .replace(/[^a-z–∞-—è0-9]/g, "");
                }

                // Update global department variables for cart compatibility
                window.currentDepartment = deptKey;
                window.currentDepartmentName = deptName;
                window.currentSectionId = sectionId; // Store section ID for later use

                // Update page title and header based on department
                document.title = `${deptName} - –¢–æ–≤–∞—Ä—ã`;

                // Fetch department info to get emoji
                try {
                    const deptResponse = await fetch("/api/departments");
                    const deptData = await deptResponse.json();
                    if (deptData.success) {
                        const department = deptData.data.find(
                            (d) => d.name === deptName,
                        );
                        if (department) {
                            const headerTitle = document.querySelector("h1");
                            if (headerTitle) {
                                headerTitle.textContent = `${department.emoji || "üì¶"} ${deptName}`;
                            }
                        }
                    }
                } catch (e) {
                    console.warn("Could not fetch department emoji:", e);
                    const headerTitle = document.querySelector("h1");
                    if (headerTitle) headerTitle.textContent = `üì¶ ${deptName}`;
                }

                // First check if we need to migrate from localStorage (only for –ì–æ—Ä–Ω–∏—á–Ω–∞—è)
                if (deptName === "–ì–æ—Ä–Ω–∏—á–Ω–∞—è") {
                    const localProducts =
                        localStorage.getItem("customProducts");
                    if (
                        localProducts &&
                        !localStorage.getItem("customProductsMigrated")
                    ) {
                        await migrateFromLocalStorage();
                    }
                }

                // Load from database via combined inventory API
                // Prefer section_id if available, otherwise use department name
                let apiUrl = `/api/combined-inventory?`;
                if (sectionId) {
                    apiUrl += `section_id=${sectionId}`;
                } else {
                    apiUrl += `department=${encodeURIComponent(deptName)}`;
                }

                const response = await fetch(apiUrl);
                const result = await response.json();

                if (result.success && result.data) {
                    customProducts = result.data.map((product) => ({
                        id: product.id,
                        name: product.name,
                        quantity: product.quantity,
                        unit: product.unit,
                        minQuantity: product.minQuantity || 1,
                        checked: false,
                        shoppingQuantity: 0,
                        isDefault: false,
                        isCustom: true,
                        source: product.source,
                        category_name: product.category_name,
                        poster_ingredient_id: product.poster_ingredient_id, // Include for Poster supply creation
                        createdAt: new Date().toISOString(),
                    }));

                    console.log(
                        `‚úÖ Loaded ${customProducts.length} custom products from database`,
                    );
                } else {
                    throw new Error(result.error || "Failed to load products");
                }

                filteredProducts = [...customProducts];
                renderProducts();
                updateCreateOrderButton();
            } catch (error) {
                console.error("‚ùå Error loading custom products:", error);

                // Fallback to default products if database fails
                customProducts = defaultProducts.map((product, index) => ({
                    id: Date.now() + index,
                    name: product.name,
                    quantity: product.quantity,
                    unit: product.unit,
                    minQuantity: product.minQuantity,
                    checked: false,
                    shoppingQuantity: 0,
                    isDefault: product.isDefault,
                    isCustom: !product.isDefault,
                    createdAt: new Date().toISOString(),
                }));

                filteredProducts = [...customProducts];
                renderProducts();
                updateCreateOrderButton();
            }
        }

        // Migrate existing localStorage products to database
        async function migrateFromLocalStorage() {
            try {
                const localProducts = localStorage.getItem("customProducts");
                if (!localProducts) return;

                const products = JSON.parse(localProducts);
                console.log(
                    "üîÑ Migrating",
                    products.length,
                    "products from localStorage to database...",
                );

                const response = await fetch("/api/migrate-custom-products", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ customProducts: products }),
                });

                const result = await response.json();
                if (result.success) {
                    console.log("‚úÖ Migration completed:", result.results);
                    localStorage.setItem("customProductsMigrated", "true");
                } else {
                    console.error("‚ùå Migration failed:", result.error);
                }
            } catch (error) {
                console.error("‚ùå Migration error:", error);
            }
        }

        // Save custom products to localStorage
        function saveCustomProducts() {
            try {
                localStorage.setItem(
                    "customProducts",
                    JSON.stringify(customProducts),
                );

                // Also save selected products for cart compatibility
                const itemsForCart = selectedProducts
                    .filter((item) => item.shoppingQuantity > 0)
                    .map((item) => ({
                        ...item,
                        departmentName:
                            window.currentDepartmentName || "–ì–æ—Ä–Ω–∏—á–Ω–∞—è",
                    }));

                // Use department-specific key for cart
                const deptKey = window.currentDepartment || "custom";
                const storageKey = `${deptKey}ShoppingList`;

                console.log(
                    `üíæ Saving ${itemsForCart.length} items to cart with key: "${storageKey}"`,
                );
                console.log(
                    `   Department: "${window.currentDepartmentName}", Key: "${deptKey}"`,
                );

                localStorage.setItem(storageKey, JSON.stringify(itemsForCart));
            } catch (error) {
                console.error("Failed to save custom products:", error);
            }
        }

        // Add new product
        async function addProduct() {
            const name = document.getElementById("productName").value.trim();
            const quantity =
                parseFloat(document.getElementById("productQuantity").value) ||
                0;
            const unit = document.getElementById("productUnit").value;

            if (!name || !quantity) {
                alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!");
                return;
            }

            // Check if product already exists
            const existingProduct = customProducts.find(
                (p) => p.name.toLowerCase() === name.toLowerCase(),
            );
            if (existingProduct) {
                alert("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
                return;
            }

            try {
                // Get current section from URL or global variable
                const urlParams = new URLSearchParams(window.location.search);
                const sectionId =
                    urlParams.get("section_id") || window.currentSectionId;
                const deptName = urlParams.get("dept") || "–ì–æ—Ä–Ω–∏—á–Ω–∞—è";

                // Get section ID - prefer from URL, otherwise look up by name
                let finalSectionId = sectionId;
                if (!finalSectionId) {
                    finalSectionId = await getDepartmentId(deptName);
                }

                // Save product to database
                const response = await fetch("/api/custom-products", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        name: name,
                        unit: unit,
                        section_id: finalSectionId,
                        minQuantity: 1,
                        currentQuantity: 0,
                    }),
                });

                const result = await response.json();
                if (!result.success) {
                    throw new Error(result.error || "Failed to save product");
                }

                // Create new product for local display
                const newProduct = {
                    id: result.data.id,
                    name: name,
                    quantity: 0,
                    unit: unit,
                    minQuantity: 1,
                    checked: true,
                    shoppingQuantity: quantity,
                    isDefault: false,
                    isCustom: true,
                    source: "custom",
                    createdAt: new Date().toISOString(),
                };

                customProducts.push(newProduct);
                selectedProducts.push(newProduct);

                // Clear form
                document.getElementById("productName").value = "";
                document.getElementById("productQuantity").value = "";
                document.getElementById("productUnit").value = "—à—Ç";

                // Refresh display
                applySearch();
                updateCreateOrderButton();

                alert(
                    `–¢–æ–≤–∞—Ä "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!`,
                );
            } catch (error) {
                console.error("Error adding product:", error);
                alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${error.message}`);
            }
        }

        // Get or create section ID
        async function getDepartmentId(deptName) {
            try {
                // First try to get existing section
                const getResponse = await fetch("/api/sections");
                const getResult = await getResponse.json();

                if (getResult.success) {
                    const existingSection = getResult.data.find(
                        (d) => d.name === deptName,
                    );
                    if (existingSection) {
                        return existingSection.id;
                    }
                }

                // If section doesn't exist, create it
                const createResponse = await fetch("/api/sections", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        name: deptName,
                        emoji: getEmojiForDepartment(deptName),
                    }),
                });

                const createResult = await createResponse.json();
                if (createResult.success) {
                    return createResult.data.id;
                } else {
                    throw new Error("Failed to create section");
                }
            } catch (error) {
                console.error("Error getting/creating section:", error);
                throw error;
            }
        }

        // Get appropriate emoji for department
        function getEmojiForDepartment(deptName) {
            const name = deptName.toLowerCase();
            if (name.includes("–æ—Ñ–∏—Å")) return "üè¢";
            if (name.includes("–≥–æ—Ä–Ω–∏—á–Ω–∞—è")) return "üßπ";
            if (name.includes("—Å–∫–ª–∞–¥")) return "üì¶";
            if (name.includes("—Ä–µ—Å–µ–ø—à–Ω")) return "üè®";
            return "üìã"; // Default
        }

        // Delete product
        function deleteProduct(productId) {
            // Convert to string for comparison since IDs might be strings or numbers
            const productIdStr = String(productId);
            const product = customProducts.find(
                (p) => String(p.id) === productIdStr,
            );
            if (product && product.isDefault) {
                alert("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!");
                return;
            }

            if (confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?")) {
                customProducts = customProducts.filter(
                    (p) => String(p.id) !== productIdStr,
                );
                selectedProducts = selectedProducts.filter(
                    (p) => String(p.id) !== productIdStr,
                );
                saveCustomProducts();
                applySearch();
                updateCreateOrderButton();
            }
        }

        // Toggle product selection for order
        function toggleProduct(productId) {
            const product = customProducts.find((p) => p.id === productId);
            if (!product) return;

            const existingIndex = selectedProducts.findIndex(
                (p) => p.id === productId,
            );

            if (existingIndex >= 0) {
                // Remove from selection
                selectedProducts.splice(existingIndex, 1);
                product.checked = false;
                product.shoppingQuantity = 0;
            } else {
                // Add to selection
                const selectedProduct = { ...product };
                selectedProduct.checked = true;
                selectedProduct.shoppingQuantity = 1;
                selectedProducts.push(selectedProduct);
                product.checked = true;
                product.shoppingQuantity = 1;
            }

            renderProducts();
            updateCreateOrderButton();
        }

        // Update shopping quantity with +/- buttons
        function updateShoppingQuantity(productId, change) {
            // Convert to string for comparison since IDs might be strings or numbers
            const productIdStr = String(productId);
            const originalProduct = customProducts.find(
                (p) => String(p.id) === productIdStr,
            );
            if (!originalProduct) return;

            const currentQuantity = originalProduct.shoppingQuantity || 0;
            const newQuantity = Math.max(0, currentQuantity + change);

            originalProduct.shoppingQuantity = newQuantity;

            // Update selected products array
            const existingIndex = selectedProducts.findIndex(
                (p) => String(p.id) === productIdStr,
            );

            if (newQuantity > 0) {
                if (existingIndex >= 0) {
                    selectedProducts[existingIndex].shoppingQuantity =
                        newQuantity;
                } else {
                    const selectedProduct = { ...originalProduct };
                    selectedProduct.checked = true;
                    selectedProduct.shoppingQuantity = newQuantity;
                    selectedProducts.push(selectedProduct);
                    originalProduct.checked = true;
                }
            } else {
                if (existingIndex >= 0) {
                    selectedProducts.splice(existingIndex, 1);
                }
                originalProduct.checked = false;
            }

            renderProducts();
            updateCreateOrderButton();
            saveCustomProducts();
        }

        // Update shopping quantity from input field
        function updateShoppingQuantityFromInput(productId, inputValue) {
            const numericValue =
                parseFloat(inputValue.replace(/[^\d.]/g, "")) || 0;
            // Convert to string for comparison since IDs might be strings or numbers
            const productIdStr = String(productId);
            const originalProduct = customProducts.find(
                (p) => String(p.id) === productIdStr,
            );
            if (!originalProduct) return;

            originalProduct.shoppingQuantity = numericValue;

            // Update selected products array
            const existingIndex = selectedProducts.findIndex(
                (p) => String(p.id) === productIdStr,
            );

            if (numericValue > 0) {
                if (existingIndex >= 0) {
                    selectedProducts[existingIndex].shoppingQuantity =
                        numericValue;
                } else {
                    const selectedProduct = { ...originalProduct };
                    selectedProduct.checked = true;
                    selectedProduct.shoppingQuantity = numericValue;
                    selectedProducts.push(selectedProduct);
                    originalProduct.checked = true;
                }
            } else {
                if (existingIndex >= 0) {
                    selectedProducts.splice(existingIndex, 1);
                }
                originalProduct.checked = false;
            }

            renderProducts();
            updateCreateOrderButton();
            saveCustomProducts();
        }

        // Apply search filter
        function applySearch() {
            const searchTerm = document
                .getElementById("searchInput")
                .value.toLowerCase()
                .trim();

            if (searchTerm === "") {
                filteredProducts = [...customProducts];
            } else {
                filteredProducts = customProducts.filter((product) =>
                    product.name.toLowerCase().includes(searchTerm),
                );
            }

            renderProducts();
        }

        // Render products list
        function renderProducts() {
            const productsList = document.getElementById("productsList");
            const emptyState = document.getElementById("emptyState");

            if (filteredProducts.length === 0) {
                productsList.innerHTML = "";
                emptyState.style.display = "block";
                return;
            }

            emptyState.style.display = "none";

            productsList.innerHTML = filteredProducts
                .map((product) => {
                    const shoppingQuantity = product.shoppingQuantity || 0;
                    const isCustom = !product.isDefault;
                    const stockInfo = "";

                    return `
					<div class="product-item bg-white py-4" data-product-id="${product.id}">
						<div class="flex items-center justify-between w-full">
							<div class="flex-1">
								<h3 class="text-base font-medium text-gray-900">${product.name}</h3>
								${stockInfo}
							</div>
							<div class="flex items-center justify-end">
								<!-- Inline quantity controls: - [input with unit] + -->
								<div class="flex items-center bg-gray-100 rounded-lg border border-gray-300">
									<button
										class="px-2 h-10 bg-gray-100 hover:bg-gray-200 text-gray-700 flex items-center justify-center text-2xl font-normal transition-colors duration-200 rounded-l-lg"
										onclick="updateShoppingQuantity('${product.id}', -0.5)"
										title="–£–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 0.5 ${product.unit}"
										type="button"
									>
										‚àí
									</button>
									<div class="relative">
										<input
											type="text"
											inputmode="numeric"
											pattern="[0-9]*"
											class="quantity-input w-16 px-3 py-2 border-0 focus:outline-none focus:ring-0 text-center bg-gray-100 text-sm font-medium"
											placeholder="0 ${product.unit}"
											value="${shoppingQuantity > 0 ? shoppingQuantity + " " + product.unit : ""}"
											data-product-id="${product.id}"
											data-unit="${product.unit}"
											onchange="updateShoppingQuantityFromInput('${product.id}', this.value)"
										/>
									</div>
									<button
										class="px-2 h-10 bg-gray-100 hover:bg-gray-200 text-gray-700 flex items-center justify-center text-2xl font-normal transition-colors duration-200 rounded-r-lg"
										onclick="updateShoppingQuantity('${product.id}', 0.5)"
										title="–î–æ–±–∞–≤–∏—Ç—å 0.5 ${product.unit}"
										type="button"
									>
										+
									</button>
								</div>

							</div>
						</div>
					</div>
				`;
                })
                .join("");
        }

        // Update create order button
        function updateCreateOrderButton() {
            const createOrderBtn = document.getElementById("createOrderBtn");
            const selectedCount = selectedProducts.length;

            if (selectedCount > 0) {
                createOrderBtn.textContent = `–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ (${selectedCount})`;
                createOrderBtn.classList.remove(
                    "bg-gray-400",
                    "hover:bg-gray-500",
                );
                createOrderBtn.classList.add(
                    "bg-purple-600",
                    "hover:bg-purple-700",
                );
            } else {
                createOrderBtn.textContent = "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑";
                createOrderBtn.classList.remove(
                    "bg-purple-600",
                    "hover:bg-purple-700",
                );
                createOrderBtn.classList.add(
                    "bg-gray-400",
                    "hover:bg-gray-500",
                );
            }
        }

        // Create order - navigate to cart
        function createOrder() {
            // Navigate to cart page for review
            window.location.href = "/cart";
        }

        // Load recent orders for custom department
        async function loadMyRecentOrders() {
            try {
                const response = await fetch("/api/get-all-orders");
                const data = await response.json();

                if (data.success) {
                    // Filter orders for custom department that are pending (not delivered)
                    const customOrders = data.data
                        .filter(
                            (order) =>
                                (order.department === "custom" ||
                                    order.departmentName === "–ì–æ—Ä–Ω–∏—á–Ω–∞—è") &&
                                !(
                                    order.db_status === "delivered" ||
                                    order.status === "delivered"
                                ),
                        )
                        .sort(
                            (a, b) =>
                                new Date(b.db_created_at || b.timestamp) -
                                new Date(a.db_created_at || a.timestamp),
                        )
                        .slice(0, 3); // Show last 3 orders

                    displayMyRecentOrders(customOrders);
                }
            } catch (error) {
                console.error("Error loading recent orders:", error);
            }
        }

        // Display recent orders
        function displayMyRecentOrders(orders) {
            const container = document.getElementById("recentOrdersList");
            const section = document.getElementById("myRecentOrders");

            if (!orders || orders.length === 0) {
                section.classList.add("hidden");
                return;
            }

            section.classList.remove("hidden");

            let html = "";
            orders.forEach((order) => {
                const date = new Date(order.db_created_at || order.timestamp);
                const totalItems = order.items?.length || 0;
                const totalQty =
                    order.items?.reduce(
                        (sum, item) => sum + (parseFloat(item.quantity) || 0),
                        0,
                    ) || 0;

                html += `
					<div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
						<div class="flex justify-between items-start mb-2">
							<div>
								<div class="font-medium text-gray-900">–ó–∞–∫–∞–∑ –æ—Ç ${date.toLocaleDateString("ru-RU")}</div>
								<div class="text-sm text-gray-600">${date.toLocaleTimeString("ru-RU", { hour: "2-digit", minute: "2-digit" })}</div>
							</div>
							<div class="text-right">
								<div class="text-sm font-medium text-gray-700">${totalItems} —Ç–æ–≤–∞—Ä–æ–≤</div>
								<div class="text-xs text-gray-500">${totalQty.toFixed(1)} —à—Ç.</div>
							</div>
						</div>
						<div class="flex gap-2 mt-3">
							<button
								onclick="addMissingProductsToOrder('${order.timestamp}')"
								class="flex-1 bg-purple-500 hover:bg-purple-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-colors flex items-center justify-center space-x-1"
							>
								<span>‚ûï</span>
								<span>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã</span>
							</button>
							<button
								onclick="viewOrderDetails('${order.timestamp}')"
								class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-3 py-2 rounded-lg text-sm font-medium transition-colors"
							>
								üëÅÔ∏è
							</button>
						</div>
					</div>
				`;
            });

            container.innerHTML = html;
        }

        // Add missing products to existing order
        function addMissingProductsToOrder(orderTimestamp) {
            console.log("‚ûï Adding missing products to order:", orderTimestamp);
            localStorage.setItem("modifyOrderTimestamp", orderTimestamp);
            window.location.href = `/modify-order?timestamp=${encodeURIComponent(orderTimestamp)}`;
        }

        // View order details
        function viewOrderDetails(orderTimestamp) {
            window.location.href = `/delivery`;
        }

        // Make functions globally accessible for onclick handlers
        window.updateShoppingQuantity = updateShoppingQuantity;
        window.updateShoppingQuantityFromInput =
            updateShoppingQuantityFromInput;
        window.addMissingProductsToOrder = addMissingProductsToOrder;
        window.viewOrderDetails = viewOrderDetails;

        // Initialize page
        document.addEventListener("DOMContentLoaded", async function () {
            // Load products
            await loadCustomProducts();

            // Load recent orders
            loadMyRecentOrders();

            // Auto-refresh orders every 30 seconds
            setInterval(() => {
                loadMyRecentOrders();
            }, 30000);

            // Refresh orders when page becomes visible again
            document.addEventListener("visibilitychange", function () {
                if (!document.hidden) {
                    loadMyRecentOrders();
                }
            });

            // Load saved quantities from localStorage after products are loaded
            setTimeout(() => {
                if (
                    window.checklist &&
                    window.checklist.loadCartFromLocalStorage
                ) {
                    window.checklist.loadCartFromLocalStorage();
                    console.log(
                        "üì• Restored cart quantities from localStorage",
                    );
                }
            }, 100);

            // Initialize order mode for custom items
            if (window.initializeOrderMode) {
                window.initializeOrderMode();
            }

            // Wait a bit for shopping list data to be initialized, then load cart from localStorage
            setTimeout(() => {
                if (
                    window.checklist &&
                    window.checklist.loadCartFromLocalStorage
                ) {
                    window.checklist.loadCartFromLocalStorage();
                }
            }, 500);

            // Update floating button label
            if (window.updateFloatingButtonLabel) {
                window.updateFloatingButtonLabel();
            }

            // Setup event listeners
            document
                .getElementById("addProductBtn")
                .addEventListener("click", addProduct);
            document
                .getElementById("createOrderBtn")
                .addEventListener("click", createOrder);

            // Search functionality
            const searchInput = document.getElementById("searchInput");
            const clearSearchBtn = document.getElementById("clearSearchBtn");

            searchInput.addEventListener("input", function () {
                applySearch();
                clearSearchBtn.style.display = this.value ? "block" : "none";
            });

            clearSearchBtn.addEventListener("click", function () {
                searchInput.value = "";
                this.style.display = "none";
                applySearch();
            });

            // Enter key support for product name
            document
                .getElementById("productName")
                .addEventListener("keydown", function (e) {
                    if (e.key === "Enter") {
                        e.preventDefault();
                        addProduct();
                    }
                });

            // Enter key support for quantity
            document
                .getElementById("productQuantity")
                .addEventListener("keydown", function (e) {
                    if (e.key === "Enter") {
                        e.preventDefault();
                        addProduct();
                    }
                });
        });
    </script>
</Layout>
