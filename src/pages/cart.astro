---
import Layout from '../layouts/Layout.astro';
---

<Layout title="–ö–æ—Ä–∑–∏–Ω–∞">
	<div class="min-h-screen bg-gray-50 pb-40">
		<!-- Header -->
		<header class="bg-gradient-to-r from-blue-600 to-blue-700 text-white px-4 py-5 sticky top-0 z-10 shadow-lg">
			<div class="max-w-2xl mx-auto">
				<div class="flex items-center justify-between">
					<button id="backBtn" class="text-blue-100 hover:text-white transition-colors">
						<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
						</svg>
					</button>
					<div class="flex items-center space-x-2">
						<span class="text-2xl">üõí</span>
						<h1 class="text-xl font-bold">–ö–æ—Ä–∑–∏–Ω–∞</h1>
					</div>
					<button id="clearAllBtn" class="text-blue-100 hover:text-white transition-colors">
						<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
						</svg>
					</button>
				</div>
			</div>
		</header>

		<!-- Main Content -->
		<main class="max-w-2xl mx-auto px-4 py-6">
			<!-- Loading State -->
			<div id="loadingState" class="text-center py-12">
				<div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
				<p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
			</div>

			<!-- Empty Cart State -->
			<div id="emptyCartState" class="hidden text-center py-12">
				<div class="text-6xl mb-4">üõí</div>
				<h2 class="text-2xl font-bold text-gray-800 mb-2">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
				<p class="text-gray-600 mb-8">–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ª—é–±–æ–≥–æ –æ—Ç–¥–µ–ª–∞</p>
				<div class="flex flex-wrap gap-3 justify-center">
					<a href="/bar" class="px-6 py-3 bg-purple-600 hover:bg-purple-700 text-white font-medium rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl">
						üç∑ –ë–∞—Ä
					</a>
					<a href="/kitchen" class="px-6 py-3 bg-orange-600 hover:bg-orange-700 text-white font-medium rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl">
						üç≥ –ö—É—Ö–Ω—è
					</a>
					<a href="/custom" class="px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-medium rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl">
						üßπ –ì–æ—Ä–Ω–∏—á–Ω–∞—è
					</a>
				</div>
			</div>

			<!-- Cart Content -->
			<div id="cartContent" class="hidden space-y-4">
				<!-- Cart Items -->
				<div id="cartItems" class="space-y-4">
					<!-- Items will be populated by JavaScript -->
				</div>

				<!-- Add Missed Products Button -->
				<div class="bg-white rounded-xl shadow-sm border border-gray-200 p-4">
					<button id="addMoreBtn" class="w-full flex items-center justify-center space-x-2 text-blue-600 hover:text-blue-700 font-medium py-2 transition-colors">
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
						</svg>
						<span>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</span>
					</button>
				</div>
			</div>
		</main>

		<!-- Fixed Bottom Action Bar -->
		<div id="actionBar" class="hidden fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-2xl">
			<div class="max-w-2xl mx-auto px-4 py-4">
				<div class="space-y-3">
					<!-- Order Summary -->
					<div id="orderSummary" class="text-center text-sm text-gray-600 font-medium">
						<!-- Will be populated by JS -->
					</div>
					
					<!-- Action Buttons -->
					<div class="grid grid-cols-2 gap-3">
						<!-- Copy to WhatsApp Button -->
						<button 
							id="copyWhatsAppBtn" 
							class="flex items-center justify-center space-x-2 bg-green-600 hover:bg-green-700 text-white font-medium py-4 rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl"
						>
							<span class="text-xl">üìã</span>
							<span>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</span>
						</button>

						<!-- Create Order Button -->
						<button 
							id="createOrderBtn" 
							class="flex items-center justify-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white font-medium py-4 rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl"
						>
							<span class="text-xl">‚úÖ</span>
							<span>–°–æ–∑–¥–∞—Ç—å</span>
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Add Missed Products Modal -->
		<div id="addProductModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-end sm:items-center justify-center">
			<div class="bg-white rounded-t-3xl sm:rounded-2xl w-full sm:max-w-md max-h-[80vh] flex flex-col">
				<div class="p-6 border-b border-gray-200">
					<div class="flex items-center justify-between">
						<h3 class="text-xl font-bold text-gray-900">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</h3>
						<button id="closeModalBtn" class="text-gray-400 hover:text-gray-600 transition-colors">
							<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
				</div>
				
				<div class="p-6 overflow-y-auto">
					<div class="space-y-4">
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label>
							<input 
								type="text" 
								id="productName" 
								placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–ª–æ–∫–æ"
								class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
							/>
						</div>
						
						<div class="grid grid-cols-2 gap-3">
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-2">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
								<input 
									type="number" 
									id="productQuantity" 
									value="1"
									min="0.1"
									step="0.1"
									class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
								/>
							</div>
							
							<div>
								<label class="block text-sm font-medium text-gray-700 mb-2">–ï–¥–∏–Ω–∏—Ü–∞</label>
								<select 
									id="productUnit" 
									class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
								>
									<option value="—à—Ç">—à—Ç</option>
									<option value="–ª">–ª</option>
									<option value="–∫–≥">–∫–≥</option>
									<option value="–≥">–≥</option>
									<option value="–ø">–ø</option>
									<option value="—É–ø">—É–ø</option>
								</select>
							</div>
						</div>

						<div>
							<label class="block text-sm font-medium text-gray-700 mb-2">–û—Ç–¥–µ–ª</label>
							<select 
								id="productDepartment" 
								class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
							>
								<option value="bar">üç∑ –ë–∞—Ä</option>
								<option value="kitchen">üç≥ –ö—É—Ö–Ω—è</option>
								<option value="custom">üßπ –ì–æ—Ä–Ω–∏—á–Ω–∞—è</option>
							</select>
						</div>

						<button 
							id="addProductBtn" 
							class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-4 rounded-lg transition-colors duration-200"
						>
							–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script is:inline>
		// Load cart data and display
		function loadCartData() {
			const loadingState = document.getElementById('loadingState');
			const emptyCartState = document.getElementById('emptyCartState');
			const cartContent = document.getElementById('cartContent');
			const actionBar = document.getElementById('actionBar');

			// Get all orders from departments
			const allOrders = getAllDepartmentOrders();

			// Hide loading
			loadingState.style.display = 'none';

			if (allOrders.totalItems === 0) {
				emptyCartState.classList.remove('hidden');
				return;
			}

			// Show cart content and action bar
			cartContent.classList.remove('hidden');
			actionBar.classList.remove('hidden');
			
			// Populate cart items
			populateCartItems(allOrders);
			
			// Update order summary
			updateOrderSummary(allOrders);
		}

		// Populate cart items grouped by department
		function populateCartItems(allOrders) {
			const cartItems = document.getElementById('cartItems');
			let itemsHtml = '';

			allOrders.departments.forEach(dept => {
				const deptItems = allOrders.allItems.filter(item => item.departmentName === dept.name);
				
				itemsHtml += `
					<div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
						<div class="bg-gradient-to-r ${getDepartmentGradient(dept.name)} px-4 py-3 flex items-center justify-between">
							<h3 class="font-semibold text-white flex items-center space-x-2">
								<span>${dept.emoji}</span>
								<span>${dept.name}</span>
								<span class="text-xs bg-white bg-opacity-30 px-2 py-0.5 rounded-full">${dept.count}</span>
							</h3>
						</div>
						<div class="divide-y divide-gray-100">
				`;
				
				deptItems.forEach(item => {
					itemsHtml += `
						<div class="p-4 hover:bg-gray-50 transition-colors">
							<div class="flex items-center justify-between gap-3">
								<div class="flex-1 min-w-0">
									<div class="font-medium text-gray-900 truncate">${item.name}</div>
									${item.department !== 'custom' && item.quantity ? `<div class="text-xs text-gray-500 mt-0.5">–û—Å—Ç–∞—Ç–æ–∫: ${item.quantity} ${item.unit}</div>` : ''}
								</div>
								<div class="flex items-center space-x-2 flex-shrink-0">
									<button 
										onclick="updateItemQuantity('${item.id}', '${item.department}', ${item.shoppingQuantity - 1})" 
										class="w-9 h-9 bg-gray-100 hover:bg-gray-200 rounded-lg flex items-center justify-center text-gray-700 font-bold transition-colors"
									>
										‚àí
									</button>
									<div class="w-16 text-center">
										<div class="font-bold text-lg text-gray-900">${item.shoppingQuantity}</div>
										<div class="text-xs text-gray-500">${item.unit}</div>
									</div>
									<button 
										onclick="updateItemQuantity('${item.id}', '${item.department}', ${item.shoppingQuantity + 1})" 
										class="w-9 h-9 bg-blue-600 hover:bg-blue-700 rounded-lg flex items-center justify-center text-white font-bold transition-colors"
									>
										+
									</button>
									<button 
										onclick="removeItem('${item.id}', '${item.department}')" 
										class="w-9 h-9 text-red-600 hover:bg-red-50 rounded-lg flex items-center justify-center transition-colors"
										title="–£–¥–∞–ª–∏—Ç—å"
									>
										<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
										</svg>
									</button>
								</div>
							</div>
						</div>
					`;
				});
				
				itemsHtml += `
						</div>
					</div>
				`;
			});

			cartItems.innerHTML = itemsHtml;
		}

		// Get department gradient color
		function getDepartmentGradient(deptName) {
			if (deptName === '–ë–∞—Ä') return 'from-purple-600 to-purple-700';
			if (deptName === '–ö—É—Ö–Ω—è') return 'from-orange-600 to-orange-700';
			if (deptName === '–ì–æ—Ä–Ω–∏—á–Ω–∞—è') return 'from-green-600 to-green-700';
			return 'from-blue-600 to-blue-700';
		}

		// Update order summary in bottom bar
		function updateOrderSummary(allOrders) {
			const orderSummary = document.getElementById('orderSummary');
			orderSummary.innerHTML = `<strong>${allOrders.totalItems}</strong> —Ç–æ–≤–∞—Ä${getItemEnding(allOrders.totalItems)} –∏–∑ ${allOrders.departments.length} –æ—Ç–¥–µ–ª${getDepartmentEnding(allOrders.departments.length)}`;
		}

		// Update item quantity
		function updateItemQuantity(itemId, department, newQuantity) {
			if (newQuantity < 0) return;

			const storageKey = `${department}ShoppingList`;
			const items = JSON.parse(localStorage.getItem(storageKey) || '[]');
			
			const itemIndex = items.findIndex(item => item.id == itemId);
			if (itemIndex !== -1) {
				if (newQuantity === 0) {
					items.splice(itemIndex, 1);
				} else {
					items[itemIndex].shoppingQuantity = newQuantity;
				}
				
				if (items.length > 0) {
					localStorage.setItem(storageKey, JSON.stringify(items));
				} else {
					localStorage.removeItem(storageKey);
				}
			}

			// Reload cart to reflect changes
			loadCartData();
		}

		// Remove item completely
		function removeItem(itemId, department) {
			if (confirm('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?')) {
				updateItemQuantity(itemId, department, 0);
			}
		}

		// Clear all items
		function clearAll() {
			if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É?')) {
				localStorage.removeItem('barShoppingList');
				localStorage.removeItem('kitchenShoppingList');
				localStorage.removeItem('customShoppingList');
				location.reload();
			}
		}

		// Copy to WhatsApp
		function copyToWhatsApp() {
			const allOrders = getAllDepartmentOrders();
			if (allOrders.totalItems === 0) return;

			const message = generateWhatsAppMessage(allOrders);
			
			// Copy to clipboard
			navigator.clipboard.writeText(message).then(() => {
				const btn = document.getElementById('copyWhatsAppBtn');
				const originalHTML = btn.innerHTML;
				btn.innerHTML = '<span class="text-xl">‚úÖ</span><span>–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!</span>';
				btn.classList.remove('bg-green-600', 'hover:bg-green-700');
				btn.classList.add('bg-gray-600');
				
				setTimeout(() => {
					btn.innerHTML = originalHTML;
					btn.classList.remove('bg-gray-600');
					btn.classList.add('bg-green-600', 'hover:bg-green-700');
				}, 2000);
			}).catch(err => {
				console.error('Failed to copy:', err);
				alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
			});
		}

		// Create order and save to database
		async function createOrder() {
			const btn = document.getElementById('createOrderBtn');
			const originalHTML = btn.innerHTML;
			btn.disabled = true;
			btn.innerHTML = '<span class="animate-spin">‚è≥</span><span>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...</span>';

			const allOrders = getAllDepartmentOrders();
			
			if (allOrders.totalItems === 0) {
				alert("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!");
				btn.disabled = false;
				btn.innerHTML = originalHTML;
				return;
			}

			try {
				// Save each department's order separately
				const savePromises = [];
				
				allOrders.departments.forEach(dept => {
					const deptItems = allOrders.allItems.filter(item => item.departmentName === dept.name);
					// Map department names to keys, but preserve actual department names for non-standard departments
					let departmentKey;
					if (dept.name === '–ë–∞—Ä') {
						departmentKey = 'bar';
					} else if (dept.name === '–ö—É—Ö–Ω—è') {
						departmentKey = 'kitchen';
					} else if (dept.name === '–ì–æ—Ä–Ω–∏—á–Ω–∞—è') {
						departmentKey = 'custom';
					} else {
						// For custom departments like –û—Ñ–∏—Å, use the actual name as key
						departmentKey = dept.name.toLowerCase();
					}
					
					// Save all departments to database (not just bar, kitchen, custom)
					if (true) { // Save all departments
						// Clean up items - use shoppingQuantity as the main quantity
						const cleanedItems = deptItems.map(item => ({
							...item,
							quantity: item.shoppingQuantity, // Use ordered amount, not Poster leftover
							shoppingQuantity: item.shoppingQuantity
						}));
						
						const orderData = {
							timestamp: new Date().toISOString(),
							department: departmentKey,
							departmentName: dept.name,
							items: cleanedItems,
							totalItems: cleanedItems.length,
							totalQuantity: cleanedItems.reduce((sum, item) => sum + item.shoppingQuantity, 0),
							status: 'pending',
							isPartOfUnified: allOrders.departments.length > 1,
							source: 'internal',
							supplier: 'Internal Order'
						};
						
						savePromises.push(
							fetch('/api/save-internal-order', {
								method: 'POST',
								headers: {'Content-Type': 'application/json'},
								body: JSON.stringify(orderData)
							})
						);
					}
				});

				// Wait for all saves to complete
				const results = await Promise.all(savePromises);
				
				// Check if all succeeded
				const allSucceeded = results.every(r => r.ok);
				if (!allSucceeded) {
					throw new Error('Some orders failed to save');
				}

				// Clear cart
				localStorage.removeItem('barShoppingList');
				localStorage.removeItem('kitchenShoppingList');
				localStorage.removeItem('customShoppingList');

				// Show success message
				btn.innerHTML = '<span class="text-xl">‚úÖ</span><span>–ì–æ—Ç–æ–≤–æ!</span>';
				btn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
				btn.classList.add('bg-green-600');

				// Redirect to home after 1 second
				setTimeout(() => {
					window.location.href = '/';
				}, 1000);

			} catch (error) {
				console.error('Error saving order:', error);
				alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
				btn.disabled = false;
				btn.innerHTML = originalHTML;
			}
		}

		// Open add product modal
		function openAddProductModal() {
			document.getElementById('addProductModal').classList.remove('hidden');
			document.getElementById('productName').focus();
		}

		// Close modal
		function closeModal() {
			document.getElementById('addProductModal').classList.add('hidden');
			// Reset form
			document.getElementById('productName').value = '';
			document.getElementById('productQuantity').value = '1';
		}

		// Add missed product
		function addMissedProduct() {
			const name = document.getElementById('productName').value.trim();
			const quantity = parseFloat(document.getElementById('productQuantity').value);
			const unit = document.getElementById('productUnit').value;
			const department = document.getElementById('productDepartment').value;

			if (!name) {
				alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
				return;
			}

			if (quantity <= 0 || isNaN(quantity)) {
				alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
				return;
			}

			// Create custom product
			const newProduct = {
				id: 'custom_' + Date.now(),
				name: name,
				quantity: 0,
				unit: unit,
				shoppingQuantity: quantity,
				department: department
			};

			// Add to localStorage
			const storageKey = `${department}ShoppingList`;
			const items = JSON.parse(localStorage.getItem(storageKey) || '[]');
			items.push(newProduct);
			localStorage.setItem(storageKey, JSON.stringify(items));

			// Close modal and reload
			closeModal();
			loadCartData();
		}

		// Get all department orders
		function getAllDepartmentOrders() {
			const allItems = [];
			const departments = [];
			
			// Check all possible localStorage keys for shopping lists
			const storageKeys = [
				{ key: 'barShoppingList', dept: 'bar', name: '–ë–∞—Ä', emoji: 'üç∑' },
				{ key: 'kitchenShoppingList', dept: 'kitchen', name: '–ö—É—Ö–Ω—è', emoji: 'üç≥' },
				{ key: 'customShoppingList', dept: 'custom', name: '–ì–æ—Ä–Ω–∏—á–Ω–∞—è', emoji: 'üßπ' }
			];
			
			// Also check for dynamic department names from window variables
			if (window.currentDepartmentName && window.currentDepartment) {
				const deptName = window.currentDepartmentName;
				const deptKey = window.currentDepartment;
				
				// Only add if it's not already in the standard list
				if (!storageKeys.find(s => s.dept === deptKey)) {
					storageKeys.push({
						key: 'customShoppingList', // Custom departments use customShoppingList
						dept: deptKey,
						name: deptName,
						emoji: getDepartmentEmoji(deptName)
					});
				}
			}
			
			storageKeys.forEach(({ key, dept, name, emoji }) => {
				const orders = JSON.parse(localStorage.getItem(key) || '[]');
				const items = orders.filter(item => item.shoppingQuantity > 0);
				
				if (items.length > 0) {
					items.forEach(item => {
						allItems.push({
							...item, 
							department: dept, 
							departmentName: name, 
							departmentEmoji: emoji
						});
					});
					departments.push({name: name, emoji: emoji, count: items.length});
				}
			});
			
			return {allItems, departments, totalItems: allItems.length};
		}
		
		// Get emoji for department name
		function getDepartmentEmoji(deptName) {
			const name = deptName.toLowerCase();
			if (name.includes('–æ—Ñ–∏—Å')) return 'üè¢';
			if (name.includes('–≥–æ—Ä–Ω–∏—á–Ω–∞—è')) return 'üßπ';
			if (name.includes('—Å–∫–ª–∞–¥')) return 'üì¶';
			if (name.includes('—Ä–µ—Å–µ–ø—à–Ω')) return 'üè®';
			if (name.includes('–±–∞—Ä')) return 'üç∑';
			if (name.includes('–∫—É—Ö–Ω—è')) return 'üç≥';
			return 'üìã'; // Default
		}

		// Generate WhatsApp message
		function generateWhatsAppMessage(allOrders) {
			const date = new Date().toLocaleDateString("ru-RU");
			let message = `üìã –ó–∞–∫–∞–∑ –æ—Ç ${date}\n\n`;
			
			allOrders.departments.forEach(dept => {
				const deptItems = allOrders.allItems.filter(item => item.departmentName === dept.name);
				message += `${dept.emoji} ${dept.name}:\n`;
				deptItems.forEach(item => {
					message += `‚Ä¢ ${item.name} ‚Äî ${item.shoppingQuantity} ${item.unit}\n`;
				});
				message += "\n";
			});
			
			return message;
		}

		// Helper functions
		function getItemEnding(count) {
			if (count % 10 === 1 && count % 100 !== 11) return "";
			if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return "–∞";
			return "–æ–≤";
		}

		function getDepartmentEnding(count) {
			if (count === 1) return "–∞";
			if (count >= 2 && count <= 4) return "–æ–≤";
			return "–æ–≤";
		}

		// Event listeners
		document.addEventListener('DOMContentLoaded', function() {
			loadCartData();

			document.getElementById('backBtn').addEventListener('click', () => window.history.back());
			document.getElementById('clearAllBtn').addEventListener('click', clearAll);
			document.getElementById('copyWhatsAppBtn').addEventListener('click', copyToWhatsApp);
			document.getElementById('createOrderBtn').addEventListener('click', createOrder);
			document.getElementById('addMoreBtn').addEventListener('click', openAddProductModal);
			document.getElementById('closeModalBtn').addEventListener('click', closeModal);
			document.getElementById('addProductBtn').addEventListener('click', addMissedProduct);
			
			// Close modal on backdrop click
			document.getElementById('addProductModal').addEventListener('click', function(e) {
				if (e.target === this) closeModal();
			});
			
			// Submit form on Enter in product name
			document.getElementById('productName').addEventListener('keypress', function(e) {
				if (e.key === 'Enter') {
					e.preventDefault();
					addMissedProduct();
				}
			});
		});
	</script>
</Layout>
