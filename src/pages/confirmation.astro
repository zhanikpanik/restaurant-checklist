---
import Layout from '../layouts/Layout.astro';
---

<Layout title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞">
	<div class="min-h-screen bg-white">
		<!-- Header -->
		<header class="bg-white border-b border-gray-200 px-4 py-6">
			<div class="max-w-md mx-auto">
				<div class="flex items-center justify-between mb-4">
					<button id="backBtn" class="text-blue-600 hover:text-blue-800">‚Üê –ù–∞–∑–∞–¥</button>
					<h1 class="text-2xl font-bold text-black">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>
					<div class="w-16"></div> <!-- Spacer -->
				</div>
			</div>
		</header>

		<!-- Main Content -->
		<main class="max-w-md mx-auto px-4 py-6">
			<!-- Order Summary -->
			<div id="orderSummary" class="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-6">
				<h2 class="text-lg font-semibold text-gray-900 mb-4">–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</h2>
				<div id="orderDetails" class="space-y-2">
					<!-- Order details will be populated by JavaScript -->
				</div>
			</div>

			<!-- Order Text for Copying -->
			<div class="bg-white border border-gray-200 rounded-lg p-4 mb-6">
				<h3 class="text-md font-medium text-gray-900 mb-3">–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞</h3>
				<div class="bg-gray-50 border border-gray-200 rounded p-3 text-sm font-mono">
					<pre id="orderText" class="whitespace-pre-wrap text-gray-800"></pre>
				</div>
			</div>

			<!-- Info Notice -->
			<div class="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
				<div class="flex items-start space-x-2">
					<span class="text-blue-600 mt-0.5">‚ÑπÔ∏è</span>
					<div class="text-sm text-blue-800">
						<p class="font-medium mb-1">–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:</p>
						<p>‚Ä¢ –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∞–≤–∫–∏</p>
						<p>‚Ä¢ –ö—É—Ä—å–µ—Ä —É–≤–∏–¥–∏—Ç –∑–∞–∫–∞–∑ –∏ —Å–º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É</p>
					</div>
				</div>
			</div>

			<!-- Manager Actions: Send to Suppliers -->
			<div id="supplierActions" class="mt-6">
				<h3 class="text-lg font-semibold text-gray-800 mb-4">üë®‚Äçüíº –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º:</h3>
				<div id="supplierButtons" class="space-y-3">
					<!-- Supplier-specific buttons will be generated here -->
				</div>
			</div>

			<!-- Additional Actions -->
			<div class="flex flex-col sm:flex-row gap-3 mt-6 pt-4 border-t border-gray-200">
				<button id="copyBtn" class="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center">
					<span class="mr-2">üìã</span>
					–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
				</button>
				<button id="saveOrderBtn" class="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center">
					<span class="mr-2">üíæ</span>
					–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑
				</button>
			</div>

			<!-- Navigation Buttons -->
			<div class="flex flex-col sm:flex-row gap-3 mt-4">
				<button id="mainMenuBtn" class="flex-1 bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 flex items-center justify-center">
					<span class="mr-2">üè†</span>
					–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
				</button>
				<button id="cancelBtn" class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium py-3 px-6 rounded-lg transition-colors duration-200">
					–û—Ç–º–µ–Ω–∏—Ç—å
				</button>
			</div>

			<!-- Success Message -->
			<div id="successMessage" class="hidden mt-4 p-4 bg-green-100 border border-green-300 rounded-lg">
				<div class="flex items-center">
					<span class="text-green-600 mr-2">‚úÖ</span>
					<span class="text-green-800 font-medium">–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!</span>
				</div>
			</div>
		</main>
	</div>

	<script is:inline>
		document.addEventListener('DOMContentLoaded', () => {
			// Get order data from URL parameters or localStorage
			function getOrderData() {
				// Try to get from localStorage first (more reliable)
				const orderData = localStorage.getItem('pendingOrder');
				if (orderData) {
					return JSON.parse(orderData);
				}
				
				// Fallback: redirect back if no order data
				console.error('No order data found');
				window.history.back();
				return null;
			}

		// Display order details
		function displayOrderDetails() {
			const orderData = getOrderData();
			if (!orderData) return;

			const orderDetails = document.getElementById('orderDetails');
			const orderText = document.getElementById('orderText');
			let summaryHtml = '';

			// Check if this is a unified order
			if (orderData.isUnified && orderData.departments) {
				// Display unified order summary
				summaryHtml = `
					<div class="flex justify-between items-center border-b border-gray-200 pb-2 mb-2">
						<span class="font-medium">üìã –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑</span>
						<span class="text-sm text-gray-600">${orderData.date}</span>
					</div>
				`;

				// Group items by department
				orderData.departments.forEach(dept => {
					const deptItems = orderData.items.filter(item => item.departmentName === dept.name);
					
					summaryHtml += `
						<div class="mb-3">
							<div class="font-medium text-gray-700 mb-1">${dept.emoji} ${dept.name} (${deptItems.length})</div>
					`;
					
					deptItems.forEach(item => {
						summaryHtml += `
							<div class="flex justify-between items-center ml-4 text-sm">
								<span>${item.name}</span>
								<span class="font-medium">${item.quantity || item.shoppingQuantity} ${item.unit}</span>
							</div>
						`;
					});
					
					summaryHtml += `</div>`;
				});

				summaryHtml += `
					<div class="border-t border-gray-200 pt-2 mt-2">
						<div class="flex justify-between items-center font-semibold">
							<span>–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π:</span>
							<span>${orderData.totalItems}</span>
						</div>
						<div class="flex justify-between items-center text-sm text-gray-600">
							<span>–û—Ç–¥–µ–ª–æ–≤:</span>
							<span>${orderData.departments.length}</span>
						</div>
					</div>
				`;
			} else {
				// Display single department order summary (legacy)
				summaryHtml = `
					<div class="flex justify-between items-center border-b border-gray-200 pb-2 mb-2">
						<span class="font-medium">${orderData.departmentName}</span>
						<span class="text-sm text-gray-600">${orderData.date}</span>
					</div>
				`;

				orderData.items.forEach(item => {
					summaryHtml += `
						<div class="flex justify-between items-center">
							<span>${item.name}</span>
							<span class="font-medium">${item.quantity} ${item.unit}</span>
						</div>
					`;
				});

				summaryHtml += `
					<div class="border-t border-gray-200 pt-2 mt-2">
						<div class="flex justify-between items-center font-semibold">
							<span>–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π:</span>
							<span>${orderData.items.length}</span>
						</div>
					</div>
				`;
			}

			orderDetails.innerHTML = summaryHtml;

			// Display formatted text for copying
			orderText.textContent = orderData.formattedText || '–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω';
		}

		// Save order to delivery queue
		async function saveOrderToDeliveryQueue() {
			const orderData = getOrderData();
			if (!orderData) return;

			if (orderData.isUnified) {
				// Handle unified orders - save to unified history
				const deliveryOrder = {
					timestamp: new Date().toISOString(),
					isUnified: true,
					departments: orderData.departments,
					items: orderData.items.map(item => ({
						id: item.id,
						name: item.name,
						quantity: item.quantity || item.shoppingQuantity,
						unit: item.unit,
						department: item.department,
						departmentName: item.departmentName
					})),
					totalItems: orderData.totalItems,
					totalQuantity: orderData.items.reduce((sum, item) => sum + (item.quantity || item.shoppingQuantity), 0),
					status: 'sent'
				};

				// Save unified order to general history
				const unifiedHistoryKey = 'unifiedOrderHistory';
				const existingUnifiedHistory = JSON.parse(localStorage.getItem(unifiedHistoryKey) || '[]');
				existingUnifiedHistory.unshift(deliveryOrder);

				if (existingUnifiedHistory.length > 20) {
					existingUnifiedHistory.splice(20);
				}

				localStorage.setItem(unifiedHistoryKey, JSON.stringify(existingUnifiedHistory));
				console.log(`‚úÖ Unified order saved to ${unifiedHistoryKey} for delivery tracking`);

				// Also clear individual department shopping lists
				orderData.departments.forEach(dept => {
					if (dept.name === '–ë–∞—Ä') {
						localStorage.removeItem('barShoppingList');
					} else if (dept.name === '–ö—É—Ö–Ω—è') {
						localStorage.removeItem('kitchenShoppingList');
					} else if (dept.name === '–ì–æ—Ä–Ω–∏—á–Ω–∞—è') {
						localStorage.removeItem('customShoppingList');
					}
				});

				// Save individual department orders to server storage
				// Note: Unified orders are saved locally only since server expects individual departments
				try {
					console.log('üíæ Saving individual department orders to server storage...');
					
					// Group items by department and save separately
					const departmentGroups = {};
					deliveryOrder.items.forEach(item => {
						const dept = item.department;
						if (!departmentGroups[dept]) {
							departmentGroups[dept] = [];
						}
						departmentGroups[dept].push(item);
					});
					
					// Save each department separately
					for (const [dept, items] of Object.entries(departmentGroups)) {
						const deptOrder = {
							timestamp: deliveryOrder.timestamp,
							department: dept,
							departmentName: dept === 'bar' ? '–ë–∞—Ä' : dept === 'kitchen' ? '–ö—É—Ö–Ω—è' : '–ì–æ—Ä–Ω–∏—á–Ω–∞—è',
							items: items,
							totalItems: items.length,
							totalQuantity: items.reduce((sum, item) => sum + item.quantity, 0),
							status: 'sent',
							isPartOfUnified: true
						};
						
						if (dept === 'bar' || dept === 'kitchen') {
							// Save bar and kitchen to server
							const response = await fetch('/api/save-internal-order', {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json'
								},
								body: JSON.stringify(deptOrder)
							});
							
							const result = await response.json();
							if (result.success) {
								console.log(`‚úÖ ${dept} order saved to server storage`);
							} else {
								console.warn(`‚ö†Ô∏è Failed to save ${dept} order to server:`, result.error);
							}
						} else if (dept === 'custom') {
							// Save custom orders to local customOrderHistory for delivery visibility
							const customHistoryKey = 'customOrderHistory';
							const existingCustomHistory = JSON.parse(localStorage.getItem(customHistoryKey) || '[]');
							existingCustomHistory.unshift(deptOrder);
							
							if (existingCustomHistory.length > 20) {
								existingCustomHistory.splice(20);
							}
							
							localStorage.setItem(customHistoryKey, JSON.stringify(existingCustomHistory));
							console.log(`‚úÖ Custom order saved to ${customHistoryKey} for delivery tracking`);
						}
					}
				} catch (serverError) {
					console.warn('‚ö†Ô∏è Server save failed:', serverError.message);
				}
			} else {
				// Handle single department orders (legacy)
				const deliveryOrder = {
					timestamp: new Date().toISOString(),
					department: orderData.department,
					departmentName: orderData.departmentName,
					items: orderData.items.map(item => ({
						id: item.id,
						name: item.name,
						quantity: item.quantity,
						unit: item.unit
					})),
					totalItems: orderData.items.length,
					totalQuantity: orderData.items.reduce((sum, item) => sum + item.quantity, 0),
					status: 'sent'
				};

				const historyKey = `${orderData.department}OrderHistory`;
				const existingHistory = JSON.parse(localStorage.getItem(historyKey) || '[]');
				existingHistory.unshift(deliveryOrder);

				if (existingHistory.length > 20) {
					existingHistory.splice(20);
				}

				localStorage.setItem(historyKey, JSON.stringify(existingHistory));
				console.log(`‚úÖ Order saved to ${historyKey} for delivery tracking`);

				// Save to server storage
				try {
					console.log('üíæ Saving internal order to server storage...');
					const response = await fetch('/api/save-internal-order', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify(deliveryOrder)
					});
					
					const result = await response.json();
					
					if (result.success) {
						console.log(`‚úÖ Order saved to server storage for cross-device visibility`);
					} else {
						console.warn('‚ö†Ô∏è Failed to save to server:', result.error);
					}
				} catch (serverError) {
					console.warn('‚ö†Ô∏è Server save failed:', serverError.message);
				}
			}
		}

		// Copy to clipboard functionality
		async function copyToClipboard() {
			const orderText = document.getElementById('orderText').textContent;
			const successMessage = document.getElementById('successMessage');
			const copyBtn = document.getElementById('copyBtn');

			try {
				await navigator.clipboard.writeText(orderText);
				
				// Save order to delivery queue when copied
				await saveOrderToDeliveryQueue();
				
				// Show success message
				successMessage.classList.remove('hidden');
				
				// Update button temporarily
				const originalText = copyBtn.innerHTML;
				copyBtn.innerHTML = '<span>‚úÖ</span><span>–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!</span>';
				copyBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
				copyBtn.classList.add('bg-green-600', 'hover:bg-green-700');

				// Reset after 2 seconds
				setTimeout(() => {
					successMessage.classList.add('hidden');
					copyBtn.innerHTML = originalText;
					copyBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
					copyBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
				}, 2000);

			} catch (err) {
				console.error('Failed to copy text: ', err);
				// Fallback for older browsers
				const textArea = document.createElement('textarea');
				textArea.value = orderText;
				document.body.appendChild(textArea);
				textArea.select();
				document.execCommand('copy');
				document.body.removeChild(textArea);
				
				// Save order to delivery queue when copied
				saveOrderToDeliveryQueue();
				
				successMessage.classList.remove('hidden');
				setTimeout(() => {
					successMessage.classList.add('hidden');
				}, 2000);
			}
		}

		// Load supplier-specific buttons for manager approval
		async function loadSupplierButtons() {
			const orderData = JSON.parse(localStorage.getItem('pendingOrder') || '{}');
			if (!orderData.items || orderData.items.length === 0) {
				document.getElementById('supplierActions').style.display = 'none';
				return;
			}

			try {
				// Group items by supplier using the API
				const response = await fetch('/api/orders-by-supplier', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						cartItems: orderData.items
					})
				});

				const result = await response.json();
				
				if (!result.success) {
					throw new Error(result.error || 'Failed to group orders by supplier');
				}

				const { ordersBySupplier, unassignedItems } = result.data;
				const supplierButtonsContainer = document.getElementById('supplierButtons');
				
				let buttonsHtml = '';

				// Create button for each supplier
				ordersBySupplier.forEach((supplierOrder, index) => {
					const itemCount = supplierOrder.items.length;
					const supplierName = supplierOrder.supplier.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫';
					const hasPhone = supplierOrder.supplier.phone;
					
					buttonsHtml += `
						<div class="bg-gray-50 p-4 rounded-lg border">
							<div class="flex justify-between items-start mb-3">
								<div>
									<h4 class="font-medium text-gray-800">${supplierName}</h4>
									<p class="text-sm text-gray-600">${itemCount} —Ç–æ–≤–∞—Ä–æ–≤</p>
									${hasPhone ? `<p class="text-xs text-gray-500">üì± ${supplierOrder.supplier.phone}</p>` : '<p class="text-xs text-red-500">‚ö†Ô∏è –ù–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</p>'}
								</div>
								<button 
									onclick="sendToSupplier(${index})" 
									${!hasPhone ? 'disabled' : ''}
									class="px-4 py-2 rounded-lg font-medium transition-colors ${hasPhone ? 'bg-green-600 hover:bg-green-700 text-white' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}"
								>
									üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å ${supplierName}
								</button>
							</div>
							<div class="text-sm text-gray-700">
								${supplierOrder.items.map(item => `‚Ä¢ ${item.name} - ${item.quantity} ${item.unit}`).join('<br>')}
							</div>
						</div>
					`;
				});

				// Add button for unassigned items if any
				if (unassignedItems.length > 0) {
					buttonsHtml += `
						<div class="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
							<div class="flex justify-between items-start mb-3">
								<div>
									<h4 class="font-medium text-gray-800">‚ö†Ô∏è –ë–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</h4>
									<p class="text-sm text-gray-600">${unassignedItems.length} —Ç–æ–≤–∞—Ä–æ–≤</p>
									<p class="text-xs text-gray-500">üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä</p>
								</div>
								<button 
									onclick="sendUnassignedItems()" 
									class="px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg font-medium transition-colors"
								>
									üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–º—É
								</button>
							</div>
							<div class="text-sm text-gray-700">
								${unassignedItems.map(item => `‚Ä¢ ${item.name} - ${item.quantity} ${item.unit}`).join('<br>')}
							</div>
						</div>
					`;
				}

				supplierButtonsContainer.innerHTML = buttonsHtml;

				// Store the data globally for the button handlers
				window.supplierOrdersData = { ordersBySupplier, unassignedItems };

			} catch (error) {
				console.error('‚ùå Failed to load supplier buttons:', error);
				document.getElementById('supplierButtons').innerHTML = '<p class="text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</p>';
			}
		}

		// Send order to specific supplier
		async function sendToSupplier(supplierIndex) {
			if (!window.supplierOrdersData) return;
			
			const supplierOrder = window.supplierOrdersData.ordersBySupplier[supplierIndex];
			if (!supplierOrder || !supplierOrder.supplier.phone) {
				alert('–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
				return;
			}

			const supplierMessage = generateSupplierMessage(supplierOrder);
			const encodedMessage = encodeURIComponent(supplierMessage);
			const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
			
			let whatsappUrl;
			if (isMobile) {
				whatsappUrl = `whatsapp://send?phone=${supplierOrder.supplier.phone}&text=${encodedMessage}`;
			} else {
				whatsappUrl = `https://web.whatsapp.com/send?phone=${supplierOrder.supplier.phone}&text=${encodedMessage}`;
			}
			
			window.open(whatsappUrl, '_blank');
			alert(`‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫—É: ${supplierOrder.supplier.name}`);
		}

		// Send unassigned items to default number
		async function sendUnassignedItems() {
			if (!window.supplierOrdersData || !window.supplierOrdersData.unassignedItems.length) return;
			
			const unassignedMessage = generateUnassignedMessage(window.supplierOrdersData.unassignedItems);
			const encodedMessage = encodeURIComponent(unassignedMessage);
			const defaultPhone = "996708083303";
			const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
			
			let whatsappUrl;
			if (isMobile) {
				whatsappUrl = `whatsapp://send?phone=${defaultPhone}&text=${encodedMessage}`;
			} else {
				whatsappUrl = `https://web.whatsapp.com/send?phone=${defaultPhone}&text=${encodedMessage}`;
			}
			
			window.open(whatsappUrl, '_blank');
			alert('‚úÖ –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä');
		}

		// Save order without sending (for staff)
		async function saveOrderOnly() {
			const orderData = getOrderData();
			if (!orderData) return;

			// Save order to delivery queue
			await saveOrderToDeliveryQueue();
			
			alert('‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º.');
			
			// Clear the pending order
			localStorage.removeItem('pendingOrder');
			
			// Navigate back to main page
			window.location.href = orderData.returnUrl || '/';
		}

		// Make functions globally accessible for onclick handlers
		window.sendToSupplier = sendToSupplier;
		window.sendUnassignedItems = sendUnassignedItems;

		function generateSupplierMessage(supplierOrder) {
			const today = new Date().toLocaleDateString('ru-RU');
			let message = `üìã –ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ - ${today}\n\n`;
			message += `üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${supplierOrder.supplier.name}\n\n`;
			
			supplierOrder.items.forEach(item => {
				message += `‚Ä¢ ${item.name} - ${item.quantity} ${item.unit}\n`;
			});
			
			message += `\nüìä –ò—Ç–æ–≥–æ: ${supplierOrder.items.length} —Ç–æ–≤–∞—Ä–æ–≤`;
			return message;
		}

		function generateUnassignedMessage(unassignedItems) {
			const today = new Date().toLocaleDateString('ru-RU');
			let message = `üìã –ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ - ${today}\n\n`;
			message += `‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:\n\n`;
			
			unassignedItems.forEach(item => {
				message += `‚Ä¢ ${item.name} - ${item.quantity} ${item.unit}\n`;
			});
			
			message += `\nüìä –ò—Ç–æ–≥–æ: ${unassignedItems.length} —Ç–æ–≤–∞—Ä–æ–≤`;
			return message;
		}

			// Initialize the page
			displayOrderDetails();
			loadSupplierButtons();

			// Event listeners
			document.getElementById('copyBtn').addEventListener('click', copyToClipboard);
			document.getElementById('saveOrderBtn').addEventListener('click', saveOrderOnly);
			document.getElementById('mainMenuBtn').addEventListener('click', () => {
				window.location.href = '/';
			});
			document.getElementById('cancelBtn').addEventListener('click', () => {
				window.history.back();
			});
			document.getElementById('backBtn').addEventListener('click', () => {
				window.history.back();
			});
		});
	</script>
</Layout>