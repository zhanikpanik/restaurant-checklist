---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Restaurant System - –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª">
	<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
		<div class="max-w-2xl w-full bg-white rounded-xl shadow-lg p-8">
			<!-- Current Restaurant Indicator -->
			<div id="tenantIndicator" class="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
				<div class="flex items-center justify-between">
					<div class="flex items-center gap-2">
						<span class="text-sm font-medium text-blue-800">–¢–µ–∫—É—â–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω:</span>
						<span id="tenantName" class="text-sm text-blue-600 font-semibold">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
					</div>
					<a href="/select-restaurant" class="text-xs text-blue-600 hover:text-blue-800 underline">–ò–∑–º–µ–Ω–∏—Ç—å</a>
				</div>
			</div>

			<div class="text-center mb-8">
				<h1 class="text-3xl font-bold text-gray-800 mb-2">üçΩÔ∏è Restaurant System</h1>
				<p class="text-gray-600">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã</p>
			</div>

			<div id="sectionsContainer" class="grid grid-cols-1 md:grid-cols-2 gap-4">
				<!-- Loading state -->
				<div class="col-span-full text-center py-8">
					<div class="animate-spin h-8 w-8 border-b-2 border-blue-600 rounded-full mx-auto mb-4"></div>
					<p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–¥–µ–ª–æ–≤...</p>
				</div>
			</div>

			<div class="mt-8 text-center">
				<p class="text-sm text-gray-500">–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º</p>
			</div>
		</div>
	</div>

	<script is:inline>
		// Get current tenant from cookie
		function getCurrentTenant() {
			const cookies = document.cookie.split(';');
			const tenantCookie = cookies.find(c => c.trim().startsWith('tenant='));
			return tenantCookie ? tenantCookie.split('=')[1].trim() : 'unknown';
		}

		// Load tenant info and display it
		async function loadTenantInfo() {
			const tenant = getCurrentTenant();
			const tenantNameEl = document.getElementById('tenantName');

			console.log('üè¢ Current tenant:', tenant);
			tenantNameEl.textContent = tenant;

			// Try to fetch restaurant details
			try {
				const response = await fetch('/api/restaurants');
				const data = await response.json();
				if (data.success) {
					const restaurant = data.data.find(r => r.id === tenant);
					if (restaurant) {
						tenantNameEl.textContent = `${restaurant.logo || 'üçΩÔ∏è'} ${restaurant.name}`;
					}
				}
			} catch (error) {
				console.error('Error fetching restaurant info:', error);
			}
		}

		// Load all sections and display them
		async function loadSections() {
			try {
				const response = await fetch('/api/sections');
				const data = await response.json();

				console.log('üìä Sections API response:', data);
				console.log('üè¢ Current tenant:', getCurrentTenant());

				if (data.success) {
					if (data.data.length === 0) {
						console.warn('‚ö†Ô∏è No sections found for current tenant');
						showNoSectionsMessage();
					} else {
						displaySections(data.data);
					}
				} else {
					throw new Error(data.error);
				}
			} catch (error) {
				console.error('‚ùå Error loading sections:', error);
				showErrorMessage(error.message);
			}
		}

		function showNoSectionsMessage() {
			const container = document.getElementById('sectionsContainer');
			container.innerHTML = `
				<div class="col-span-full text-center py-8">
					<div class="text-6xl mb-4">üì≠</div>
					<h3 class="text-xl font-semibold text-gray-700 mb-2">–û—Ç–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
					<p class="text-gray-600 mb-4">–î–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –æ—Ç–¥–µ–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</p>
					<div class="space-y-2">
						<button onclick="syncSections()" class="inline-block bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg">
							–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—ã –∏–∑ Poster
						</button>
						<br>
						<a href="/select-restaurant" class="inline-block bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg">
							–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
						</a>
					</div>
				</div>
			`;
		}

		async function syncSections() {
			const container = document.getElementById('sectionsContainer');
			container.innerHTML = `
				<div class="col-span-full text-center py-8">
					<div class="animate-spin h-8 w-8 border-b-2 border-blue-600 rounded-full mx-auto mb-4"></div>
					<p class="text-gray-600">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ–∫—Ü–∏–π –∏–∑ Poster...</p>
				</div>
			`;

			try {
				// Sync sections from Poster
				const syncResponse = await fetch('/api/sync-sections');
				const syncData = await syncResponse.json();

				if (!syncData.success) {
					throw new Error(syncData.error);
				}

				console.log('‚úÖ Sections synced:', syncData.data);

				// Reload sections
				await loadSections();
			} catch (error) {
				console.error('‚ùå Error syncing sections:', error);
				showErrorMessage(error.message);
			}
		}

		function showErrorMessage(message) {
			const container = document.getElementById('sectionsContainer');
			container.innerHTML = `
				<div class="col-span-full text-center py-8">
					<div class="text-6xl mb-4">‚ö†Ô∏è</div>
					<h3 class="text-xl font-semibold text-red-700 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
					<p class="text-gray-600 mb-4">${message}</p>
					<button onclick="loadSections()" class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg">
						–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
					</button>
				</div>
			`;
		}
		
		function displaySections(sections) {
			const container = document.getElementById('sectionsContainer');

			// Add manager and delivery sections first (special cases)
			let sectionsHtml = `
				<button onclick="selectSpecialSection('manager')" class="w-full bg-green-500 hover:bg-green-600 text-white font-medium py-6 px-6 rounded-lg transition-colors duration-200 flex items-center justify-start">
					<span class="text-3xl mr-4">üë®‚Äçüíº</span>
					<div class="text-left">
						<div class="font-semibold text-lg">–ú–µ–Ω–µ–¥–∂–µ—Ä</div>
						<div class="text-sm opacity-90">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏</div>
					</div>
				</button>

				<button onclick="selectSpecialSection('delivery')" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-6 px-6 rounded-lg transition-colors duration-200 flex items-center justify-start">
					<span class="text-3xl mr-4">üöö</span>
					<div class="text-left">
						<div class="font-semibold text-lg">–î–æ—Å—Ç–∞–≤–∫–∞</div>
						<div class="text-sm opacity-90">–ú–æ–∏ –∑–∞–∫–∞–∑—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</div>
					</div>
				</button>
			`;

			// Display all sections
			sections.forEach(section => {
				const colors = getSectionColors(section.name);
				const description = getSectionDescription(section.name, section.poster_storage_id);
				const sectionId = section.id;
				const storageId = section.poster_storage_id;

				sectionsHtml += `
					<button onclick="selectSection('${sectionId}', '${section.name}', '${storageId || ''}')" class="w-full ${colors} text-white font-medium py-6 px-6 rounded-lg transition-colors duration-200 flex items-center justify-start">
						<span class="text-3xl mr-4">${section.emoji}</span>
						<div class="text-left">
							<div class="font-semibold text-lg">${section.name}</div>
							<div class="text-sm opacity-90">${description} ${section.custom_products_count ? '‚Ä¢ ' + section.custom_products_count + ' —Ç–æ–≤–∞—Ä–æ–≤' : ''}</div>
						</div>
					</button>
				`;
			});

			container.innerHTML = sectionsHtml;
		}
		
		function getSectionColors(deptName) {
			const name = deptName.toLowerCase();
			if (name.includes('–∫—É—Ö–Ω—è')) return 'bg-orange-500 hover:bg-orange-600';
			if (name.includes('–±–∞—Ä')) return 'bg-purple-500 hover:bg-purple-600';
			if (name.includes('–≥–æ—Ä–Ω–∏—á–Ω–∞—è')) return 'bg-pink-500 hover:bg-pink-600';
			if (name.includes('—Å–∫–ª–∞–¥')) return 'bg-gray-500 hover:bg-gray-600';
			if (name.includes('–æ—Ñ–∏—Å')) return 'bg-blue-500 hover:bg-blue-600';
			if (name.includes('—Ä–µ—Å–µ–ø—à–Ω')) return 'bg-indigo-500 hover:bg-indigo-600';
			return 'bg-teal-500 hover:bg-teal-600'; // Default color
		}
		
		function getSectionDescription(deptName, posterStorageId) {
			const name = deptName.toLowerCase();
			if (name.includes('–∫—É—Ö–Ω—è')) return '–ó–∞–∫–∞–∑—ã –¥–ª—è –∫—É—Ö–Ω–∏';
			if (name.includes('–±–∞—Ä')) return '–ó–∞–∫–∞–∑—ã –¥–ª—è –±–∞—Ä–∞';
			if (name.includes('–≥–æ—Ä–Ω–∏—á–Ω–∞—è')) return '–•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã';
			if (posterStorageId) return '–¢–æ–≤–∞—Ä—ã –∏–∑ Poster';
			return '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏';
		}
		
		function getSectionKey(deptName) {
			const name = deptName.toLowerCase();
			if (name.includes('–∫—É—Ö–Ω—è')) return 'kitchen';
			if (name.includes('–±–∞—Ä')) return 'bar';
			if (name.includes('–≥–æ—Ä–Ω–∏—á–Ω–∞—è')) return 'custom';
			if (name.includes('–æ—Ñ–∏—Å')) return '–æ—Ñ–∏—Å';
			// For custom departments, use a safe URL key
			return deptName.toLowerCase().replace(/[^a-z–∞-—è0-9]/g, '');
		}
		
		function selectSpecialSection(type) {
			console.log(`Selected special section: ${type}`);
			if (type === 'manager') {
				window.location.href = '/manager';
			} else if (type === 'delivery') {
				window.location.href = '/delivery';
			}
		}

		function selectSection(sectionId, sectionName = '', storageId = '') {
			console.log(`Selected section: ${sectionId}`, sectionName, storageId);

			// Redirect to custom page with section name
			window.location.href = `/custom?dept=${encodeURIComponent(sectionName)}`;
		}
		
		// Load sections when page loads
		document.addEventListener('DOMContentLoaded', () => {
			loadTenantInfo();
			loadSections();
		});
	</script>
</Layout>
