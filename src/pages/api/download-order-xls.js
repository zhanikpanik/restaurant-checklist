import * as XLSX from 'xlsx';
import { getAllOrders, readOrders } from '../../lib/orderStorage.js';

export const prerender = false;

export async function POST({ request }) {
    try {
        console.log('üì• Generating XLS for delivered order...');
        
        const { orderTimestamp, department } = await request.json();
        
        if (!orderTimestamp || !department) {
            throw new Error('Order timestamp and department are required');
        }
        
        // Validate department
        if (!['bar', 'kitchen'].includes(department)) {
            throw new Error('Invalid department: must be "bar" or "kitchen"');
        }
        
        console.log(`üì¶ Looking for order: ${orderTimestamp} in ${department}`);
        
        // Get orders from both localStorage data and server storage
        let targetOrder = null;
        
        // First try to get from server storage
        try {
            const serverOrders = await readOrders(department);
            targetOrder = serverOrders.find(order => order.timestamp === orderTimestamp);
            console.log(`üåê Server storage search: ${targetOrder ? 'found' : 'not found'}`);
        } catch (error) {
            console.warn('‚ö†Ô∏è Server storage unavailable:', error.message);
        }
        
        if (!targetOrder) {
            throw new Error(`Order not found: ${orderTimestamp} in ${department}`);
        }
        
        if (targetOrder.status !== 'delivered') {
            throw new Error('Order must be delivered to generate XLS');
        }
        
        console.log(`‚úÖ Found order with ${targetOrder.items?.length || 0} items`);
        
        // Create workbook for Poster import
        const workbook = XLSX.utils.book_new();
        
        // Format data for Poster Supply (–ü–æ—Å—Ç–∞–≤–∫–∞) format
        // Required Poster fields: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –§–∞—Å–æ–≤–∫–∞ (–∫–≥,–ª), –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¶–µ–Ω–∞
        const supplyData = [
            // Headers in Russian for Poster
            ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–§–∞—Å–æ–≤–∫–∞ (–∫–≥,–ª)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞'],
        ];
        
        // Add order items
        targetOrder.items.forEach(item => {
            supplyData.push([
                item.name || '',                    // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                item.unit || '—à—Ç',                 // –§–∞—Å–æ–≤–∫–∞ (–∫–≥,–ª)
                item.actualQuantity || item.quantity || 0,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (use actual if available)
                item.price || 0                    // –¶–µ–Ω–∞
            ]);
        });
        
        // Add summary row
        const totalQuantity = targetOrder.items.reduce((sum, item) => 
            sum + (item.actualQuantity || item.quantity || 0), 0
        );
        const totalPrice = targetOrder.items.reduce((sum, item) => 
            sum + ((item.actualQuantity || item.quantity || 0) * (item.price || 0)), 0
        );
        
        supplyData.push([]);  // Empty row
        supplyData.push(['–ò–¢–û–ì–û:', '', totalQuantity, totalPrice]);
        
        // Create worksheet
        const worksheet = XLSX.utils.aoa_to_sheet(supplyData);
        
        // Set column widths
        worksheet['!cols'] = [
            { width: 35 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            { width: 15 }, // –§–∞—Å–æ–≤–∫–∞ (–∫–≥,–ª)
            { width: 12 }, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            { width: 12 }  // –¶–µ–Ω–∞
        ];
        
        // Style the header row
        const headerRange = XLSX.utils.decode_range(worksheet['!ref']);
        for (let col = headerRange.s.c; col <= headerRange.e.c; col++) {
            const cellAddress = XLSX.utils.encode_cell({ r: 0, c: col });
            if (!worksheet[cellAddress]) continue;
            
            worksheet[cellAddress].s = {
                font: { bold: true },
                fill: { fgColor: { rgb: "E3F2FD" } },
                alignment: { horizontal: "center" }
            };
        }
        
        // Add order information sheet
        const orderDate = new Date(targetOrder.timestamp);
        const deliveredDate = targetOrder.deliveredAt ? new Date(targetOrder.deliveredAt) : orderDate;
        
        const orderInfoData = [
            ['–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ö–ê–ó–ï'],
            [''],
            ['–û—Ç–¥–µ–ª:', targetOrder.departmentName || (department === 'kitchen' ? '–ö—É—Ö–Ω—è' : '–ë–∞—Ä')],
            ['–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:', orderDate.toLocaleDateString('ru-RU')],
            ['–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:', orderDate.toLocaleTimeString('ru-RU')],
            ['–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveredDate.toLocaleDateString('ru-RU')],
            ['–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveredDate.toLocaleTimeString('ru-RU')],
            ['–ü–æ—Å—Ç–∞–≤—â–∏–∫:', targetOrder.supplier || '–ù–µ —É–∫–∞–∑–∞–Ω'],
            ['–°—Ç–∞—Ç—É—Å:', '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'],
            [''],
            ['–ò–¢–û–ì–û–í–´–ï –î–ê–ù–ù–´–ï'],
            ['–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π:', targetOrder.items.length],
            ['–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', totalQuantity],
            ['–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', totalPrice + ' ‚ÇΩ'],
            [''],
            ['–ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø POSTER:'],
            ['1. –û—Ç–∫—Ä–æ–π—Ç–µ Poster Dashboard'],
            ['2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –°–∫–ª–∞–¥ ‚Üí –ü–æ—Å—Ç–∞–≤–∫–∏'],
            ['3. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É"'],
            ['4. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'],
            ['5. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å—Ç–∞–≤–∫–∏'],
            ['6. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ª–∏—Å—Ç–∞ "–ü–æ—Å—Ç–∞–≤–∫–∞"'],
            ['7. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É']
        ];
        
        const orderInfoSheet = XLSX.utils.aoa_to_sheet(orderInfoData);
        orderInfoSheet['!cols'] = [{ width: 25 }, { width: 30 }];
        
        // Add worksheets to workbook
        XLSX.utils.book_append_sheet(workbook, worksheet, '–ü–æ—Å—Ç–∞–≤–∫–∞');
        XLSX.utils.book_append_sheet(workbook, orderInfoSheet, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
        
        // Generate Excel file
        const xlsxBuffer = XLSX.write(workbook, { 
            type: 'buffer', 
            bookType: 'xlsx',
            compression: true 
        });
        
        console.log(`‚úÖ Generated XLS for ${department} order with ${targetOrder.items.length} items`);
        
        return new Response(xlsxBuffer, {
            status: 200,
            headers: {
                'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'Content-Disposition': `attachment; filename="supply-${department}-${orderDate.toISOString().split('T')[0]}.xlsx"`
            }
        });
        
    } catch (error) {
        console.error('‚ùå Failed to generate order XLS:', error);
        return new Response(JSON.stringify({ 
            success: false, 
            error: error.message 
        }), {
            status: 500,
            headers: { 'Content-Type': 'application/json' }
        });
    }
}
