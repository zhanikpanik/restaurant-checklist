import * as XLSX from 'xlsx';

export const prerender = false;

export async function GET({ request }) {
    const url = new URL(request.url);
    const department = url.searchParams.get('department') || 'kitchen';
    
    try {
        console.log(`üì• Generating Excel template for ${department} supply...`);
        
        // Create workbook
        const workbook = XLSX.utils.book_new();
        
        // Create template data with the required fields: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –§–∞—Å–æ–≤–∫–∞, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¶–µ–Ω–∞
        const templateData = [
            // Headers in Russian
            ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–§–∞—Å–æ–≤–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞'],
            // Example rows
            ['–ú–æ–ª–æ–∫–æ', '–ª', 5, 80.50],
            ['–•–ª–µ–± –±–µ–ª—ã–π', '—à—Ç', 10, 45.00],
            ['–ú—è—Å–æ –≥–æ–≤—è–¥–∏–Ω–∞', '–∫–≥', 3, 850.00],
            ['–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å', '–∫–≥', 15, 35.00],
            ['–ú–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ', '–ª', 2, 120.00],
            // Empty rows for user input
            ['', '', '', ''],
            ['', '', '', ''],
            ['', '', '', ''],
            ['', '', '', ''],
            ['', '', '', '']
        ];
        
        // Create worksheet
        const worksheet = XLSX.utils.aoa_to_sheet(templateData);
        
        // Set column widths
        worksheet['!cols'] = [
            { width: 30 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            { width: 12 }, // –§–∞—Å–æ–≤–∫–∞ 
            { width: 12 }, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            { width: 12 }  // –¶–µ–Ω–∞
        ];
        
        // Style the header row
        const headerRange = XLSX.utils.decode_range(worksheet['!ref']);
        for (let col = headerRange.s.c; col <= headerRange.e.c; col++) {
            const cellAddress = XLSX.utils.encode_cell({ r: 0, c: col });
            if (!worksheet[cellAddress]) continue;
            
            worksheet[cellAddress].s = {
                font: { bold: true },
                fill: { fgColor: { rgb: "E3F2FD" } },
                alignment: { horizontal: "center" }
            };
        }
        
        // Add instructions as comments or additional sheet
        const instructionsData = [
            ['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é:'],
            [''],
            ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'],
            ['–§–∞—Å–æ–≤–∫–∞ - –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–∫–≥, –ª, —à—Ç, —É–ø–∞–∫ –∏ —Ç.–¥.)'],
            ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'],
            ['–¶–µ–Ω–∞ - –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞'],
            [''],
            ['–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:'],
            ['–ú–æ–ª–æ–∫–æ | –ª | 5 | 80.50'],
            ['–û–∑–Ω–∞—á–∞–µ—Ç: 5 –ª–∏—Ç—Ä–æ–≤ –º–æ–ª–æ–∫–∞ –ø–æ 80.50‚ÇΩ –∑–∞ –ª–∏—Ç—Ä'],
            [''],
            ['–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º–µ'],
            ['—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É (XLS)"']
        ];
        
        const instructionsSheet = XLSX.utils.aoa_to_sheet(instructionsData);
        instructionsSheet['!cols'] = [{ width: 50 }];
        
        // Add worksheets to workbook
        XLSX.utils.book_append_sheet(workbook, worksheet, '–ü–æ—Å—Ç–∞–≤–∫–∞');
        XLSX.utils.book_append_sheet(workbook, instructionsSheet, '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è');
        
        // Generate Excel file
        const xlsxBuffer = XLSX.write(workbook, { 
            type: 'buffer', 
            bookType: 'xlsx',
            compression: true 
        });
        
        console.log(`‚úÖ Generated supply template for ${department}`);
        
        return new Response(xlsxBuffer, {
            status: 200,
            headers: {
                'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'Content-Disposition': `attachment; filename="supply-template-${department}.xlsx"`
            }
        });
        
    } catch (error) {
        console.error('‚ùå Failed to generate template:', error);
        
        // Return error response
        return new Response(JSON.stringify({ 
            success: false, 
            error: error.message 
        }), {
            status: 500,
            headers: { 'Content-Type': 'application/json' }
        });
    }
}