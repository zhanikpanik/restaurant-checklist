---
import Layout from "../layouts/Layout.astro";
---

<style>
    /* Native app styling */
    .native-card {
        background: var(--card);
        border: 1px solid var(--border);
        border-radius: 12px;
        overflow: hidden;
        transition: all 0.2s;
    }

    .native-card:active {
        transform: scale(0.98);
    }

    .status-badge {
        padding: 0.375rem 0.875rem;
        border-radius: 999px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .btn-native {
        border-radius: 12px;
        padding: 1rem 1.5rem;
        font-weight: 500;
        transition: all 0.2s;
        -webkit-tap-highlight-color: transparent;
    }

    .btn-native:active {
        transform: scale(0.97);
    }

    .btn-native-sm {
        border-radius: 10px;
        padding: 0.625rem 1.25rem;
        font-weight: 500;
        transition: all 0.2s;
        -webkit-tap-highlight-color: transparent;
    }

    .btn-native-sm:active {
        transform: scale(0.97);
    }
</style>

<Layout title="Order Details - Restaurant System">
    <div class="min-h-screen bg-background">
        <!-- Native Mobile Header -->
        <div
            class="sticky top-0 z-40 bg-background/95 backdrop-blur-sm border-b"
        >
            <div class="flex items-center h-14 px-4">
                <a
                    href="/manager"
                    class="flex items-center justify-center w-10 h-10 -ml-2 rounded-full hover:bg-accent transition-colors"
                >
                    <svg
                        class="w-6 h-6"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M15 19l-7-7 7-7"></path>
                    </svg>
                </a>
                <h1 class="flex-1 text-lg font-semibold ml-2" id="orderTitle">
                    Загрузка...
                </h1>
                <span id="orderStatus" class="status-badge">
                    <!-- Status will be populated -->
                </span>
            </div>
        </div>

        <!-- Main Content -->
        <div class="px-4 py-4">
            <!-- Loading State -->
            <div id="loadingState" class="text-center py-12">
                <div
                    class="inline-block animate-spin rounded-full h-12 w-12 border-4 border-primary border-t-transparent"
                >
                </div>
                <p class="mt-4 text-muted-foreground">Загрузка заказа...</p>
            </div>

            <!-- Error State -->
            <div id="errorState" class="hidden text-center py-12">
                <div class="text-4xl mb-4">❌</div>
                <h3 class="text-lg font-semibold mb-2">Заказ не найден</h3>
                <p class="text-muted-foreground mb-4">
                    Заказ не существует или был удален
                </p>
                <a
                    href="/manager"
                    class="inline-flex items-center btn-native bg-primary text-primary-foreground hover:bg-primary/90"
                >
                    ← Вернуться к заказам
                </a>
            </div>

            <!-- Order Content -->
            <div id="orderContent" class="hidden space-y-3">
                <!-- Order Info Card -->
                <div class="native-card p-4">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <div class="text-xs text-muted-foreground mb-1">
                                Время заказа
                            </div>
                            <div class="text-base font-semibold" id="orderTime">
                                -
                            </div>
                        </div>
                        <div class="text-right">
                            <div class="text-xs text-muted-foreground mb-1">
                                Всего товаров
                            </div>
                            <div
                                class="text-base font-semibold"
                                id="orderTotalItems"
                            >
                                -
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Categories Section -->
                <div class="space-y-2">
                    <div id="categoryGroups">
                        <!-- Category groups will be populated here -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Assign Supplier Modal -->
        <div
            id="assignSupplierModal"
            class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center"
        >
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
                <div class="p-6 border-b">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-semibold">
                            Назначить поставщика
                        </h3>
                        <button
                            onclick="closeSupplierModal()"
                            class="text-gray-400 hover:text-gray-600">✕</button
                        >
                    </div>
                    <p
                        class="text-sm text-gray-600 mt-2"
                        id="supplierModalCategoryName"
                    >
                        Категория: -
                    </p>
                </div>

                <div class="p-6 max-h-96 overflow-y-auto">
                    <div id="suppliersList">
                        <!-- Loading spinner -->
                        <div class="text-center py-8">
                            <div
                                class="animate-spin h-8 w-8 border-b-2 border-blue-600 rounded-full mx-auto mb-4"
                            >
                            </div>
                            <p class="text-gray-600">Загрузка поставщиков...</p>
                        </div>
                    </div>
                </div>

                <div class="p-6 border-t">
                    <div class="flex space-x-3">
                        <button
                            onclick="assignSelectedSupplier()"
                            class="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg"
                            id="assignSupplierBtn"
                            disabled
                        >
                            Назначить
                        </button>
                        <button
                            onclick="closeSupplierModal()"
                            class="flex-1 px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-lg"
                        >
                            Отмена
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add Missing Products Modal - Mobile Native Design -->
        <div
            id="addMissingProductsModal"
            class="fixed inset-0 bg-black/50 z-50 hidden"
        >
            <!-- Mobile: Full screen, Desktop: Centered modal -->
            <div
                class="absolute inset-0 md:inset-auto md:top-1/2 md:left-1/2 md:-translate-x-1/2 md:-translate-y-1/2 bg-white md:rounded-2xl md:shadow-xl md:max-w-2xl md:w-full md:mx-4 md:max-h-[90vh] flex flex-col"
            >
                <!-- Compact Header with sticky position -->
                <div
                    class="sticky top-0 z-10 bg-white border-b flex items-center px-4 py-3"
                >
                    <button
                        onclick="closeAddMissingProductsModal()"
                        class="p-2 -ml-2 hover:bg-gray-100 rounded-full transition-colors"
                    >
                        <svg
                            class="w-5 h-5"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                    <h3 class="flex-1 text-center text-base font-semibold pr-9">
                        ➕ Добавить товары
                    </h3>
                </div>

                <!-- Section Tabs - Sticky horizontal scroll -->
                <div class="sticky top-[53px] z-10 bg-white border-b">
                    <div
                        id="sectionTabsContainer"
                        class="flex gap-2 px-4 py-2 overflow-x-auto scrollbar-hide"
                    >
                        <!-- Tabs will be loaded dynamically -->
                        <div
                            class="flex items-center gap-2 text-gray-500 text-sm py-1"
                        >
                            <div
                                class="animate-spin h-4 w-4 border-2 border-gray-400 border-t-transparent rounded-full"
                            >
                            </div>
                            <span>Загрузка...</span>
                        </div>
                    </div>
                </div>

                <!-- Search Bar - Compact and sticky -->
                <div
                    class="sticky top-[105px] z-10 bg-white px-4 py-2 border-b"
                >
                    <input
                        type="text"
                        id="missingProductsSearch"
                        placeholder="🔍 Поиск..."
                        class="w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary bg-gray-50"
                        oninput="filterMissingProducts()"
                    />
                </div>

                <!-- Products List - Takes all remaining space -->
                <div class="flex-1 overflow-y-auto">
                    <div id="missingProductsList" class="px-4 py-3 space-y-2">
                        <div class="text-center text-gray-500 py-12">
                            <span class="text-4xl mb-2 block">📦</span>
                            <p class="text-sm">Выберите отдел</p>
                        </div>
                    </div>
                </div>

                <!-- Fixed Bottom Button - Native mobile style -->
                <div
                    class="sticky bottom-0 bg-white border-t px-4 py-3 safe-area-inset-bottom"
                >
                    <button
                        onclick="addSelectedMissingProducts()"
                        class="w-full py-3 bg-primary text-primary-foreground font-medium rounded-xl active:scale-98 transition-transform disabled:opacity-50 disabled:cursor-not-allowed"
                        id="addMissingProductsSubmitBtn"
                        disabled
                    >
                        ➕ Добавить выбранные
                    </button>
                </div>
            </div>
        </div>

        <style>
            /* Hide scrollbar for section tabs */
            .scrollbar-hide::-webkit-scrollbar {
                display: none;
            }
            .scrollbar-hide {
                -ms-overflow-style: none;
                scrollbar-width: none;
            }

            /* Active scale animation */
            .active\:scale-98:active {
                transform: scale(0.98);
            }

            /* Safe area for iOS devices */
            @supports (padding-bottom: env(safe-area-inset-bottom)) {
                .safe-area-inset-bottom {
                    padding-bottom: calc(0.75rem + env(safe-area-inset-bottom));
                }
            }
        </style>
    </div>

    <script is:inline>
        // Global variables
        let currentOrderData = null;
        let currentOrderDate = null;
        let currentMissingProductsSection = null;
        let allMissingProducts = [];
        let filteredMissingProducts = [];
        let selectedMissingProducts = {};

        // Supplier assignment variables
        let currentAssignCategoryId = null;
        let currentAssignCategoryName = null;
        let selectedSupplierId = null;
        let availableSuppliers = [];

        // Get order ID from URL parameters
        function getOrderIdFromURL() {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get("orderId");
        }

        // Load order details
        async function loadOrderDetails() {
            const orderId = getOrderIdFromURL();
            if (!orderId) {
                showErrorState();
                return;
            }

            showLoadingState();

            try {
                const response = await fetch("/api/orders-by-category");
                const data = await response.json();

                if (data.success && data.data) {
                    // Find the order with the specific ID
                    const orderForId = data.data.find(
                        (order) =>
                            order.orderId.toString() === orderId.toString(),
                    );

                    if (orderForId) {
                        currentOrderData = orderForId;
                        currentOrderDate = orderForId.timestamp; // Keep for compatibility with missing products
                        displayOrderDetails(orderForId);
                        showOrderContent();
                    } else {
                        showErrorState();
                    }
                } else {
                    showErrorState();
                }
            } catch (error) {
                console.error("Error loading order details:", error);
                showErrorState();
            }
        }

        // Display order details
        function displayOrderDetails(orderData) {
            // Update title
            document.getElementById("orderTitle").textContent =
                `${orderData.departmentEmoji} #${orderData.orderId}`;

            // Update status
            const statusEl = document.getElementById("orderStatus");
            const statusColors = {
                pending: "bg-yellow-100 text-yellow-800",
                sent: "bg-blue-100 text-blue-800",
                delivered: "bg-green-100 text-green-800",
            };
            const statusText =
                orderData.status === "pending"
                    ? "Ожидает"
                    : orderData.status === "sent"
                      ? "Отправлен"
                      : "Доставлен";

            statusEl.textContent = statusText;
            statusEl.className = `status-badge ${statusColors[orderData.status] || "bg-gray-100 text-gray-800"}`;

            // Update order time and total items
            document.getElementById("orderTime").textContent =
                orderData.displayDate;
            document.getElementById("orderTotalItems").textContent =
                orderData.totalItems;

            // Display category groups
            displayCategoryGroups(orderData);
        }

        // Display category groups
        function displayCategoryGroups(orderData) {
            const container = document.getElementById("categoryGroups");

            let html = "";

            // Display each category separately
            orderData.categories.forEach((category) => {
                const hasSupplier = category.supplier && category.supplier.name;
                const supplierInfo = category.supplier || {};
                const hasPhone = hasSupplier && supplierInfo.phone;

                html += `
					<div class="native-card">
						<div class="p-4 space-y-3">
							<!-- Category Header -->
							<div class="flex items-start justify-between gap-2">
								<div class="flex-1 min-w-0">
									<h3 class="font-semibold text-base mb-1">🏷️ ${category.categoryName}</h3>
									<div class="text-xs text-muted-foreground">
										${
                                            hasSupplier
                                                ? `
											📦 ${supplierInfo.name}${hasPhone ? ` • 📱 ${supplierInfo.phone}` : ' • <span class="text-destructive">⚠️ Нет телефона</span>'}
										`
                                                : `
											<span class="text-destructive">⚠️ Без поставщика</span>
										`
                                        }
									</div>
								</div>
								<div class="text-xs text-muted-foreground bg-secondary px-2 py-1 rounded-full">
									${category.items.length} ${category.items.length === 1 ? "товар" : category.items.length < 5 ? "товара" : "товаров"}
								</div>
							</div>

							<!-- Items -->
							<div class="space-y-1">
								${category.items
                                    .map(
                                        (item) => `
									<div class="flex justify-between items-center bg-secondary/50 rounded-lg px-3 py-2">
										<span class="text-sm truncate mr-2">${item.name}</span>
										<span class="text-sm font-medium whitespace-nowrap">${item.quantity} ${item.unit}</span>
									</div>
								`,
                                    )
                                    .join("")}
							</div>

							<!-- Action Buttons -->
							<div class="flex gap-2">
								${
                                    hasSupplier && hasPhone
                                        ? `
									<button
										onclick="sendSupplierOrder('${orderData.orderId}', [${category.categoryId}], '${supplierInfo.name}', ${supplierInfo.id})"
										class="flex-1 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-xl py-3 px-5 transition-all active:scale-95"
									>
										📱 Отправить поставщику
									</button>
								`
                                        : hasSupplier && !hasPhone
                                          ? `
									<button
										disabled
										class="flex-1 bg-secondary text-muted-foreground cursor-not-allowed text-sm font-medium rounded-xl py-3 px-5"
									>
										📱 Нет телефона
									</button>
								`
                                          : `
									<button
										onclick="assignSupplierToCategory(${category.categoryId}, '${category.categoryName}')"
										class="flex-1 bg-yellow-500 hover:bg-yellow-600 text-white text-sm font-medium rounded-xl py-3 px-5 transition-all active:scale-95"
									>
										Назначить поставщика
									</button>
								`
                                }
							</div>
						</div>
					</div>
				`;
            });

            // Add missing products button after all categories
            html += `
				<div class="text-center pt-2">
					<button
						id="addMissingProductsBtn"
						onclick="openAddMissingProductsModal()"
						class="w-full bg-primary text-primary-foreground hover:bg-primary/90 font-medium rounded-xl py-4 px-6 transition-all active:scale-95"
					>
						➕ Добавить недостающие товары
					</button>
				</div>
			`;

            container.innerHTML = html;
        }

        // Send order to supplier
        async function sendSupplierOrder(
            orderId,
            categoryIds,
            supplierName,
            supplierId,
        ) {
            console.log(
                `📤 Sending order to supplier: ${supplierName} for order: ${orderId}`,
            );

            try {
                if (!currentOrderData) {
                    throw new Error("Order data not loaded");
                }

                // Find all categories for this supplier
                const categories = currentOrderData.categories.filter((cat) =>
                    categoryIds.includes(cat.categoryId),
                );

                if (categories.length === 0) {
                    throw new Error("No categories found");
                }

                // Get supplier phone from first category
                const supplierPhone = categories[0].supplier?.phone;
                if (!supplierPhone) {
                    throw new Error("Supplier phone number not found");
                }

                // Generate consolidated WhatsApp message
                let message = `📋 Заказ товаров - ${currentOrderData.displayDate}\n\n`;
                message += `📦 Поставщик: ${supplierName}\n\n`;

                categories.forEach((category) => {
                    message += `🏪 ${category.categoryName}:\n`;
                    category.items.forEach((item) => {
                        message += `• ${item.name} - ${item.quantity} ${item.unit}\n`;
                    });
                    message += `\n`;
                });

                const totalItems = categories.reduce(
                    (sum, cat) => sum + cat.items.length,
                    0,
                );
                message += `📊 Итого: ${totalItems} товаров из ${categories.length} ${categories.length === 1 ? "категории" : "категорий"}`;

                // Send via WhatsApp
                const encodedMessage = encodeURIComponent(message);
                const isMobile =
                    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
                        navigator.userAgent,
                    );

                let whatsappUrl;
                if (isMobile) {
                    whatsappUrl = `whatsapp://send?phone=${supplierPhone}&text=${encodedMessage}`;
                } else {
                    whatsappUrl = `https://web.whatsapp.com/send?phone=${supplierPhone}&text=${encodedMessage}`;
                }

                // Try to open WhatsApp
                const whatsappWindow = window.open(whatsappUrl, "_blank");

                // If popup was blocked, show manual instructions
                if (
                    !whatsappWindow ||
                    whatsappWindow.closed ||
                    typeof whatsappWindow.closed === "undefined"
                ) {
                    const copyMessage = confirm(
                        "❌ Не удалось открыть WhatsApp автоматически.\n\n" +
                            `Телефон: ${supplierPhone}\n\n` +
                            "Нажмите OK, чтобы скопировать текст заказа в буфер обмена.",
                    );

                    if (copyMessage) {
                        navigator.clipboard
                            .writeText(message)
                            .then(() => {
                                alert(
                                    `✅ Текст заказа скопирован!\n\nОткройте WhatsApp вручную и отправьте на номер:\n${supplierPhone}`,
                                );
                            })
                            .catch(() => {
                                alert(
                                    `Телефон: ${supplierPhone}\n\nТекст заказа:\n\n${message}`,
                                );
                            });
                    }
                }

                // Update database for all categories
                const promises = categoryIds.map((categoryId) =>
                    fetch("/api/send-category-to-supplier", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            categoryId: categoryId,
                            supplierId: supplierId,
                        }),
                    }),
                );

                const responses = await Promise.all(promises);
                const results = await Promise.all(
                    responses.map((r) => r.json()),
                );

                const successCount = results.filter((r) => r.success).length;
                const failCount = results.filter((r) => !r.success).length;

                if (successCount > 0) {
                    alert(
                        `✅ Отправлено ${successCount} ${successCount === 1 ? "категория" : "категорий"} через WhatsApp: ${supplierName}`,
                    );
                    loadOrderDetails(); // Refresh the display
                }

                if (failCount > 0) {
                    alert(
                        `⚠️ ${failCount} ${failCount === 1 ? "категорию" : "категорий"} не удалось обновить в БД`,
                    );
                }
            } catch (error) {
                console.error("❌ Error sending order:", error);
                alert(
                    "Ошибка при отправке заказа поставщику: " + error.message,
                );
            }
        }

        // Assign supplier to category
        async function assignSupplierToCategory(categoryId, categoryName) {
            currentAssignCategoryId = categoryId;
            currentAssignCategoryName = categoryName;
            selectedSupplierId = null;

            // Open modal
            document
                .getElementById("assignSupplierModal")
                .classList.remove("hidden");
            document.getElementById("supplierModalCategoryName").textContent =
                `Категория: ${categoryName}`;

            // Load suppliers
            await loadSuppliersForAssignment();
        }

        // Load suppliers for assignment
        async function loadSuppliersForAssignment() {
            const container = document.getElementById("suppliersList");

            container.innerHTML = `
                <div class="text-center py-8">
                    <div class="animate-spin h-8 w-8 border-b-2 border-blue-600 rounded-full mx-auto mb-4"></div>
                    <p class="text-gray-600">Загрузка поставщиков...</p>
                </div>
            `;

            try {
                const response = await fetch("/api/suppliers");
                const data = await response.json();

                if (data.success && data.data) {
                    availableSuppliers = data.data;
                    displaySuppliersList();
                } else {
                    throw new Error(data.error || "Failed to load suppliers");
                }
            } catch (error) {
                console.error("Error loading suppliers:", error);
                container.innerHTML = `
                    <div class="text-center py-8">
                        <span class="text-4xl mb-2 block">❌</span>
                        <p class="text-red-600">Ошибка загрузки поставщиков</p>
                        <p class="text-sm text-gray-500">${error.message}</p>
                    </div>
                `;
            }
        }

        // Display suppliers list
        function displaySuppliersList() {
            const container = document.getElementById("suppliersList");

            if (availableSuppliers.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-8">
                        <span class="text-4xl mb-2 block">📭</span>
                        <p class="text-gray-600">Нет доступных поставщиков</p>
                        <p class="text-sm text-gray-500 mt-2">Добавьте поставщиков в разделе "Менеджер"</p>
                    </div>
                `;
                return;
            }

            // Clear container first
            container.innerHTML = "";

            const wrapper = document.createElement("div");
            wrapper.className = "space-y-2";

            availableSuppliers.forEach((supplier) => {
                const hasPhone = supplier.phone && supplier.phone.trim() !== "";
                const isSelected = selectedSupplierId === supplier.id;

                const label = document.createElement("label");
                label.className = `flex items-start p-3 border rounded-lg cursor-pointer transition-all ${isSelected ? "bg-blue-50 border-blue-500" : "bg-gray-50 border-gray-200 hover:border-blue-300"}`;

                // Create radio button
                const radio = document.createElement("input");
                radio.type = "radio";
                radio.name = "supplier";
                radio.value = supplier.id;
                radio.checked = isSelected;
                radio.className = "mt-1 mr-3 h-4 w-4 text-blue-600";
                radio.addEventListener("change", function () {
                    selectSupplierForAssignment(supplier.id);
                });

                // Create content div
                const contentDiv = document.createElement("div");
                contentDiv.className = "flex-1";

                // Supplier name
                const nameDiv = document.createElement("div");
                nameDiv.className = "font-medium text-gray-900";
                nameDiv.textContent = supplier.name;
                contentDiv.appendChild(nameDiv);

                // Phone or no phone warning
                const phoneDiv = document.createElement("div");
                phoneDiv.className = hasPhone
                    ? "text-sm text-gray-600 mt-1"
                    : "text-sm text-red-600 mt-1";
                phoneDiv.textContent = hasPhone
                    ? `📱 ${supplier.phone}`
                    : "⚠️ Нет телефона";
                contentDiv.appendChild(phoneDiv);

                // Contact info if exists
                if (supplier.contact_info) {
                    const contactDiv = document.createElement("div");
                    contactDiv.className = "text-xs text-gray-500 mt-1";
                    contactDiv.textContent = supplier.contact_info;
                    contentDiv.appendChild(contactDiv);
                }

                label.appendChild(radio);
                label.appendChild(contentDiv);
                wrapper.appendChild(label);
            });

            container.appendChild(wrapper);
        }

        // Select supplier for assignment
        function selectSupplierForAssignment(supplierId) {
            console.log(
                "Selected supplier ID:",
                supplierId,
                "Type:",
                typeof supplierId,
            );
            selectedSupplierId = supplierId;

            // Enable assign button
            const btn = document.getElementById("assignSupplierBtn");
            btn.disabled = false;

            console.log(
                "Supplier selected successfully. Button disabled:",
                btn.disabled,
            );
        }

        // Assign selected supplier
        async function assignSelectedSupplier() {
            console.log("Attempting to assign:", {
                selectedSupplierId,
                currentAssignCategoryId,
                selectedSupplierIdType: typeof selectedSupplierId,
                currentAssignCategoryIdType: typeof currentAssignCategoryId,
            });

            if (!selectedSupplierId || !currentAssignCategoryId) {
                alert("Пожалуйста, выберите поставщика");
                return;
            }

            const btn = document.getElementById("assignSupplierBtn");
            const originalText = btn.textContent;
            btn.disabled = true;
            btn.textContent = "⏳ Назначение...";

            try {
                const response = await fetch("/api/category-suppliers", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        categoryId: currentAssignCategoryId,
                        supplierId: selectedSupplierId,
                    }),
                });

                const data = await response.json();

                if (data.success) {
                    const supplier = availableSuppliers.find(
                        (s) => s.id === selectedSupplierId,
                    );
                    alert(
                        `✅ Поставщик "${supplier.name}" успешно назначен для категории "${currentAssignCategoryName}"`,
                    );
                    closeSupplierModal();

                    // Reload order details to show updated supplier
                    await loadOrderDetails();
                } else {
                    throw new Error(data.error || "Failed to assign supplier");
                }
            } catch (error) {
                console.error("Error assigning supplier:", error);
                alert("Ошибка при назначении поставщика: " + error.message);
                btn.disabled = false;
                btn.textContent = originalText;
            }
        }

        // Close supplier modal
        function closeSupplierModal() {
            document
                .getElementById("assignSupplierModal")
                .classList.add("hidden");
            currentAssignCategoryId = null;
            currentAssignCategoryName = null;
            selectedSupplierId = null;
            availableSuppliers = [];
        }

        // Edit supplier for categories
        function editSupplierForCategories(
            supplierId,
            supplierName,
            categoryIds,
        ) {
            alert(
                `Функция редактирования поставщика "${supplierName}" для ${categoryIds.length} категорий будет добавлена позже.`,
            );
            // TODO: Implement bulk supplier editing modal
        }

        // Missing Products Modal Functions (similar to manager.astro)
        async function openAddMissingProductsModal() {
            document
                .getElementById("addMissingProductsModal")
                .classList.remove("hidden");
            // Reset state
            currentMissingProductsSection = null;
            allMissingProducts = [];
            filteredMissingProducts = [];
            selectedMissingProducts = {};
            document.getElementById("missingProductsSearch").value = "";
            updateMissingProductsButton();

            // Load sections dynamically
            await loadSectionTabs();
        }

        // Load section tabs dynamically from API
        async function loadSectionTabs() {
            const container = document.getElementById("sectionTabsContainer");

            try {
                const response = await fetch("/api/sections");
                const data = await response.json();

                if (data.success && data.data && data.data.length > 0) {
                    let tabsHtml = "";

                    data.data.forEach((section, index) => {
                        const sectionId = section.id;
                        const sectionName = section.name;
                        const emoji = section.emoji || "📦";

                        tabsHtml += `
                            <button
                                onclick="loadMissingProductsSection(${sectionId}, '${sectionName.replace(/'/g, "\\'")}')"
                                class="section-btn flex-shrink-0 px-3 py-1.5 text-sm font-medium rounded-full bg-gray-100 hover:bg-primary hover:text-primary-foreground transition-colors whitespace-nowrap"
                                data-section-id="${sectionId}"
                            >
                                ${emoji} ${sectionName}
                            </button>
                        `;
                    });

                    container.innerHTML = tabsHtml;
                } else {
                    container.innerHTML = `
                        <div class="w-full text-center text-gray-500 py-4">
                            <p class="text-sm">Отделы не найдены</p>
                            <p class="text-xs mt-1">Синхронизируйте секции из Poster</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error("Error loading sections:", error);
                container.innerHTML = `
                    <div class="w-full text-center text-red-500 py-4">
                        <p class="text-sm">Ошибка загрузки отделов</p>
                    </div>
                `;
            }
        }

        function closeAddMissingProductsModal() {
            document
                .getElementById("addMissingProductsModal")
                .classList.add("hidden");
        }

        async function loadMissingProductsSection(sectionId, sectionName) {
            currentMissingProductsSection = {
                id: sectionId,
                name: sectionName,
            };

            // Update tab states - reset all tabs
            document.querySelectorAll(".section-btn").forEach((btn) => {
                btn.classList.remove("bg-primary", "text-primary-foreground");
                btn.classList.add("bg-gray-100");
            });

            // Highlight selected tab
            const selectedTab = document.querySelector(
                `[data-section-id="${sectionId}"]`,
            );
            if (selectedTab) {
                selectedTab.classList.remove("bg-gray-100");
                selectedTab.classList.add(
                    "bg-primary",
                    "text-primary-foreground",
                );
            }

            const container = document.getElementById("missingProductsList");
            container.innerHTML = `
				<div class="text-center text-gray-500 py-8">
					<div class="animate-spin h-8 w-8 border-b-2 border-green-600 rounded-full mx-auto mb-4"></div>
					<p>Загрузка товаров...</p>
				</div>
			`;

            try {
                // Load products from this section
                const apiUrl = `/api/section-products?section_id=${sectionId}`;
                const response = await fetch(apiUrl);
                const data = await response.json();

                if (data.success) {
                    allMissingProducts = data.data || [];
                    filteredMissingProducts = [...allMissingProducts];
                    displayMissingProducts();
                } else {
                    throw new Error(data.error || "Failed to load products");
                }
            } catch (error) {
                console.error("Error loading missing products:", error);
                container.innerHTML = `
					<div class="text-center text-red-500 py-8">
						<span class="text-4xl mb-2 block">❌</span>
						<p>Ошибка загрузки товаров</p>
						<p class="text-sm text-gray-500">${error.message}</p>
					</div>
				`;
            }
        }

        function displayMissingProducts() {
            const container = document.getElementById("missingProductsList");

            if (filteredMissingProducts.length === 0) {
                container.innerHTML = `
					<div class="text-center text-gray-500 py-12">
						<span class="text-4xl mb-2 block">🔍</span>
						<p>Товары не найдены</p>
					</div>
				`;
                return;
            }

            let html = "";
            filteredMissingProducts.forEach((product) => {
                const productId = product.id || product.product_id;
                const productName =
                    product.name || product.product_name || product.title;
                const productUnit = product.unit || "шт";
                const quantity =
                    selectedMissingProducts[productId]?.quantity || 0;

                html += `
					<div class="bg-white py-4 border-b last:border-b-0" data-product-id="${productId}">
						<div class="flex items-center justify-between w-full">
							<div class="flex-1 min-w-0">
								<h3 class="text-base font-medium text-gray-900 truncate">${productName}</h3>
							</div>
							<div class="flex items-center justify-end ml-3">
								<!-- Inline quantity controls: - [input with unit] + -->
								<div class="flex items-center bg-gray-100 rounded-lg border border-gray-300">
									<button
										class="px-2 h-10 bg-gray-100 hover:bg-gray-200 active:bg-gray-300 text-gray-700 flex items-center justify-center text-2xl font-normal transition-colors duration-150 rounded-l-lg"
										onclick="updateMissingProductQuantity(${productId}, '${productName}', '${productUnit}', ${quantity - 0.5})"
										title="Уменьшить на 0.5 ${productUnit}"
										type="button"
									>
										−
									</button>
									<div class="relative">
										<input
											type="text"
											inputmode="decimal"
											class="w-16 px-2 py-2 border-0 focus:outline-none focus:ring-0 text-center bg-gray-100 text-sm font-medium"
											placeholder="0"
											value="${quantity > 0 ? quantity + " " + productUnit : ""}"
											data-product-id="${productId}"
											onchange="updateMissingProductQuantityFromInput(${productId}, '${productName}', '${productUnit}', this.value)"
										/>
									</div>
									<button
										class="px-2 h-10 bg-gray-100 hover:bg-gray-200 active:bg-gray-300 text-gray-700 flex items-center justify-center text-2xl font-normal transition-colors duration-150 rounded-r-lg"
										onclick="updateMissingProductQuantity(${productId}, '${productName}', '${productUnit}', ${quantity + 0.5})"
										title="Добавить 0.5 ${productUnit}"
										type="button"
									>
										+
									</button>
								</div>
							</div>
						</div>
					</div>
				`;
            });

            container.innerHTML = html;
        }

        function updateMissingProductQuantity(
            productId,
            productName,
            unit,
            newQuantity,
        ) {
            const quantity = Math.max(0, parseFloat(newQuantity) || 0);

            if (quantity > 0) {
                selectedMissingProducts[productId] = {
                    id: productId,
                    name: productName,
                    unit: unit,
                    quantity: quantity,
                    section: currentMissingProductsSection,
                };
            } else {
                delete selectedMissingProducts[productId];
            }

            displayMissingProducts();
            updateMissingProductsButton();
        }

        function updateMissingProductQuantityFromInput(
            productId,
            productName,
            unit,
            inputValue,
        ) {
            const numericValue =
                parseFloat(inputValue.replace(/[^\d.]/g, "")) || 0;
            updateMissingProductQuantity(
                productId,
                productName,
                unit,
                numericValue,
            );
        }

        function filterMissingProducts() {
            const searchTerm = document
                .getElementById("missingProductsSearch")
                .value.toLowerCase();

            if (!searchTerm) {
                filteredMissingProducts = [...allMissingProducts];
            } else {
                filteredMissingProducts = allMissingProducts.filter(
                    (product) => {
                        const productName =
                            product.name ||
                            product.product_name ||
                            product.title ||
                            "";
                        return productName.toLowerCase().includes(searchTerm);
                    },
                );
            }

            displayMissingProducts();
        }

        function updateMissingProductsButton() {
            const btn = document.getElementById("addMissingProductsSubmitBtn");
            const selectedCount = Object.keys(selectedMissingProducts).length;

            if (selectedCount > 0) {
                btn.disabled = false;
                btn.textContent = `➕ Добавить выбранные (${selectedCount})`;
            } else {
                btn.disabled = true;
                btn.textContent = "➕ Добавить выбранные";
            }
        }

        async function addSelectedMissingProducts() {
            const selectedCount = Object.keys(selectedMissingProducts).length;
            if (selectedCount === 0) return;

            const btn = document.getElementById("addMissingProductsSubmitBtn");
            const originalText = btn.textContent;
            btn.disabled = true;
            btn.textContent = "⏳ Добавление...";

            try {
                // Create order items from selected products
                const orderItems = Object.values(selectedMissingProducts).map(
                    (product) => ({
                        name: product.name,
                        quantity: product.quantity,
                        unit: product.unit,
                    }),
                );

                // Create a new order with these items for the specific date
                const orderData = {
                    department:
                        currentMissingProductsSection?.name || "manager",
                    items: orderItems,
                    status: "pending",
                    created_by: "manager",
                    created_at: new Date(currentOrderDate).toISOString(),
                };

                const response = await fetch("/api/orders", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(orderData),
                });

                const data = await response.json();

                if (data.success) {
                    alert(
                        `Успешно добавлено ${selectedCount} товаров в заказ!`,
                    );
                    closeAddMissingProductsModal();
                    // Refresh order details
                    loadOrderDetails();
                } else {
                    throw new Error(data.error || "Failed to add products");
                }
            } catch (error) {
                console.error("Error adding missing products:", error);
                alert("Ошибка при добавлении товаров: " + error.message);
                btn.disabled = false;
                btn.textContent = originalText;
            }
        }

        // UI State Functions
        function showLoadingState() {
            document.getElementById("loadingState").classList.remove("hidden");
            document.getElementById("errorState").classList.add("hidden");
            document.getElementById("orderContent").classList.add("hidden");
        }

        function showErrorState() {
            document.getElementById("loadingState").classList.add("hidden");
            document.getElementById("errorState").classList.remove("hidden");
            document.getElementById("orderContent").classList.add("hidden");
        }

        function showOrderContent() {
            document.getElementById("loadingState").classList.add("hidden");
            document.getElementById("errorState").classList.add("hidden");
            document.getElementById("orderContent").classList.remove("hidden");
        }

        // Initialize page
        document.addEventListener("DOMContentLoaded", function () {
            loadOrderDetails();
        });
    </script>
</Layout>
