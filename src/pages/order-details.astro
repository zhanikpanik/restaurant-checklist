---
import Layout from "../layouts/Layout.astro";
---

<style>
    /* Animations */
    @keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    @keyframes shimmer {
        0% {
            background-position: -1000px 0;
        }
        100% {
            background-position: 1000px 0;
        }
    }

    .animate-in {
        animation: slideInUp 0.4s ease-out;
    }

    .fade-in {
        animation: fadeIn 0.3s ease-out;
    }

    /* Native app styling */
    .native-card {
        background: var(--card);
        border: 1px solid var(--border);
        border-radius: 12px;
        overflow: hidden;
        transition: all 0.2s;
    }

    .native-card:active {
        transform: scale(0.98);
    }

    .native-card:hover {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .status-badge {
        padding: 0.375rem 0.875rem;
        border-radius: 999px;
        font-size: 0.875rem;
        font-weight: 500;
        transition: all 0.2s;
    }

    .btn-native {
        border-radius: 12px;
        padding: 1rem 1.5rem;
        font-weight: 500;
        transition: all 0.2s;
        -webkit-tap-highlight-color: transparent;
    }

    .btn-native:active {
        transform: scale(0.97);
    }

    .btn-native-sm {
        border-radius: 10px;
        padding: 0.625rem 1.25rem;
        font-weight: 500;
        transition: all 0.2s;
        -webkit-tap-highlight-color: transparent;
    }

    .btn-native-sm:active {
        transform: scale(0.97);
    }

    /* Responsive Table Styles */
    .category-section {
        background: var(--card);
        border: 1px solid var(--border);
        border-radius: 12px;
        overflow: hidden;
        margin-bottom: 0.75rem;
    }

    .category-header {
        padding: 1rem;
        border-bottom: 1px solid var(--border);
        background: var(--background);
    }

    .category-header-btn {
        width: 100%;
        text-align: left;
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 0.5rem;
    }

    .category-toggle-icon {
        transition: transform 0.2s;
        flex-shrink: 0;
    }

    .category-toggle-icon.expanded {
        transform: rotate(180deg);
    }

    /* Desktop Table */
    .order-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }

    .order-table thead {
        background: var(--muted);
        position: sticky;
        top: 0;
        z-index: 5;
    }

    .order-table th {
        padding: 0.75rem 1rem;
        text-align: left;
        font-size: 0.75rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        color: var(--muted-foreground);
        border-bottom: 1px solid var(--border);
    }

    .order-table th:first-child {
        width: 50px;
        text-align: center;
    }

    .order-table th:nth-child(3) {
        width: 120px;
        text-align: right;
    }

    .order-table th:nth-child(4) {
        width: 100px;
    }

    .order-table tbody tr {
        transition: background-color 0.1s;
    }

    .order-table tbody tr:nth-child(even) {
        background: hsl(var(--muted) / 0.3);
    }

    .order-table tbody tr:hover {
        background: hsl(var(--accent) / 0.5);
    }

    .order-table td {
        padding: 0.75rem 1rem;
        font-size: 0.875rem;
        border-bottom: 1px solid var(--border);
    }

    .order-table td:first-child {
        text-align: center;
        color: var(--muted-foreground);
        font-size: 0.75rem;
    }

    .order-table td:nth-child(3) {
        text-align: right;
        font-weight: 600;
        font-size: 1rem;
    }

    .order-table td:nth-child(4) {
        color: var(--muted-foreground);
    }

    /* Mobile List */
    .item-list-mobile {
        display: none;
    }

    .item-row-mobile {
        display: flex;
        justify-content: space-between;
        align-items: center;
        min-height: 48px;
        padding: 0.75rem 1rem;
        border-bottom: 1px solid var(--border);
        transition: background-color 0.1s;
        -webkit-tap-highlight-color: transparent;
    }

    .item-row-mobile:last-child {
        border-bottom: none;
    }

    .item-row-mobile:active {
        background: hsl(var(--accent) / 0.3);
    }

    .item-name-mobile {
        flex: 1;
        font-size: 0.875rem;
        font-weight: 500;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        margin-right: 1rem;
    }

    .item-quantity-mobile {
        font-size: 1rem;
        font-weight: 600;
        white-space: nowrap;
        flex-shrink: 0;
    }

    .category-items-container {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease-out;
    }

    .category-items-container.expanded {
        max-height: 5000px;
    }

    /* Mobile Responsive */
    @media (max-width: 768px) {
        .order-table {
            display: none;
        }

        .item-list-mobile {
            display: block;
        }

        .category-header {
            padding: 0.75rem;
        }

        .category-section {
            border-radius: 8px;
        }
    }
</style>

<Layout title="Order Details - Restaurant System">
    <div class="min-h-screen bg-background">
        <!-- Native Mobile Header -->
        <div
            class="sticky top-0 z-40 bg-background/95 backdrop-blur-sm border-b shadow-sm"
        >
            <div class="flex items-center h-14 px-4">
                <a
                    href="/manager"
                    class="flex items-center justify-center w-10 h-10 -ml-2 rounded-full hover:bg-accent transition-all duration-200 active:scale-95"
                >
                    <svg
                        class="w-6 h-6"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M15 19l-7-7 7-7"></path>
                    </svg>
                </a>
                <h1
                    class="flex-1 text-lg font-semibold ml-2 truncate"
                    id="orderTitle"
                >
                    Загрузка...
                </h1>
                <span
                    id="orderStatus"
                    class="status-badge animate-in fade-in duration-300"
                >
                    <!-- Status will be populated -->
                </span>
            </div>
        </div>

        <!-- Main Content -->
        <div class="px-4 py-4">
            <!-- Loading State -->
            <div
                id="loadingState"
                class="text-center py-12 animate-in fade-in duration-500"
            >
                <div class="flex flex-col items-center gap-4">
                    <div
                        class="inline-block animate-spin rounded-full h-16 w-16 border-4 border-primary/20 border-t-primary"
                    >
                    </div>
                    <div class="space-y-2">
                        <p class="text-base font-medium">Загрузка заказа...</p>
                        <div class="flex gap-1 justify-center">
                            <div
                                class="w-2 h-2 bg-primary rounded-full animate-pulse"
                                style="animation-delay: 0ms"
                            >
                            </div>
                            <div
                                class="w-2 h-2 bg-primary rounded-full animate-pulse"
                                style="animation-delay: 150ms"
                            >
                            </div>
                            <div
                                class="w-2 h-2 bg-primary rounded-full animate-pulse"
                                style="animation-delay: 300ms"
                            >
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Error State -->
            <div
                id="errorState"
                class="hidden text-center py-12 animate-in fade-in duration-500"
            >
                <div class="max-w-sm mx-auto">
                    <div class="mb-4 relative">
                        <div class="text-6xl animate-bounce">❌</div>
                        <div
                            class="absolute inset-0 blur-xl bg-red-500/20 rounded-full"
                        >
                        </div>
                    </div>
                    <h3 class="text-xl font-bold mb-2">Заказ не найден</h3>
                    <p class="text-muted-foreground mb-6">
                        Заказ не существует или был удален
                    </p>
                    <a
                        href="/manager"
                        class="inline-flex items-center gap-2 btn-native bg-primary text-primary-foreground hover:bg-primary/90 shadow-lg hover:shadow-xl transition-all"
                    >
                        <svg
                            class="w-4 h-4"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M15 19l-7-7 7-7"></path>
                        </svg>
                        <span>Вернуться к заказам</span>
                    </a>
                </div>
            </div>

            <!-- Order Content -->
            <div id="orderContent" class="hidden space-y-4 animate-in">
                <!-- Enhanced Order Info Card -->
                <div class="native-card overflow-hidden">
                    <!-- Gradient Header -->
                    <div
                        class="bg-gradient-to-br from-primary/10 via-primary/5 to-background p-4 border-b"
                    >
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div class="flex items-center gap-3">
                                <div
                                    class="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center"
                                >
                                    <svg
                                        class="w-5 h-5 text-primary"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke="currentColor"
                                    >
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                                        ></path>
                                    </svg>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <div
                                        class="text-xs text-muted-foreground mb-0.5"
                                    >
                                        Время заказа
                                    </div>
                                    <div
                                        class="text-sm font-semibold truncate"
                                        id="orderTime"
                                    >
                                        -
                                    </div>
                                </div>
                            </div>
                            <div class="flex items-center gap-3">
                                <div
                                    class="w-10 h-10 rounded-full bg-blue-500/10 flex items-center justify-center"
                                >
                                    <svg
                                        class="w-5 h-5 text-blue-600"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke="currentColor"
                                    >
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
                                        ></path>
                                    </svg>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <div
                                        class="text-xs text-muted-foreground mb-0.5"
                                    >
                                        Всего товаров
                                    </div>
                                    <div
                                        class="text-sm font-semibold truncate"
                                        id="orderTotalItems"
                                    >
                                        -
                                    </div>
                                </div>
                            </div>
                            <div class="flex items-center gap-3">
                                <div
                                    class="w-10 h-10 rounded-full bg-green-500/10 flex items-center justify-center"
                                >
                                    <svg
                                        class="w-5 h-5 text-green-600"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke="currentColor"
                                    >
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"
                                        ></path>
                                    </svg>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <div
                                        class="text-xs text-muted-foreground mb-0.5"
                                    >
                                        Категорий
                                    </div>
                                    <div
                                        class="text-sm font-semibold truncate"
                                        id="orderCategoriesCount"
                                    >
                                        -
                                    </div>
                                </div>
                            </div>
                            <div class="flex items-center gap-3">
                                <div
                                    class="w-10 h-10 rounded-full bg-purple-500/10 flex items-center justify-center"
                                >
                                    <svg
                                        class="w-5 h-5 text-purple-600"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke="currentColor"
                                    >
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
                                        ></path>
                                    </svg>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <div
                                        class="text-xs text-muted-foreground mb-0.5"
                                    >
                                        Поставщиков
                                    </div>
                                    <div
                                        class="text-sm font-semibold truncate"
                                        id="orderSuppliersCount"
                                    >
                                        -
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Quick Stats Bar -->
                    <div
                        class="px-4 py-3 bg-muted/30 flex items-center justify-between text-xs"
                    >
                        <div class="flex items-center gap-2">
                            <span class="text-muted-foreground">Прогресс:</span>
                            <div class="flex items-center gap-1">
                                <div
                                    class="h-1.5 w-24 bg-background rounded-full overflow-hidden"
                                >
                                    <div
                                        id="orderProgress"
                                        class="h-full bg-gradient-to-r from-green-500 to-green-600 transition-all duration-500"
                                        style="width: 0%"
                                    >
                                    </div>
                                </div>
                                <span
                                    id="orderProgressText"
                                    class="font-medium text-muted-foreground"
                                    >0%</span
                                >
                            </div>
                        </div>
                        <div
                            id="orderStatusBadge"
                            class="flex items-center gap-1.5"
                        >
                            <!-- Populated dynamically -->
                        </div>
                    </div>
                </div>

                <!-- Categories Section -->
                <div class="space-y-3">
                    <div class="flex items-center justify-between px-1">
                        <h2 class="text-sm font-semibold text-muted-foreground">
                            Категории заказа
                        </h2>
                        <button
                            id="toggleAllCategories"
                            class="text-xs text-primary hover:underline"
                            onclick="toggleAllCategories()"
                        >
                            Свернуть все
                        </button>
                    </div>
                    <div id="categoryGroups">
                        <!-- Category groups will be populated here -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Assign Supplier Modal -->
        <div
            id="assignSupplierModal"
            class="fixed inset-0 z-50 hidden"
            style="display: none; pointer-events: none;"
        >
            <!-- Backdrop -->
            <div
                class="absolute inset-0 bg-black bg-opacity-50"
                style="pointer-events: auto;"
                onclick="closeSupplierModal()"
            >
            </div>

            <!-- Modal Content -->
            <div
                class="relative z-10 flex items-center justify-center min-h-full p-4"
                style="pointer-events: none;"
            >
                <div
                    class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full overflow-hidden flex flex-col max-h-[90vh]"
                    style="pointer-events: auto;"
                >
                    <!-- Header - Fixed -->
                    <div
                        class="p-6 border-b dark:border-gray-700 flex-shrink-0"
                    >
                        <div class="flex justify-between items-center">
                            <h3 class="text-lg font-semibold">
                                Назначить поставщика
                            </h3>
                            <button
                                onclick="closeSupplierModal(); return false;"
                                type="button"
                                class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                            >
                                ✕
                            </button>
                        </div>
                        <p
                            class="text-sm text-gray-600 dark:text-gray-400 mt-2"
                            id="supplierModalCategoryName"
                        >
                            Категория: -
                        </p>
                    </div>

                    <!-- Scrollable content -->
                    <div class="flex-1 overflow-y-auto p-6">
                        <div id="suppliersList">
                            <!-- Loading spinner -->
                            <div class="text-center py-8">
                                <div
                                    class="animate-spin h-8 w-8 border-b-2 border-primary rounded-full mx-auto mb-4"
                                >
                                </div>
                                <p class="text-muted-foreground">
                                    Загрузка поставщиков...
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- Footer - Fixed -->
                    <div
                        class="p-6 border-t dark:border-gray-700 flex-shrink-0"
                    >
                        <div class="flex space-x-3">
                            <button
                                onclick="assignSelectedSupplier(); return false;"
                                type="button"
                                class="flex-1 px-4 py-2 bg-primary hover:bg-primary/90 text-primary-foreground font-medium rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                id="assignSupplierBtn"
                                disabled
                            >
                                Назначить
                            </button>
                            <button
                                onclick="closeSupplierModal(); return false;"
                                type="button"
                                class="flex-1 px-4 py-2 bg-secondary hover:bg-secondary/80 text-secondary-foreground font-medium rounded-lg transition-colors"
                                id="cancelSupplierBtn"
                            >
                                Отмена
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add Missing Products Modal - Mobile Native Design -->
        <div
            id="addMissingProductsModal"
            class="fixed inset-0 bg-black/50 z-50 hidden"
        >
            <!-- Mobile: Full screen, Desktop: Centered modal -->
            <div
                class="absolute inset-0 md:inset-auto md:top-1/2 md:left-1/2 md:-translate-x-1/2 md:-translate-y-1/2 bg-white md:rounded-2xl md:shadow-xl md:max-w-2xl md:w-full md:mx-4 md:max-h-[90vh] flex flex-col"
            >
                <!-- Compact Header with sticky position -->
                <div
                    class="sticky top-0 z-10 bg-white border-b flex items-center px-4 py-3"
                >
                    <button
                        onclick="closeAddMissingProductsModal()"
                        class="p-2 -ml-2 hover:bg-gray-100 rounded-full transition-colors"
                    >
                        <svg
                            class="w-5 h-5"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                    <h3 class="flex-1 text-center text-base font-semibold pr-9">
                        ➕ Добавить товары
                    </h3>
                </div>

                <!-- Section Tabs - Sticky horizontal scroll -->
                <div class="sticky top-[53px] z-10 bg-white border-b">
                    <div
                        id="sectionTabsContainer"
                        class="flex gap-2 px-4 py-2 overflow-x-auto scrollbar-hide"
                    >
                        <!-- Tabs will be loaded dynamically -->
                        <div
                            class="flex items-center gap-2 text-gray-500 text-sm py-1"
                        >
                            <div
                                class="animate-spin h-4 w-4 border-2 border-gray-400 border-t-transparent rounded-full"
                            >
                            </div>
                            <span>Загрузка...</span>
                        </div>
                    </div>
                </div>

                <!-- Search Bar - Compact and sticky -->
                <div
                    class="sticky top-[105px] z-10 bg-white px-4 py-2 border-b"
                >
                    <input
                        type="text"
                        id="missingProductsSearch"
                        placeholder="🔍 Поиск..."
                        class="w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary bg-gray-50"
                        oninput="filterMissingProducts()"
                    />
                </div>

                <!-- Products List - Takes all remaining space -->
                <div class="flex-1 overflow-y-auto">
                    <div id="missingProductsList" class="px-4 py-3 space-y-2">
                        <div class="text-center text-gray-500 py-12">
                            <span class="text-4xl mb-2 block">📦</span>
                            <p class="text-sm">Выберите отдел</p>
                        </div>
                    </div>
                </div>

                <!-- Fixed Bottom Button - Native mobile style -->
                <div
                    class="sticky bottom-0 bg-white border-t px-4 py-3 safe-area-inset-bottom"
                >
                    <button
                        onclick="addSelectedMissingProducts()"
                        class="w-full py-3 bg-primary text-primary-foreground font-medium rounded-xl active:scale-98 transition-transform disabled:opacity-50 disabled:cursor-not-allowed"
                        id="addMissingProductsSubmitBtn"
                        disabled
                    >
                        ➕ Добавить выбранные
                    </button>
                </div>
            </div>
        </div>

        <style>
            /* Hide scrollbar for section tabs */
            .scrollbar-hide::-webkit-scrollbar {
                display: none;
            }
            .scrollbar-hide {
                -ms-overflow-style: none;
                scrollbar-width: none;
            }

            /* Active scale animation */
            .active\:scale-98:active {
                transform: scale(0.98);
            }

            /* Safe area for iOS devices */
            @supports (padding-bottom: env(safe-area-inset-bottom)) {
                .safe-area-inset-bottom {
                    padding-bottom: calc(0.75rem + env(safe-area-inset-bottom));
                }
            }
        </style>
    </div>

    <script>
        console.log("=== ORDER DETAILS PAGE SCRIPT LOADED ===");
        console.log("Current URL:", window.location.href);

        // Import Svelte components dynamically
        import { mount } from "svelte";
        import CategorySection from "../lib/components/CategorySection.svelte";

        // Global variables
        let currentOrderData = null;
        let currentOrderDate = null;
        let currentMissingProductsSection = null;
        let allMissingProducts = [];
        let filteredMissingProducts = [];
        let selectedMissingProducts = {};

        // Supplier assignment variables
        let currentAssignCategoryId = null;
        let currentAssignCategoryName = null;
        let selectedSupplierId = null;
        let availableSuppliers = [];

        // Get order ID from URL parameters
        function getOrderIdFromURL() {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get("orderId");
        }

        // Load order details
        async function loadOrderDetails() {
            const orderId = getOrderIdFromURL();
            console.log("Loading order with ID:", orderId);
            if (!orderId) {
                console.error("No order ID found in URL");
                showErrorState();
                return;
            }

            showLoadingState();

            try {
                // Fetch the specific order by ID - works for all statuses including completed
                const response = await fetch(`/api/orders/${orderId}`);
                console.log("API response status:", response.status);
                const data = await response.json();
                console.log("API response data:", data);

                if (data.success && data.data) {
                    console.log("Order data loaded successfully:", data.data);
                    currentOrderData = data.data;
                    currentOrderDate = data.data.timestamp; // Keep for compatibility with missing products
                    displayOrderDetails(data.data);
                    showOrderContent();
                } else {
                    console.error("API returned unsuccessful response:", data);
                    showErrorState();
                }
            } catch (error) {
                console.error("Error loading order details:", error);
                showErrorState();
            }
        }

        // Display order details
        function displayOrderDetails(orderData) {
            console.log("displayOrderDetails called with:", orderData);

            try {
                // Update title
                document.getElementById("orderTitle").textContent =
                    `${orderData.departmentEmoji} #${orderData.orderId}`;

                // Update status
                const statusEl = document.getElementById("orderStatus");
                const statusColors = {
                    pending: "bg-yellow-100 text-yellow-800",
                    sent: "bg-blue-100 text-blue-800",
                    delivered: "bg-green-100 text-green-800",
                };
                const statusText =
                    orderData.status === "pending"
                        ? "Ожидает"
                        : orderData.status === "sent"
                          ? "Отправлен"
                          : "Доставлен";

                statusEl.textContent = statusText;
                statusEl.className = `status-badge ${statusColors[orderData.status] || "bg-gray-100 text-gray-800"}`;

                // Update basic order info
                document.getElementById("orderTime").textContent =
                    orderData.displayDate;
                document.getElementById("orderTotalItems").textContent =
                    orderData.totalItems;

                // Update enhanced statistics
                const categoriesCount = orderData.categories
                    ? orderData.categories.length
                    : 0;
                document.getElementById("orderCategoriesCount").textContent =
                    categoriesCount;

                // Count unique suppliers
                const suppliers = new Set();
                if (orderData.categories) {
                    orderData.categories.forEach((cat) => {
                        if (cat.supplier && cat.supplier.name) {
                            suppliers.add(cat.supplier.name);
                        }
                    });
                }
                document.getElementById("orderSuppliersCount").textContent =
                    suppliers.size;

                // Calculate progress (categories with suppliers / total categories)
                const categoriesWithSuppliers = orderData.categories
                    ? orderData.categories.filter(
                          (cat) => cat.supplier && cat.supplier.name,
                      ).length
                    : 0;
                const progressPercentage =
                    categoriesCount > 0
                        ? Math.round(
                              (categoriesWithSuppliers / categoriesCount) * 100,
                          )
                        : 0;

                document.getElementById("orderProgress").style.width =
                    `${progressPercentage}%`;
                document.getElementById("orderProgressText").textContent =
                    `${progressPercentage}%`;

                // Update status badge in stats bar
                const statusBadge = document.getElementById("orderStatusBadge");
                const statusIcons = {
                    pending: "⏳",
                    sent: "📤",
                    delivered: "✅",
                };
                statusBadge.innerHTML = `
                    <span class="text-xs">${statusIcons[orderData.status] || "📦"}</span>
                    <span class="font-medium text-xs">${statusText}</span>
                `;

                console.log(
                    "Basic order details updated, calling displayCategoryGroups",
                );

                // Display category groups
                displayCategoryGroups(orderData);

                console.log("displayOrderDetails completed successfully");
            } catch (error) {
                console.error("Error in displayOrderDetails:", error);
                console.error("Error stack:", error.stack);
                throw error; // Re-throw to trigger error state
            }
        }

        // Display category groups using Svelte components
        function displayCategoryGroups(orderData) {
            console.log("displayCategoryGroups called with:", orderData);

            try {
                const container = document.getElementById("categoryGroups");
                if (!container) {
                    console.error(
                        "Container element 'categoryGroups' not found",
                    );
                    return;
                }

                container.innerHTML = "";

                if (
                    !orderData.categories ||
                    !Array.isArray(orderData.categories)
                ) {
                    console.error(
                        "Invalid categories data:",
                        orderData.categories,
                    );
                    return;
                }

                console.log(
                    `Mounting ${orderData.categories.length} category sections`,
                );

                // Create a wrapper div for all categories
                const categoriesWrapper = document.createElement("div");
                categoriesWrapper.className = "space-y-3";
                container.appendChild(categoriesWrapper);

                // Mount CategorySection component for each category
                orderData.categories.forEach((category, categoryIndex) => {
                    try {
                        console.log(
                            `Mounting category ${categoryIndex}:`,
                            category,
                        );

                        const categoryContainer = document.createElement("div");
                        categoriesWrapper.appendChild(categoryContainer);

                        const categoryId = category.categoryId || categoryIndex;
                        const categoryData = {
                            ...category,
                            categoryId: categoryId,
                        };

                        mount(CategorySection, {
                            target: categoryContainer,
                            props: {
                                category: categoryData,
                                orderId: orderData.orderId,
                                onSendToSupplier: (
                                    orderId,
                                    categoryIds,
                                    supplierName,
                                    supplierId,
                                ) => {
                                    sendSupplierOrder(
                                        orderId,
                                        categoryIds,
                                        supplierName,
                                        supplierId,
                                    );
                                },
                                onAssignSupplier: (
                                    categoryId,
                                    categoryName,
                                ) => {
                                    assignSupplierToCategory(
                                        categoryId,
                                        categoryName,
                                    );
                                },
                            },
                        });

                        console.log(
                            `Successfully mounted category ${categoryIndex}`,
                        );
                    } catch (categoryError) {
                        console.error(
                            `Error mounting category ${categoryIndex}:`,
                            categoryError,
                        );
                        throw categoryError; // Re-throw to trigger outer catch
                    }
                });

                console.log("All categories mounted successfully");

                // Add missing products button
                const buttonContainer = document.createElement("div");
                buttonContainer.className = "pt-2";
                container.appendChild(buttonContainer);

                const button = document.createElement("button");
                button.className =
                    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2 w-full";
                button.textContent = "➕ Добавить недостающие товары";
                button.onclick = () => openAddMissingProductsModal();
                buttonContainer.appendChild(button);

                console.log("Missing products button added");
            } catch (error) {
                console.error(
                    "Critical error in displayCategoryGroups:",
                    error,
                );
                console.error("Error stack:", error.stack);
                // Re-throw to let loadOrderDetails handle it
                throw error;
            }
        }

        // Send order to supplier
        async function sendSupplierOrder(
            orderId,
            categoryIds,
            supplierName,
            supplierId,
        ) {
            console.log(
                `📤 Sending order to supplier: ${supplierName} for order: ${orderId}`,
            );

            try {
                if (!currentOrderData) {
                    throw new Error("Order data not loaded");
                }

                // Find all categories for this supplier
                const categories = currentOrderData.categories.filter((cat) =>
                    categoryIds.includes(cat.categoryId),
                );

                if (categories.length === 0) {
                    throw new Error("No categories found");
                }

                // Get supplier phone from first category
                const supplierPhone = categories[0].supplier?.phone;
                if (!supplierPhone) {
                    throw new Error("Supplier phone number not found");
                }

                // Generate consolidated WhatsApp message
                let message = `📋 Заказ товаров - ${currentOrderData.displayDate}\n\n`;
                message += `📦 Поставщик: ${supplierName}\n\n`;

                categories.forEach((category) => {
                    message += `🏪 ${category.categoryName}:\n`;
                    category.items.forEach((item) => {
                        message += `• ${item.name} - ${item.quantity} ${item.unit}\n`;
                    });
                    message += `\n`;
                });

                const totalItems = categories.reduce(
                    (sum, cat) => sum + cat.items.length,
                    0,
                );
                message += `📊 Итого: ${totalItems} товаров из ${categories.length} ${categories.length === 1 ? "категории" : "категорий"}`;

                // Send via WhatsApp
                const encodedMessage = encodeURIComponent(message);
                const isMobile =
                    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
                        navigator.userAgent,
                    );

                let whatsappUrl;
                if (isMobile) {
                    whatsappUrl = `whatsapp://send?phone=${supplierPhone}&text=${encodedMessage}`;
                } else {
                    whatsappUrl = `https://web.whatsapp.com/send?phone=${supplierPhone}&text=${encodedMessage}`;
                }

                // Try to open WhatsApp
                const whatsappWindow = window.open(whatsappUrl, "_blank");

                // If popup was blocked, show manual instructions
                if (
                    !whatsappWindow ||
                    whatsappWindow.closed ||
                    typeof whatsappWindow.closed === "undefined"
                ) {
                    const copyMessage = confirm(
                        "❌ Не удалось открыть WhatsApp автоматически.\n\n" +
                            `Телефон: ${supplierPhone}\n\n` +
                            "Нажмите OK, чтобы скопировать текст заказа в буфер обмена.",
                    );

                    if (copyMessage) {
                        navigator.clipboard
                            .writeText(message)
                            .then(() => {
                                alert(
                                    `✅ Текст заказа скопирован!\n\nОткройте WhatsApp вручную и отправьте на номер:\n${supplierPhone}`,
                                );
                            })
                            .catch(() => {
                                alert(
                                    `Телефон: ${supplierPhone}\n\nТекст заказа:\n\n${message}`,
                                );
                            });
                    }
                }

                // Update database for all categories
                const promises = categoryIds.map((categoryId) =>
                    fetch("/api/send-category-to-supplier", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            categoryId: categoryId,
                            supplierId: supplierId,
                        }),
                    }),
                );

                const responses = await Promise.all(promises);
                const results = await Promise.all(
                    responses.map((r) => r.json()),
                );

                const successCount = results.filter((r) => r.success).length;
                const failCount = results.filter((r) => !r.success).length;

                if (successCount > 0) {
                    alert(
                        `✅ Отправлено ${successCount} ${successCount === 1 ? "категория" : "категорий"} через WhatsApp: ${supplierName}`,
                    );
                    loadOrderDetails(); // Refresh the display
                }

                if (failCount > 0) {
                    alert(
                        `⚠️ ${failCount} ${failCount === 1 ? "категорию" : "категорий"} не удалось обновить в БД`,
                    );
                }
            } catch (error) {
                console.error("❌ Error sending order:", error);
                alert(
                    "Ошибка при отправке заказа поставщику: " + error.message,
                );
            }
        }

        // Assign supplier to category
        async function assignSupplierToCategory(categoryId, categoryName) {
            currentAssignCategoryId = categoryId;
            currentAssignCategoryName = categoryName;
            selectedSupplierId = null;

            // Open modal
            const modal = document.getElementById("assignSupplierModal");
            modal.classList.remove("hidden");
            modal.style.display = "block";
            modal.style.pointerEvents = "auto";
            document.getElementById("supplierModalCategoryName").textContent =
                `Категория: ${categoryName}`;

            // Load suppliers
            await loadSuppliersForAssignment();
        }

        // Load suppliers for assignment
        async function loadSuppliersForAssignment() {
            const container = document.getElementById("suppliersList");

            container.innerHTML = `
                <div class="text-center py-8">
                    <div class="animate-spin h-8 w-8 border-b-2 border-blue-600 rounded-full mx-auto mb-4"></div>
                    <p class="text-gray-600">Загрузка поставщиков...</p>
                </div>
            `;

            try {
                const response = await fetch("/api/suppliers");
                const data = await response.json();

                if (data.success && data.data) {
                    availableSuppliers = data.data;
                    displaySuppliersList();
                } else {
                    throw new Error(data.error || "Failed to load suppliers");
                }
            } catch (error) {
                console.error("Error loading suppliers:", error);
                container.innerHTML = `
                    <div class="text-center py-8">
                        <span class="text-4xl mb-2 block">❌</span>
                        <p class="text-red-600">Ошибка загрузки поставщиков</p>
                        <p class="text-sm text-gray-500">${error.message}</p>
                    </div>
                `;
            }
        }

        // Display suppliers list
        function displaySuppliersList() {
            const container = document.getElementById("suppliersList");

            if (availableSuppliers.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-8">
                        <span class="text-4xl mb-2 block">📭</span>
                        <p class="text-gray-600">Нет доступных поставщиков</p>
                        <p class="text-sm text-gray-500 mt-2">Добавьте поставщиков в разделе "Менеджер"</p>
                    </div>
                `;
                return;
            }

            // Clear container first
            container.innerHTML = "";

            const wrapper = document.createElement("div");
            wrapper.className = "space-y-2";

            availableSuppliers.forEach((supplier) => {
                const hasPhone = supplier.phone && supplier.phone.trim() !== "";
                const isSelected = selectedSupplierId === supplier.id;

                const label = document.createElement("label");
                label.className = `flex items-start p-3 border rounded-lg cursor-pointer transition-all ${isSelected ? "bg-blue-50 border-blue-500" : "bg-gray-50 border-gray-200 hover:border-blue-300"}`;

                // Create radio button
                const radio = document.createElement("input");
                radio.type = "radio";
                radio.name = "supplier";
                radio.value = supplier.id;
                radio.checked = isSelected;
                radio.className = "mt-1 mr-3 h-4 w-4 text-blue-600";
                radio.addEventListener("change", function () {
                    selectSupplierForAssignment(supplier.id);
                });

                // Create content div
                const contentDiv = document.createElement("div");
                contentDiv.className = "flex-1";

                // Supplier name
                const nameDiv = document.createElement("div");
                nameDiv.className = "font-medium text-gray-900";
                nameDiv.textContent = supplier.name;
                contentDiv.appendChild(nameDiv);

                // Phone or no phone warning
                const phoneDiv = document.createElement("div");
                phoneDiv.className = hasPhone
                    ? "text-sm text-gray-600 mt-1"
                    : "text-sm text-red-600 mt-1";
                phoneDiv.textContent = hasPhone
                    ? `📱 ${supplier.phone}`
                    : "⚠️ Нет телефона";
                contentDiv.appendChild(phoneDiv);

                // Contact info if exists
                if (supplier.contact_info) {
                    const contactDiv = document.createElement("div");
                    contactDiv.className = "text-xs text-gray-500 mt-1";
                    contactDiv.textContent = supplier.contact_info;
                    contentDiv.appendChild(contactDiv);
                }

                label.appendChild(radio);
                label.appendChild(contentDiv);
                wrapper.appendChild(label);
            });

            container.appendChild(wrapper);
        }

        // Select supplier for assignment
        function selectSupplierForAssignment(supplierId) {
            console.log(
                "Selected supplier ID:",
                supplierId,
                "Type:",
                typeof supplierId,
            );
            selectedSupplierId = supplierId;

            // Enable assign button
            const btn = document.getElementById("assignSupplierBtn");
            btn.disabled = false;

            console.log(
                "Supplier selected successfully. Button disabled:",
                btn.disabled,
            );
        }

        // Assign selected supplier
        async function assignSelectedSupplier() {
            console.log("🟢 assignSelectedSupplier called!");
            console.log("Attempting to assign:", {
                selectedSupplierId,
                currentAssignCategoryId,
                selectedSupplierIdType: typeof selectedSupplierId,
                currentAssignCategoryIdType: typeof currentAssignCategoryId,
            });

            if (!selectedSupplierId || !currentAssignCategoryId) {
                alert("Пожалуйста, выберите поставщика");
                return;
            }

            const btn = document.getElementById("assignSupplierBtn");
            const originalText = btn.textContent;
            btn.disabled = true;
            btn.textContent = "⏳ Назначение...";

            try {
                const response = await fetch("/api/category-suppliers", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        categoryId: currentAssignCategoryId,
                        supplierId: selectedSupplierId,
                    }),
                });

                const data = await response.json();

                if (data.success) {
                    const supplier = availableSuppliers.find(
                        (s) => s.id === selectedSupplierId,
                    );
                    alert(
                        `✅ Поставщик "${supplier.name}" успешно назначен для категории "${currentAssignCategoryName}"`,
                    );
                    closeSupplierModal();

                    // Reload order details to show updated supplier
                    await loadOrderDetails();
                } else {
                    throw new Error(data.error || "Failed to assign supplier");
                }
            } catch (error) {
                console.error("Error assigning supplier:", error);
                alert("Ошибка при назначении поставщика: " + error.message);
                btn.disabled = false;
                btn.textContent = originalText;
            }
        }

        // Close supplier modal
        function closeSupplierModal() {
            console.log("🔴 closeSupplierModal called!");
            const modal = document.getElementById("assignSupplierModal");
            modal.classList.add("hidden");
            modal.style.display = "none";
            modal.style.pointerEvents = "none";
            currentAssignCategoryId = null;
            currentAssignCategoryName = null;
            selectedSupplierId = null;
            availableSuppliers = [];
            console.log("✅ Modal closed");
        }

        // Make functions available globally
        window.closeSupplierModal = closeSupplierModal;
        window.assignSelectedSupplier = assignSelectedSupplier;

        // Debug: Log that functions are available
        console.log("✅ Supplier modal functions registered:", {
            closeSupplierModal: typeof window.closeSupplierModal,
            assignSelectedSupplier: typeof window.assignSelectedSupplier,
        });

        // Edit supplier for categories
        function editSupplierForCategories(
            supplierId,
            supplierName,
            categoryIds,
        ) {
            alert(
                `Функция редактирования поставщика "${supplierName}" для ${categoryIds.length} категорий будет добавлена позже.`,
            );
            // TODO: Implement bulk supplier editing modal
        }

        // Missing Products Modal Functions (similar to manager.astro)
        async function openAddMissingProductsModal() {
            document
                .getElementById("addMissingProductsModal")
                .classList.remove("hidden");
            // Reset state
            currentMissingProductsSection = null;
            allMissingProducts = [];
            filteredMissingProducts = [];
            selectedMissingProducts = {};
            document.getElementById("missingProductsSearch").value = "";
            updateMissingProductsButton();

            // Load sections dynamically
            await loadSectionTabs();
        }

        // Load section tabs dynamically from API
        async function loadSectionTabs() {
            const container = document.getElementById("sectionTabsContainer");

            try {
                const response = await fetch("/api/sections");
                const data = await response.json();

                if (data.success && data.data && data.data.length > 0) {
                    let tabsHtml = "";

                    data.data.forEach((section, index) => {
                        const sectionId = section.id;
                        const sectionName = section.name;
                        const emoji = section.emoji || "📦";

                        tabsHtml += `
                            <button
                                onclick="loadMissingProductsSection(${sectionId}, '${sectionName.replace(/'/g, "\\'")}')"
                                class="section-btn flex-shrink-0 px-3 py-1.5 text-sm font-medium rounded-full bg-gray-100 hover:bg-primary hover:text-primary-foreground transition-colors whitespace-nowrap"
                                data-section-id="${sectionId}"
                            >
                                ${emoji} ${sectionName}
                            </button>
                        `;
                    });

                    container.innerHTML = tabsHtml;
                } else {
                    container.innerHTML = `
                        <div class="w-full text-center text-gray-500 py-4">
                            <p class="text-sm">Отделы не найдены</p>
                            <p class="text-xs mt-1">Синхронизируйте секции из Poster</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error("Error loading sections:", error);
                container.innerHTML = `
                    <div class="w-full text-center text-red-500 py-4">
                        <p class="text-sm">Ошибка загрузки отделов</p>
                    </div>
                `;
            }
        }

        function closeAddMissingProductsModal() {
            document
                .getElementById("addMissingProductsModal")
                .classList.add("hidden");
        }

        async function loadMissingProductsSection(sectionId, sectionName) {
            currentMissingProductsSection = {
                id: sectionId,
                name: sectionName,
            };

            // Update tab states - reset all tabs
            document.querySelectorAll(".section-btn").forEach((btn) => {
                btn.classList.remove("bg-primary", "text-primary-foreground");
                btn.classList.add("bg-gray-100");
            });

            // Highlight selected tab
            const selectedTab = document.querySelector(
                `[data-section-id="${sectionId}"]`,
            );
            if (selectedTab) {
                selectedTab.classList.remove("bg-gray-100");
                selectedTab.classList.add(
                    "bg-primary",
                    "text-primary-foreground",
                );
            }

            const container = document.getElementById("missingProductsList");
            container.innerHTML = `
				<div class="text-center text-gray-500 py-8">
					<div class="animate-spin h-8 w-8 border-b-2 border-green-600 rounded-full mx-auto mb-4"></div>
					<p>Загрузка товаров...</p>
				</div>
			`;

            try {
                // Load products from this section
                const apiUrl = `/api/section-products?section_id=${sectionId}`;
                const response = await fetch(apiUrl);
                const data = await response.json();

                if (data.success) {
                    allMissingProducts = data.data || [];
                    filteredMissingProducts = [...allMissingProducts];
                    displayMissingProducts();
                } else {
                    throw new Error(data.error || "Failed to load products");
                }
            } catch (error) {
                console.error("Error loading missing products:", error);
                container.innerHTML = `
					<div class="text-center text-red-500 py-8">
						<span class="text-4xl mb-2 block">❌</span>
						<p>Ошибка загрузки товаров</p>
						<p class="text-sm text-gray-500">${error.message}</p>
					</div>
				`;
            }
        }

        function displayMissingProducts() {
            const container = document.getElementById("missingProductsList");

            if (filteredMissingProducts.length === 0) {
                container.innerHTML = `
					<div class="text-center text-gray-500 py-12">
						<span class="text-4xl mb-2 block">🔍</span>
						<p>Товары не найдены</p>
					</div>
				`;
                return;
            }

            let html = "";
            filteredMissingProducts.forEach((product) => {
                const productId = product.id || product.product_id;
                const productName =
                    product.name || product.product_name || product.title;
                const productUnit = product.unit || "шт";
                const quantity =
                    selectedMissingProducts[productId]?.quantity || 0;

                html += `
					<div class="bg-white py-4 border-b last:border-b-0" data-product-id="${productId}">
						<div class="flex items-center justify-between w-full">
							<div class="flex-1 min-w-0">
								<h3 class="text-base font-medium text-gray-900 truncate">${productName}</h3>
							</div>
							<div class="flex items-center justify-end ml-3">
								<!-- Inline quantity controls: - [input with unit] + -->
								<div class="flex items-center bg-gray-100 rounded-lg border border-gray-300">
									<button
										class="px-2 h-10 bg-gray-100 hover:bg-gray-200 active:bg-gray-300 text-gray-700 flex items-center justify-center text-2xl font-normal transition-colors duration-150 rounded-l-lg"
										onclick="updateMissingProductQuantity(${productId}, '${productName}', '${productUnit}', ${quantity - 0.5})"
										title="Уменьшить на 0.5 ${productUnit}"
										type="button"
									>
										−
									</button>
									<div class="relative">
										<input
											type="text"
											inputmode="decimal"
											class="w-16 px-2 py-2 border-0 focus:outline-none focus:ring-0 text-center bg-gray-100 text-sm font-medium"
											placeholder="0"
											value="${quantity > 0 ? quantity + " " + productUnit : ""}"
											data-product-id="${productId}"
											onchange="updateMissingProductQuantityFromInput(${productId}, '${productName}', '${productUnit}', this.value)"
										/>
									</div>
									<button
										class="px-2 h-10 bg-gray-100 hover:bg-gray-200 active:bg-gray-300 text-gray-700 flex items-center justify-center text-2xl font-normal transition-colors duration-150 rounded-r-lg"
										onclick="updateMissingProductQuantity(${productId}, '${productName}', '${productUnit}', ${quantity + 0.5})"
										title="Добавить 0.5 ${productUnit}"
										type="button"
									>
										+
									</button>
								</div>
							</div>
						</div>
					</div>
				`;
            });

            container.innerHTML = html;
        }

        function updateMissingProductQuantity(
            productId,
            productName,
            unit,
            newQuantity,
        ) {
            const quantity = Math.max(0, parseFloat(newQuantity) || 0);

            if (quantity > 0) {
                selectedMissingProducts[productId] = {
                    id: productId,
                    name: productName,
                    unit: unit,
                    quantity: quantity,
                    section: currentMissingProductsSection,
                };
            } else {
                delete selectedMissingProducts[productId];
            }

            displayMissingProducts();
            updateMissingProductsButton();
        }

        function updateMissingProductQuantityFromInput(
            productId,
            productName,
            unit,
            inputValue,
        ) {
            const numericValue =
                parseFloat(inputValue.replace(/[^\d.]/g, "")) || 0;
            updateMissingProductQuantity(
                productId,
                productName,
                unit,
                numericValue,
            );
        }

        function filterMissingProducts() {
            const searchTerm = document
                .getElementById("missingProductsSearch")
                .value.toLowerCase();

            if (!searchTerm) {
                filteredMissingProducts = [...allMissingProducts];
            } else {
                filteredMissingProducts = allMissingProducts.filter(
                    (product) => {
                        const productName =
                            product.name ||
                            product.product_name ||
                            product.title ||
                            "";
                        return productName.toLowerCase().includes(searchTerm);
                    },
                );
            }

            displayMissingProducts();
        }

        function updateMissingProductsButton() {
            const btn = document.getElementById("addMissingProductsSubmitBtn");
            const selectedCount = Object.keys(selectedMissingProducts).length;

            if (selectedCount > 0) {
                btn.disabled = false;
                btn.textContent = `➕ Добавить выбранные (${selectedCount})`;
            } else {
                btn.disabled = true;
                btn.textContent = "➕ Добавить выбранные";
            }
        }

        async function addSelectedMissingProducts() {
            const selectedCount = Object.keys(selectedMissingProducts).length;
            if (selectedCount === 0) return;

            const btn = document.getElementById("addMissingProductsSubmitBtn");
            const originalText = btn.textContent;
            btn.disabled = true;
            btn.textContent = "⏳ Добавление...";

            try {
                // Get the current order ID
                const orderId = getOrderIdFromURL();
                if (!orderId || !currentOrderData) {
                    throw new Error("Order not found");
                }

                // Create new order items from selected products
                const newOrderItems = Object.values(
                    selectedMissingProducts,
                ).map((product) => ({
                    name: product.name,
                    quantity: product.quantity,
                    shoppingQuantity: product.quantity,
                    unit: product.unit,
                }));

                // Get existing items from all categories in the current order
                const existingItems = [];
                if (
                    currentOrderData.categories &&
                    Array.isArray(currentOrderData.categories)
                ) {
                    currentOrderData.categories.forEach((category) => {
                        if (category.items && Array.isArray(category.items)) {
                            existingItems.push(...category.items);
                        }
                    });
                }

                // Merge new items with existing items
                const mergedItems = [...existingItems, ...newOrderItems];

                // Update the order in the database
                const response = await fetch("/api/update-order-items", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        orderId: parseInt(orderId),
                        items: mergedItems,
                    }),
                });

                const data = await response.json();

                if (data.success) {
                    alert(
                        `✅ Успешно добавлено ${selectedCount} товаров в заказ!`,
                    );
                    closeAddMissingProductsModal();
                    // Refresh order details
                    loadOrderDetails();
                } else {
                    throw new Error(data.error || "Failed to add products");
                }
            } catch (error) {
                console.error("Error adding missing products:", error);
                alert("Ошибка при добавлении товаров: " + error.message);
                btn.disabled = false;
                btn.textContent = originalText;
            }
        }

        // UI State Functions
        function showLoadingState() {
            document.getElementById("loadingState").classList.remove("hidden");
            document.getElementById("errorState").classList.add("hidden");
            document.getElementById("orderContent").classList.add("hidden");
        }

        function showErrorState() {
            document.getElementById("loadingState").classList.add("hidden");
            document.getElementById("errorState").classList.remove("hidden");
            document.getElementById("orderContent").classList.add("hidden");
        }

        function showOrderContent() {
            document.getElementById("loadingState").classList.add("hidden");
            document.getElementById("errorState").classList.add("hidden");
            document.getElementById("orderContent").classList.remove("hidden");
        }

        // Toggle all categories expand/collapse
        let allCategoriesExpanded = true;
        window.toggleAllCategories = function () {
            allCategoriesExpanded = !allCategoriesExpanded;
            const button = document.getElementById("toggleAllCategories");
            button.textContent = allCategoriesExpanded
                ? "Свернуть все"
                : "Развернуть все";

            // Find all category header buttons and trigger click
            const categoryButtons = document.querySelectorAll(
                "[data-category-toggle]",
            );
            categoryButtons.forEach((btn) => {
                const isExpanded = btn.getAttribute("aria-expanded") === "true";
                if (isExpanded !== allCategoriesExpanded) {
                    btn.click();
                }
            });
        };

        // Initialize page
        document.addEventListener("DOMContentLoaded", function () {
            console.log("=== DOM CONTENT LOADED - Starting initialization ===");
            loadOrderDetails();
        });

        console.log(
            "=== Script execution completed, waiting for DOMContentLoaded ===",
        );
    </script>
</Layout>
