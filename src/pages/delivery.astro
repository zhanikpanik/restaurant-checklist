---
import Layout from "../layouts/Layout.astro";
---

<Layout title="–î–æ—Å—Ç–∞–≤–∫–∞ - –ó–∞–∫–∞–∑—ã">
    <div class="min-h-screen bg-white">
        <header class="bg-green-600 text-white px-4 py-6">
            <div class="max-w-md mx-auto flex justify-between items-center">
                <h1 class="text-2xl font-bold">üöö –î–æ—Å—Ç–∞–≤–∫–∞</h1>
                <a href="/" class="text-green-200 hover:text-white">‚Üê –ì–ª–∞–≤–Ω–∞—è</a
                >
            </div>
        </header>

        <main class="max-w-md mx-auto px-4 py-6">
            <div id="loadingState" class="text-center py-8">
                <div
                    class="animate-spin h-12 w-12 border-b-2 border-green-600 rounded-full mx-auto"
                >
                </div>
            </div>

            <div id="ordersView" class="space-y-4 hidden">
                <div class="flex space-x-2">
                    <button
                        id="filterAll"
                        class="px-3 py-2 rounded-lg bg-green-600 text-white"
                        >–í—Å–µ</button
                    >
                    <button
                        id="filterPending"
                        class="px-3 py-2 rounded-lg bg-gray-200">–û–∂–∏–¥–∞—é—Ç</button
                    >
                    <button
                        id="filterDelivered"
                        class="px-3 py-2 rounded-lg bg-gray-200"
                        >–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</button
                    >
                </div>
                <div id="ordersList"></div>
            </div>

            <button
                id="refreshBtn"
                class="fixed bottom-6 right-6 p-4 bg-green-600 text-white rounded-full"
            >
                üîÑ
            </button>
        </main>
    </div>

    <script is:inline>
        let currentFilter = "all";

        async function loadOrders() {
            try {
                // Try to load from server storage for cross-device visibility
                let serverOrders = [];
                try {
                    const response = await fetch('/api/get-all-orders', { cache: 'no-store' });
                    if (response.ok) {
                        const result = await response.json();
                        serverOrders = Array.isArray(result.data) ? result.data : [];
                    }
                } catch (e) {
                    console.warn('‚ö†Ô∏è Failed to fetch server orders, falling back to localStorage');
                }

                // Also load local orders (for unsynced/offline items)
                const barOrders = JSON.parse(localStorage.getItem('barOrderHistory') || '[]');
                const kitchenOrders = JSON.parse(localStorage.getItem('kitchenOrderHistory') || '[]');
                const localOrders = [...barOrders, ...kitchenOrders];

                // Merge by unique key (timestamp + department) with preference:
                // - Prefer delivered over non-delivered
                // - If both delivered, prefer one with later deliveredAt
                // - Otherwise, prefer server version
                function chooseBetter(existing, candidate) {
                    if (!existing) return candidate;
                    const isExistingDelivered = existing.status === 'delivered';
                    const isCandidateDelivered = candidate.status === 'delivered';
                    if (isExistingDelivered && !isCandidateDelivered) return existing;
                    if (!isExistingDelivered && isCandidateDelivered) return candidate;
                    if (isExistingDelivered && isCandidateDelivered) {
                        const a = existing.deliveredAt ? new Date(existing.deliveredAt).getTime() : 0;
                        const b = candidate.deliveredAt ? new Date(candidate.deliveredAt).getTime() : 0;
                        if (a !== b) return b > a ? candidate : existing;
                        // If same deliveredAt or missing, prefer one with actualTotalQuantity
                        const hasExistingActuals = typeof existing.actualTotalQuantity === 'number';
                        const hasCandidateActuals = typeof candidate.actualTotalQuantity === 'number';
                        if (hasExistingActuals !== hasCandidateActuals) {
                            return hasCandidateActuals ? candidate : existing;
                        }
                    }
                    // Fallback preference: server over local (mark with a flag below)
                    if (candidate.__source === 'server' && existing.__source !== 'server') return candidate;
                    return existing;
                }

                const mergedMap = new Map();
                for (const o of serverOrders) {
                    const key = `${o.timestamp}|${o.department}`;
                    const candidate = { ...o, __source: 'server' };
                    mergedMap.set(key, chooseBetter(mergedMap.get(key), candidate));
                }
                for (const o of localOrders) {
                    const key = `${o.timestamp}|${o.department}`;
                    const candidate = { ...o, __source: 'local' };
                    mergedMap.set(key, chooseBetter(mergedMap.get(key), candidate));
                }

                const orders = Array.from(mergedMap.values()).sort(
                    (a, b) => new Date(b.timestamp) - new Date(a.timestamp)
                );

                document.getElementById('loadingState').style.display = 'none';
                document.getElementById('ordersView').classList.remove('hidden');
                renderOrders(orders);
            } catch (error) {
                console.error('Failed to load orders:', error);
                // Absolute fallback to localStorage-only
                const fallbackBar = JSON.parse(localStorage.getItem('barOrderHistory') || '[]');
                const fallbackKitchen = JSON.parse(localStorage.getItem('kitchenOrderHistory') || '[]');
                const fallbackOrders = [...fallbackBar, ...fallbackKitchen].sort(
                    (a, b) => new Date(b.timestamp) - new Date(a.timestamp)
                );

                document.getElementById('loadingState').style.display = 'none';
                document.getElementById('ordersView').classList.remove('hidden');
                renderOrders(fallbackOrders);
            }
        }

        function renderOrders(orders) {
            const filtered =
                currentFilter === "all"
                    ? orders
                    : currentFilter === "pending"
                      ? orders.filter((o) => o.status !== "delivered")
                      : orders.filter((o) => o.status === "delivered");

            document.getElementById("ordersList").innerHTML = filtered
                .map((order) => {
                    // Get temporary quantities
                    const tempQuantities = JSON.parse(
                        localStorage.getItem(`temp_${order.timestamp}`) || "{}",
                    );

                    return `
                        <div class="bg-white border rounded-lg p-4 mb-4 ${order.status === "delivered" ? "bg-green-50" : ""}">
                            <div class="flex justify-between items-start mb-3">
                                <div>
                                    <h3 class="font-medium">${order.departmentName || order.department}</h3>
                                    <p class="text-sm text-gray-500">${new Date(order.timestamp).toLocaleString()}</p>
                                </div>
                                <div class="text-right">
                                    <div class="text-sm font-medium">${order.totalItems} —Ç–æ–≤–∞—Ä–æ–≤</div>
                                    <div class="text-xs text-gray-500">${order.actualTotalQuantity || order.totalQuantity} —à—Ç.</div>
                                </div>
                            </div>

                            <div class="space-y-2 my-3">
                                ${order.items
                                                                         .map(
                                         (item, i) => `
                                     <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
                                         <div class="flex justify-between items-start mb-2">
                                             <span class="font-medium text-gray-900">${item.name}</span>
                                             <span class="text-sm text-gray-600 bg-gray-200 px-2 py-1 rounded">–ó–∞–∫–∞–∑–∞–Ω–æ: ${item.quantity} ${item.unit}</span>
                                         </div>
                                        ${
                                                                                         order.status !== "delivered"
                                                 ? `
                                             <div class="flex items-center mt-2 space-x-2">
                                                 <input
                                                     type="number"
                                                     class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                                     value="${tempQuantities[i] !== undefined ? tempQuantities[i] : item.quantity}"
                                                     data-order="${order.timestamp}"
                                                     data-index="${i}"
                                                     oninput="saveQuantity(event)"
                                                     placeholder="0"
                                                     step="0.1"
                                                     min="0"
                                                 >
                                                 <span class="text-sm text-gray-500 font-medium min-w-max">${item.unit}</span>
                                             </div>
                                            ${
                                                                                                tempQuantities[i] !==
                                                    undefined &&
                                                tempQuantities[i] !==
                                                    item.quantity
                                                     ? `
                                                 <div class="mt-2 p-2 bg-orange-50 border border-orange-200 rounded text-xs text-orange-700 font-medium">
                                                     üí° –ò–∑–º–µ–Ω–µ–Ω–æ: ${tempQuantities[i]} ${item.unit}
                                                 </div>
                                             `
                                                     : ""
                                            }
                                        `
                                                : `
                                            <div class="mt-2 p-2 bg-green-50 border border-green-200 rounded text-sm text-green-700 font-medium">
                                                ‚úÖ –ö—É–ø–ª–µ–Ω–æ: ${item.actualQuantity || item.quantity} ${item.unit}
                                            </div>
                                        `
                                        }
                                    </div>
                                `,
                                    )
                                    .join("")}
                            </div>

                            ${
                                                                 order.status !== "delivered"
                                     ? `
                                 <button
                                     onclick="markDelivered('${order.timestamp}', '${order.department}')"
                                     class="w-full bg-green-600 hover:bg-green-700 text-white py-2 rounded-lg transition-colors duration-200"
                                 >
                                     ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
                                 </button>
                             `
                                     : `
                                 <div class="space-y-2">
                                     <div class="text-center text-green-600 font-medium">‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</div>
                                     <button
                                         onclick="downloadOrderXLS('${order.timestamp}', '${order.department}')"
                                         class="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-lg transition-colors duration-200 flex items-center justify-center space-x-2"
                                     >
                                         <span>üìÑ</span>
                                         <span>–°–∫–∞—á–∞—Ç—å Excel</span>
                                     </button>
                                 </div>
                             `
                            }
                        </div>
                    `;
                })
                .join("");
        }

        function saveQuantity(e) {
            const order = e.target.dataset.order;
            const index = e.target.dataset.index;
            const quantity = parseFloat(e.target.value) || 0;

            const tempKey = `temp_${order}`;
            const temp = JSON.parse(localStorage.getItem(tempKey) || "{}");
            temp[index] = quantity;
            localStorage.setItem(tempKey, JSON.stringify(temp));

            // Add this line to see changes immediately
            loadOrders();
        }

        async function markDelivered(timestamp, department) {
            const storageKey = `${department}OrderHistory`;
            const orders = JSON.parse(localStorage.getItem(storageKey) || "[]");
            const orderIndex = orders.findIndex(
                (o) => o.timestamp === timestamp,
            );

            if (orderIndex !== -1) {
                // Get saved quantities
                const tempKey = `temp_${timestamp}`;
                const tempQuantities = JSON.parse(
                    localStorage.getItem(tempKey) || "{}",
                );

                // Update order with actual quantities
                orders[orderIndex].items.forEach((item, i) => {
                    const savedQuantity = tempQuantities[i];
                    if (savedQuantity !== undefined) {
                        item.actualQuantity = savedQuantity;
                    }
                });

                // Update order status
                orders[orderIndex].status = "delivered";
                orders[orderIndex].deliveredAt = new Date().toISOString();

                // Calculate new total quantity
                orders[orderIndex].actualTotalQuantity = orders[
                    orderIndex
                ].items.reduce(
                    (sum, item) => sum + (item.actualQuantity || item.quantity),
                    0,
                );

                // Save changes to localStorage
                localStorage.setItem(storageKey, JSON.stringify(orders));
                localStorage.removeItem(tempKey);

                // Also save to server storage for download functionality
                try {
                    const response = await fetch('/api/save-internal-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(orders[orderIndex])
                    });

                    if (response.ok) {
                        console.log('‚úÖ Order saved to server for download');
                    } else {
                        console.warn('‚ö†Ô∏è Failed to save to server storage');
                    }
                } catch (error) {
                    console.warn('‚ö†Ô∏è Error saving to server:', error);
                }

                // Show confirmation
                const differences = orders[orderIndex].items.filter(
                    (item) =>
                        item.actualQuantity &&
                        item.actualQuantity !== item.quantity,
                );
                if (differences.length > 0) {
                    const diffText = differences
                        .map(
                            (item) =>
                                `${item.name}: ${item.quantity} -> ${item.actualQuantity}`,
                        )
                        .join("\\n");
                    alert(`–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\\n–ò–∑–º–µ–Ω–µ–Ω–∏—è:\\n${diffText}\\n\\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª.`);
                } else {
                    alert('–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª.');
                }

                loadOrders();
            }
        }

        // Event Listeners
        document.getElementById("filterAll").onclick = () => {
            currentFilter = "all";
            loadOrders();
        };
        document.getElementById("filterPending").onclick = () => {
            currentFilter = "pending";
            loadOrders();
        };
        document.getElementById("filterDelivered").onclick = () => {
            currentFilter = "delivered";
            loadOrders();
        };
        document.getElementById("refreshBtn").onclick = loadOrders;

        // Download XLS function
        async function downloadOrderXLS(timestamp, department) {
            try {
                console.log(`üìÑ Downloading XLS for order: ${timestamp} (${department})`);
                
                const response = await fetch('/api/download-order-xls', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        orderTimestamp: timestamp,
                        department: department
                    })
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to download file');
                }
                
                // Get the filename from the response headers
                const contentDisposition = response.headers.get('Content-Disposition');
                let filename = `supply-${department}-${new Date().toISOString().split('T')[0]}.xlsx`;
                
                if (contentDisposition) {
                    const filenameMatch = contentDisposition.match(/filename="(.+)"/);
                    if (filenameMatch) {
                        filename = filenameMatch[1];
                    }
                }
                
                // Create blob and download
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
                
                console.log(`‚úÖ Downloaded: ${filename}`);
                
                // Show success message
                alert(`–§–∞–π–ª "${filename}" —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!`);
                
            } catch (error) {
                console.error('‚ùå Download failed:', error);
                alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: ${error.message}`);
            }
        }

        // Initialize
        window.saveQuantity = saveQuantity;
        window.markDelivered = markDelivered;
        window.downloadOrderXLS = downloadOrderXLS;
        loadOrders();
    </script>
</Layout>
