---
import Layout from '../layouts/Layout.astro';
---

<Layout title="–î–æ—Å—Ç–∞–≤–∫–∞ - –ó–∞–∫–∞–∑—ã">
	<div class="min-h-screen bg-white">
		<!-- Header with Role Info -->
		<header class="bg-green-600 text-white px-4 py-6">
			<div class="max-w-md mx-auto">
				<div class="flex items-center justify-between mb-4">
					<div class="flex items-center space-x-2">
						<span class="text-2xl">üöö</span>
						<h1 class="text-2xl font-bold">–î–æ—Å—Ç–∞–≤–∫–∞</h1>
					</div>
					<div class="text-right text-sm">
						<div class="font-medium">–ö—É—Ä—å–µ—Ä</div>
						<a href="/" class="text-green-200 hover:text-white">‚Üê –ì–ª–∞–≤–Ω–∞—è</a>
					</div>
				</div>
				<div class="text-green-100 text-sm mb-2">
					üí° –°–∫–ª–∞–¥ Poster –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞–∫—É–ø–∫–∏"
				</div>

			</div>
		</header>

		<!-- Main Content -->
		<main class="max-w-md mx-auto px-4 py-6">
			<!-- Loading State -->
			<div id="loadingState" class="text-center py-8">
				<div class="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
				<p class="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
			</div>

			<!-- Orders View -->
			<div id="ordersView" class="space-y-4 hidden">
				<!-- Filters -->
				<div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
					<div class="flex space-x-2">
						<button 
							id="filterAll" 
							class="filter-btn px-3 py-2 rounded-lg text-sm font-medium bg-green-600 text-white"
						>
							–í—Å–µ
						</button>
						<button 
							id="filterPending" 
							class="filter-btn px-3 py-2 rounded-lg text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300"
						>
							–û–∂–∏–¥–∞—é—Ç
						</button>
						<button 
							id="filterDelivered" 
							class="filter-btn px-3 py-2 rounded-lg text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300"
						>
							–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
						</button>
					</div>
				</div>

				<!-- Orders List -->
				<div id="ordersList">
					<!-- Orders will be populated by JavaScript -->
				</div>

				<!-- No Orders Message -->
				<div id="noOrdersMessage" class="text-center py-8 text-gray-500 hidden">
					<div class="text-4xl mb-4">üì≠</div>
					<p>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏</p>
				</div>
			</div>

			<!-- Refresh Button -->
			<div class="fixed bottom-6 right-6">
				<button 
					id="refreshBtn" 
					class="bg-green-600 hover:bg-green-700 text-white p-4 rounded-full shadow-lg transition-colors duration-200"
					title="–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑—ã"
				>
					<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
					</svg>
				</button>
			</div>
		</main>
	</div>

	<script is:inline>
		// Set role
		window.userRole = 'delivery';
		window.currentFilter = 'all';
		
		// Load orders from both localStorage and server storage
		async function loadOrders() {
			const loadingState = document.getElementById('loadingState');
			const ordersView = document.getElementById('ordersView');
			
			try {
				console.log('üöö Loading delivery orders...');
				
				// Get orders from localStorage (internal orders)
				const barOrders = JSON.parse(localStorage.getItem('barOrderHistory') || '[]');
				const kitchenOrders = JSON.parse(localStorage.getItem('kitchenOrderHistory') || '[]');
				const localOrders = [...barOrders, ...kitchenOrders];
				
				console.log(`üì± Found ${localOrders.length} local orders`);
				
				// Get orders from server storage (external orders)
				let serverOrders = [];
				try {
					const response = await fetch('/api/get-all-orders');
					const result = await response.json();
					
					if (result.success) {
						serverOrders = result.data || [];
						console.log(`üåê Found ${serverOrders.length} server orders`);
					} else {
						console.warn('‚ö†Ô∏è Failed to fetch server orders:', result.error);
					}
				} catch (serverError) {
					console.warn('‚ö†Ô∏è Server orders unavailable:', serverError.message);
				}
				
				// Combine all orders and remove duplicates (by timestamp)
				const allOrdersMap = new Map();
				
				// Add local orders
				localOrders.forEach(order => {
					allOrdersMap.set(order.timestamp, { ...order, source: 'local' });
				});
				
				// Add server orders (will override duplicates)
				serverOrders.forEach(order => {
					allOrdersMap.set(order.timestamp, { ...order, source: 'server' });
				});
				
				// Convert back to array and sort by timestamp
				const allOrders = Array.from(allOrdersMap.values())
					.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
				
				console.log(`‚úÖ Total orders: ${allOrders.length} (${localOrders.length} local + ${serverOrders.length} server)`);
				
				// Hide loading and show orders view
				loadingState.style.display = 'none';
				ordersView.style.display = 'block';
				ordersView.classList.remove('hidden');
				
				// Store orders globally
				window.allOrders = allOrders;
				
				// Render orders
				renderOrders(allOrders);
				
			} catch (error) {
				console.error('‚ùå Failed to load orders:', error);
				loadingState.innerHTML = `
					<div class="text-center py-8">
						<div class="text-red-500 mb-4">‚ùå</div>
						<p class="text-red-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤</p>
						<button onclick="loadOrders()" class="mt-4 px-4 py-2 bg-green-600 text-white rounded-lg">
							–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
						</button>
					</div>
				`;
			}
		}
		
		function renderOrders(orders) {
			const container = document.getElementById('ordersList');
			const noOrdersMessage = document.getElementById('noOrdersMessage');
			
			// Filter orders based on current filter
			let filteredOrders = orders;
			if (window.currentFilter === 'pending') {
				filteredOrders = orders.filter(order => order.status !== 'delivered');
			} else if (window.currentFilter === 'delivered') {
				filteredOrders = orders.filter(order => order.status === 'delivered');
			}
			
			if (filteredOrders.length === 0) {
				container.innerHTML = '';
				noOrdersMessage.classList.remove('hidden');
				return;
			}
			
			noOrdersMessage.classList.add('hidden');
			
			container.innerHTML = filteredOrders.map(order => {
				const date = new Date(order.timestamp);
				const isDelivered = order.status === 'delivered';
				const deliveredAt = order.deliveredAt ? new Date(order.deliveredAt) : null;
				
				return `
				<div class="bg-white border rounded-lg p-4 ${isDelivered ? 'border-green-200 bg-green-50' : 'border-gray-200'}" data-order-id="${order.timestamp}">
					<div class="flex justify-between items-start mb-3">
						<div>
							<div class="flex items-center space-x-2">
								<span class="text-lg">${order.department === 'kitchen' ? 'üç≥' : 'üç∑'}</span>
								<h3 class="font-bold text-gray-900">${order.departmentName}</h3>
								${isDelivered ? '<span class="text-xs bg-green-600 text-white px-2 py-1 rounded-full">–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</span>' : '<span class="text-xs bg-orange-500 text-white px-2 py-1 rounded-full">–û–∂–∏–¥–∞–µ—Ç</span>'}
							</div>
							<p class="text-sm text-gray-500">
								–ó–∞–∫–∞–∑–∞–Ω–æ: ${date.toLocaleDateString('ru-RU')} –≤ ${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
							</p>
							${deliveredAt ? `<p class="text-sm text-green-600">–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${deliveredAt.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</p>` : ''}
						</div>
						<div class="text-right">
							<div class="text-lg font-bold text-gray-900">${order.totalItems} –ø–æ–∑.</div>
							<div class="text-sm text-gray-500">${order.totalQuantity.toFixed(1)} –µ–¥.</div>
						</div>
					</div>
					
					<!-- Items List -->
					<div class="bg-gray-50 rounded-lg p-3 mb-3">
						<div class="text-sm space-y-2" id="items-${order.timestamp}">
							${order.items.map((item, index) => 
								`<div class="space-y-1">
									<div class="flex justify-between items-center">
										<span class="font-medium">${item.name}</span>
										<span class="text-gray-600">–ó–∞–∫–∞–∑–∞–Ω–æ: ${item.quantity} ${item.unit}</span>
									</div>
									${!isDelivered ? `
									<div class="flex items-center space-x-2">
										<span class="text-xs text-gray-500">–ö—É–ø–ª–µ–Ω–æ:</span>
										<input 
											type="number" 
											class="actual-quantity flex-1 px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-green-500"
											placeholder="${item.quantity}"
											value="${item.actualQuantity || item.quantity}"
											step="0.1"
											min="0"
											data-order="${order.timestamp}"
											data-item-index="${index}"
										/>
										<span class="text-xs text-gray-500">${item.unit}</span>
									</div>
									` : `
									<div class="flex justify-between text-xs">
										<span class="text-gray-500">–ö—É–ø–ª–µ–Ω–æ:</span>
										<span class="text-green-600 font-medium">${item.actualQuantity || item.quantity} ${item.unit}</span>
									</div>
									${item.actualQuantity && item.actualQuantity !== item.quantity ? `
									<div class="text-xs text-orange-600">
										–†–∞–∑–Ω–∏—Ü–∞: ${(item.actualQuantity - item.quantity > 0 ? '+' : '')}${(item.actualQuantity - item.quantity).toFixed(1)} ${item.unit}
									</div>
									` : ''}
									`}
								</div>`
							).join('')}
						</div>
					</div>
					
					<!-- Action Button -->
					${!isDelivered ? `
					<button 
						onclick="handleDeliveryMark('${order.timestamp}', '${order.department}')"
						class="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg font-medium transition-colors duration-200"
					>
						‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
					</button>
					` : `
					<div class="text-center text-green-600 font-medium">
						‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
					</div>
					`}
				</div>
				`;
			}).join('');
			
			// Load saved actual quantities after rendering
			setTimeout(loadSavedActuals, 50);
		}
		
		async function markAsDeliveredWithActuals(orderTimestamp, department) {
			// Collect actual quantities from input fields
			const actualQuantities = [];
			const inputs = document.querySelectorAll(`input[data-order="${orderTimestamp}"]`);
			
			inputs.forEach(input => {
				const itemIndex = parseInt(input.dataset.itemIndex);
				const actualQuantity = parseFloat(input.value) || 0;
				actualQuantities[itemIndex] = actualQuantity;
			});
			
			// Update order status in localStorage
			const storageKey = `${department}OrderHistory`;
			const orders = JSON.parse(localStorage.getItem(storageKey) || '[]');
			
			const orderIndex = orders.findIndex(order => order.timestamp === orderTimestamp);
			if (orderIndex !== -1) {
				// Update each item with actual quantity
				orders[orderIndex].items.forEach((item, index) => {
					if (actualQuantities[index] !== undefined) {
						item.actualQuantity = actualQuantities[index];
					}
				});
				
				orders[orderIndex].status = 'delivered';
				orders[orderIndex].deliveredAt = new Date().toISOString();
				
				// Calculate totals with actual quantities
				orders[orderIndex].actualTotalQuantity = orders[orderIndex].items.reduce(
					(sum, item) => sum + (item.actualQuantity || item.quantity), 0
				);
				
				localStorage.setItem(storageKey, JSON.stringify(orders));
				
				// Clean up temporary actuals
				const tempKey = `tempActuals_${orderTimestamp}`;
				localStorage.removeItem(tempKey);
				
				console.log(`‚úÖ Order marked as delivered with actual quantities: ${orderTimestamp}`);
				
				// Note: Poster inventory updates are done manually in procurement page
				
				// Show summary of differences
				const differences = orders[orderIndex].items.filter(item => 
					item.actualQuantity && Math.abs(item.actualQuantity - item.quantity) > 0.01
				);
				
				if (differences.length > 0) {
					const diffText = differences.map(item => 
						`${item.name}: ${item.quantity} ‚Üí ${item.actualQuantity} ${item.unit}`
					).join('\n');
					alert(`‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:\n${diffText}\n\nüì¶ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ Poster:\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ó–∞–∫—É–ø–∫–∏" ‚Üí "–û–±–Ω–æ–≤–∏—Ç—å Poster"`);
				} else {
					alert('‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π!\n\nüì¶ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ Poster:\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ó–∞–∫—É–ø–∫–∏" ‚Üí "–û–±–Ω–æ–≤–∏—Ç—å Poster"');
				}
				
				// Reload orders
				loadOrders();
			}
		}
		
		// Filter functionality
		function setupFilters() {
			document.getElementById('filterAll').addEventListener('click', () => setFilter('all'));
			document.getElementById('filterPending').addEventListener('click', () => setFilter('pending'));
			document.getElementById('filterDelivered').addEventListener('click', () => setFilter('delivered'));
		}
		
		function setFilter(filter) {
			window.currentFilter = filter;
			
			// Update button styles
			document.querySelectorAll('.filter-btn').forEach(btn => {
				btn.className = 'filter-btn px-3 py-2 rounded-lg text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300';
			});
			document.getElementById(`filter${filter.charAt(0).toUpperCase() + filter.slice(1)}`).className = 'filter-btn px-3 py-2 rounded-lg text-sm font-medium bg-green-600 text-white';
			
			// Re-render with filter
			if (window.allOrders) {
				renderOrders(window.allOrders);
			}
		}
		
		// Refresh functionality
		function setupRefresh() {
			document.getElementById('refreshBtn').addEventListener('click', loadOrders);
		}
		
		// Initialize on page load
		document.addEventListener('DOMContentLoaded', function() {
			loadOrders();
			setupFilters();
			setupRefresh();
			setupActualQuantityListeners();
			
			// Load saved actuals after orders are rendered
			setTimeout(loadSavedActuals, 100);
		});
		


		// Auto-save actual quantities as user types
		function setupActualQuantityListeners() {
			document.addEventListener('input', function(e) {
				if (e.target.classList.contains('actual-quantity')) {
					const orderTimestamp = e.target.dataset.order;
					const itemIndex = parseInt(e.target.dataset.itemIndex);
					const actualQuantity = parseFloat(e.target.value) || 0;
					
					// Save to temporary storage
					const tempKey = `tempActuals_${orderTimestamp}`;
					const tempActuals = JSON.parse(localStorage.getItem(tempKey) || '{}');
					tempActuals[itemIndex] = actualQuantity;
					localStorage.setItem(tempKey, JSON.stringify(tempActuals));
					
					console.log(`üíæ Saved actual quantity for item ${itemIndex}: ${actualQuantity}`);
				}
			});
		}
		
		// Load saved actual quantities
		function loadSavedActuals() {
			document.querySelectorAll('.actual-quantity').forEach(input => {
				const orderTimestamp = input.dataset.order;
				const itemIndex = parseInt(input.dataset.itemIndex);
				const tempKey = `tempActuals_${orderTimestamp}`;
				const tempActuals = JSON.parse(localStorage.getItem(tempKey) || '{}');
				
				if (tempActuals[itemIndex] !== undefined) {
					input.value = tempActuals[itemIndex];
				}
			});
		}

		// Handle delivery marking (wrapper for async function)
		function handleDeliveryMark(orderTimestamp, department) {
			markAsDeliveredWithActuals(orderTimestamp, department).catch(error => {
				console.error('Error marking order as delivered:', error);
				alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
			});
		}

		// Global functions for button onclick
		window.handleDeliveryMark = handleDeliveryMark;
	</script>
</Layout>